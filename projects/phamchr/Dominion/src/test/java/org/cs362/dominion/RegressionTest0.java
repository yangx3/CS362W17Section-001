package org.cs362.dominion;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (short)-1;

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Smithy;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Smithy + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Smithy));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    org.cs362.dominion.Randomness.reset(0L);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Province;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Province));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (byte)-1;

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Embargo;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Embargo + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Embargo));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    org.cs362.dominion.Randomness.reset((long)10);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Council_Room;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Council_Room + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Council_Room));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_card1.add(10, card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.function.UnaryOperator<java.util.AbstractCollection<org.cs362.dominion.Card>> unaryoperator_abstractcollection_card2 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_abstractcollection_card1.replaceAll(unaryoperator_abstractcollection_card2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_card1.add((int)'#', card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (-1);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.get((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card3 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str5 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b7 = hashmap_serializable_str5.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str5);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b12 = hashmap_serializable_str10.equals((java.lang.Object)1.0d);
    int i13 = hashmap_serializable_str10.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str14 = hashmap_serializable_str10.entrySet();
    boolean b15 = hashmap_serializable_str8.equals((java.lang.Object)set_entry_serializable_str14);
    boolean b16 = arraylist_abstractcollection_card3.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str14);
    java.lang.Object[] obj_array17 = arraylist_abstractcollection_card3.toArray();
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    boolean b23 = arraylist_card19.equals((java.lang.Object)(-1.0f));
    boolean b24 = arraylist_abstractcollection_card3.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card25 = arraylist_abstractcollection_card3.spliterator();
    boolean b26 = arraylist_abstractcollection_card1.remove((java.lang.Object)spliterator_abstractcollection_card25);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    int i31 = arraylist_card29.size();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card32 = arraylist_abstractcollection_card1.set((int)(short)100, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i58 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName57);
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i63 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card60, cardName62);
    org.cs362.dominion.Card[] card_array64 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card65 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card65, card_array64);
    int i67 = arraylist_card65.size();
    java.util.RandomAccess[] randomAccess_array68 = new java.util.RandomAccess[] { arraylist_card60, arraylist_card65 };
    java.util.RandomAccess[] randomAccess_array69 = arraylist_card55.toArray(randomAccess_array68);
    org.cs362.dominion.Card.CardName cardName70 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card71 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName70);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str73 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b75 = hashmap_serializable_str73.equals((java.lang.Object)1.0d);
    int i76 = hashmap_serializable_str73.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str77 = hashmap_serializable_str73.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str79 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b81 = hashmap_serializable_str79.equals((java.lang.Object)1.0d);
    hashmap_serializable_str73.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str79);
    java.util.HashMap[] hashMap_array84 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array85 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array84;
    hashmap_serializable_str_array85[0] = hashmap_serializable_str79;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array88 = arraylist_card55.toArray(hashmap_serializable_str_array85);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card89 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b90 = arraylist_abstractcollection_card89.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card55);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card91 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card89);
    java.lang.Object[] obj_array92 = linkedlist_abstractcollection_card91.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card93 = linkedlist_abstractcollection_card91.getLast();
    // The following exception was thrown during execution in test generation
    try {
    boolean b94 = linkedlist_abstractcollection_card45.addAll((int)(byte)100, (java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card91);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array69);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName70.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card93);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.pop();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card38 = linkedlist_abstractcollection_card37.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card39 = linkedlist_abstractcollection_card37.peekLast();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card37.remove();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card39);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card39.element();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)(byte)100, (float)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.getFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    java.lang.Iterable<org.cs362.dominion.Card> iterable_card0 = null;
    org.cs362.dominion.Card.Type type1 = org.cs362.dominion.Card.Type.ACTION;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<org.cs362.dominion.Card> list_card2 = org.cs362.dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type1.equals(org.cs362.dominion.Card.Type.ACTION));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    int i49 = arraylist_card47.size();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card50 = linkedlist_abstractcollection_card42.set((int)'#', (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card47);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.createCards();
    boolean b6 = arraylist_card1.contains((java.lang.Object)list_card5);
    int i8 = arraylist_card1.indexOf((java.lang.Object)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<org.cs362.dominion.Card> list_card11 = arraylist_card1.subList((int)(short)100, (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card3 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str5 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b7 = hashmap_serializable_str5.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str5);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b12 = hashmap_serializable_str10.equals((java.lang.Object)1.0d);
    int i13 = hashmap_serializable_str10.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str14 = hashmap_serializable_str10.entrySet();
    boolean b15 = hashmap_serializable_str8.equals((java.lang.Object)set_entry_serializable_str14);
    boolean b16 = arraylist_abstractcollection_card3.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str14);
    java.lang.Object[] obj_array17 = arraylist_abstractcollection_card3.toArray();
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    boolean b23 = arraylist_card19.equals((java.lang.Object)(-1.0f));
    boolean b24 = arraylist_abstractcollection_card3.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card25 = arraylist_abstractcollection_card3.spliterator();
    boolean b26 = arraylist_abstractcollection_card1.remove((java.lang.Object)spliterator_abstractcollection_card25);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable28 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i33 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    int i42 = arraylist_card40.size();
    java.util.RandomAccess[] randomAccess_array43 = new java.util.RandomAccess[] { arraylist_card35, arraylist_card40 };
    java.util.RandomAccess[] randomAccess_array44 = arraylist_card30.toArray(randomAccess_array43);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName45);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str48 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b50 = hashmap_serializable_str48.equals((java.lang.Object)1.0d);
    int i51 = hashmap_serializable_str48.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str52 = hashmap_serializable_str48.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str54 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b56 = hashmap_serializable_str54.equals((java.lang.Object)1.0d);
    hashmap_serializable_str48.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str54);
    java.util.HashMap[] hashMap_array59 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array60 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array59;
    hashmap_serializable_str_array60[0] = hashmap_serializable_str54;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array63 = arraylist_card30.toArray(hashmap_serializable_str_array60);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card64 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b65 = arraylist_abstractcollection_card64.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card30);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card66 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card64);
    java.lang.Object[] obj_array67 = linkedlist_abstractcollection_card66.toArray();
    boolean b68 = hashmap_type_cloneable28.containsKey((java.lang.Object)linkedlist_abstractcollection_card66);
    boolean b69 = arraylist_abstractcollection_card1.addAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card66);
    java.util.function.UnaryOperator<java.util.AbstractCollection<org.cs362.dominion.Card>> unaryoperator_abstractcollection_card70 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_abstractcollection_card1.replaceAll(unaryoperator_abstractcollection_card70);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.removeLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<java.lang.Object[],java.lang.Comparable<org.cs362.dominion.Card.CardName>> hashmap_obj_array_comparable_cardName1 = new java.util.HashMap<java.lang.Object[],java.lang.Comparable<org.cs362.dominion.Card.CardName>>((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    boolean b16 = arraylist_abstractcollection_card1.isEmpty();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card card20 = null;
    boolean b21 = arraylist_card18.add(card20);
    boolean b22 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.AbstractCollection<org.cs362.dominion.Card>> list_abstractcollection_card25 = arraylist_abstractcollection_card1.subList(100, (int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    long long0 = org.cs362.dominion.Randomness.SEED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 0L);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.lang.Object obj42 = null;
    boolean b43 = hashmap_type_cloneable1.containsKey(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    int i43 = linkedlist_abstractcollection_card39.lastIndexOf((java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = org.cs362.dominion.Randomness.nextRandomInt(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card80 = abstractcollection_card78.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card80);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    boolean b21 = arraylist_card17.equals((java.lang.Object)(-1.0f));
    boolean b22 = arraylist_abstractcollection_card1.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17);
    java.util.function.UnaryOperator<org.cs362.dominion.Card> unaryoperator_card23 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_card17.replaceAll(unaryoperator_card23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card39.getLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness2 = new org.cs362.dominion.Randomness();
    int i3 = randomness2.main();
    int i4 = arraylist_abstractcollection_card1.lastIndexOf((java.lang.Object)i3);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card5 = arraylist_abstractcollection_card1.stream();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card6 = arraylist_abstractcollection_card1.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card6);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    int i40 = linkedlist_abstractcollection_card37.indexOf((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card44 = arraylist_abstractcollection_card43.spliterator();
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.createCards();
    boolean b52 = arraylist_card47.contains((java.lang.Object)list_card51);
    arraylist_abstractcollection_card43.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card47);
    java.lang.String str54 = arraylist_card47.toString();
    // The following exception was thrown during execution in test generation
    try {
    linkedlist_abstractcollection_card39.add((int)'a', (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card47);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    arraylist_abstractcollection_card1.clear();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    boolean b17 = arraylist_abstractcollection_card1.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card14);
    java.util.function.UnaryOperator<java.util.AbstractCollection<org.cs362.dominion.Card>> unaryoperator_abstractcollection_card18 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_abstractcollection_card1.replaceAll(unaryoperator_abstractcollection_card18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    java.lang.String str3 = hashmap_serializable_str1.get((java.lang.Object)(byte)10);
    java.lang.Object obj4 = null;
    boolean b5 = hashmap_serializable_str1.equals(obj4);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card7 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str9 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b11 = hashmap_serializable_str9.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str12 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str9);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    int i17 = hashmap_serializable_str14.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str18 = hashmap_serializable_str14.entrySet();
    boolean b19 = hashmap_serializable_str12.equals((java.lang.Object)set_entry_serializable_str18);
    boolean b20 = arraylist_abstractcollection_card7.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str18);
    java.lang.Object[] obj_array21 = arraylist_abstractcollection_card7.toArray();
    boolean b22 = arraylist_abstractcollection_card7.isEmpty();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card card26 = null;
    boolean b27 = arraylist_card24.add(card26);
    boolean b28 = arraylist_abstractcollection_card7.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24);
    java.lang.String str30 = hashmap_serializable_str1.put((java.io.Serializable)arraylist_card24, "[]");
    org.cs362.dominion.Card card32 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_card24.add(10, card32);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card3 = org.cs362.dominion.Randomness.randomMember((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    org.cs362.dominion.Randomness.reset((long)(short)100);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card card44 = null;
    boolean b45 = arraylist_card42.add(card44);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str47 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b49 = hashmap_serializable_str47.equals((java.lang.Object)1.0d);
    int i50 = hashmap_serializable_str47.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str51 = hashmap_serializable_str47.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str52 = hashmap_serializable_str47.entrySet();
    boolean b53 = arraylist_card42.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str52);
    linkedlist_abstractcollection_card39.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable56 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card58, cardName60);
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i66 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    int i70 = arraylist_card68.size();
    java.util.RandomAccess[] randomAccess_array71 = new java.util.RandomAccess[] { arraylist_card63, arraylist_card68 };
    java.util.RandomAccess[] randomAccess_array72 = arraylist_card58.toArray(randomAccess_array71);
    org.cs362.dominion.Card.CardName cardName73 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card74 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card58, cardName73);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str76 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b78 = hashmap_serializable_str76.equals((java.lang.Object)1.0d);
    int i79 = hashmap_serializable_str76.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str80 = hashmap_serializable_str76.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str82 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b84 = hashmap_serializable_str82.equals((java.lang.Object)1.0d);
    hashmap_serializable_str76.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str82);
    java.util.HashMap[] hashMap_array87 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array88 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array87;
    hashmap_serializable_str_array88[0] = hashmap_serializable_str82;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array91 = arraylist_card58.toArray(hashmap_serializable_str_array88);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card92 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b93 = arraylist_abstractcollection_card92.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card58);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card94 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card92);
    java.lang.Object[] obj_array95 = linkedlist_abstractcollection_card94.toArray();
    boolean b96 = hashmap_type_cloneable56.containsKey((java.lang.Object)linkedlist_abstractcollection_card94);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card97 = linkedlist_abstractcollection_card94.pollLast();
    boolean b98 = linkedlist_abstractcollection_card39.offerLast(abstractcollection_card97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array72);
    org.junit.Assert.assertTrue("'" + cardName73 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName73.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i20 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.createCards();
    boolean b22 = arraylist_card17.contains((java.lang.Object)list_card21);
    org.cs362.dominion.Card.Type type23 = null;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card21, type23);
    int i25 = arraylist_abstractcollection_card1.lastIndexOf((java.lang.Object)list_card21);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card28 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card29 = arraylist_abstractcollection_card28.spliterator();
    org.cs362.dominion.Card[] card_array31 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card32, card_array31);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i35 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card32, cardName34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.createCards();
    boolean b37 = arraylist_card32.contains((java.lang.Object)list_card36);
    arraylist_abstractcollection_card28.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card32);
    arraylist_abstractcollection_card28.clear();
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    int i43 = arraylist_card41.size();
    boolean b44 = arraylist_abstractcollection_card28.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card41);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card46 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness47 = new org.cs362.dominion.Randomness();
    int i48 = randomness47.main();
    int i49 = arraylist_abstractcollection_card46.lastIndexOf((java.lang.Object)i48);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card50 = arraylist_abstractcollection_card46.stream();
    int i51 = arraylist_card41.indexOf((java.lang.Object)stream_abstractcollection_card50);
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card52 = arraylist_card41.stream();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card53 = arraylist_abstractcollection_card1.set((int)'a', (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card41);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card52);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.createCards();
    boolean b6 = arraylist_card1.contains((java.lang.Object)list_card5);
    int i8 = arraylist_card1.indexOf((java.lang.Object)(byte)10);
    java.lang.Object obj9 = arraylist_card1.clone();
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card11 = arraylist_card1.remove(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    org.cs362.dominion.Card.Type type86 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card87 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)abstractcollection_card84, type86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type86.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card39.getLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card53 = linkedlist_abstractcollection_card45.getLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card53);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card17 = arraylist_abstractcollection_card1.listIterator((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    org.cs362.dominion.Card card46 = arraylist_card1.get((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    boolean b21 = arraylist_card17.equals((java.lang.Object)(-1.0f));
    boolean b22 = arraylist_abstractcollection_card1.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card23 = arraylist_abstractcollection_card1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.AbstractCollection<org.cs362.dominion.Card>> list_abstractcollection_card26 = arraylist_abstractcollection_card1.subList(61, (int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card23);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card44 = arraylist_abstractcollection_card43.spliterator();
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.createCards();
    boolean b52 = arraylist_card47.contains((java.lang.Object)list_card51);
    arraylist_abstractcollection_card43.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card47);
    arraylist_abstractcollection_card43.clear();
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    int i58 = arraylist_card56.size();
    boolean b59 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card56);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card61 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness62 = new org.cs362.dominion.Randomness();
    int i63 = randomness62.main();
    int i64 = arraylist_abstractcollection_card61.lastIndexOf((java.lang.Object)i63);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card65 = arraylist_abstractcollection_card61.stream();
    int i66 = arraylist_card56.indexOf((java.lang.Object)stream_abstractcollection_card65);
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card67 = arraylist_card56.stream();
    boolean b68 = linkedlist_abstractcollection_card39.removeFirstOccurrence((java.lang.Object)arraylist_card56);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card69 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.lang.Object obj45 = linkedlist_abstractcollection_card42.clone();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.remove();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    boolean b87 = linkedlist_abstractcollection_card39.contains((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    boolean b61 = linkedlist_abstractcollection_card39.removeLastOccurrence((java.lang.Object)cardName59);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card62 = linkedlist_abstractcollection_card39.removeLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Curse;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Curse));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b44 = hashmap_serializable_str42.equals((java.lang.Object)1.0d);
    int i45 = hashmap_serializable_str42.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str46 = hashmap_serializable_str42.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str47 = hashmap_serializable_str42.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str55 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b57 = hashmap_serializable_str55.equals((java.lang.Object)1.0d);
    hashmap_serializable_str49.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str55);
    hashmap_serializable_str42.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str49);
    hashmap_serializable_str42.clear();
    java.lang.String str62 = hashmap_serializable_str42.remove((java.lang.Object)10.0f);
    hashmap_serializable_str42.clear();
    hashmap_serializable_str42.clear();
    boolean b65 = linkedlist_abstractcollection_card39.removeLastOccurrence((java.lang.Object)hashmap_serializable_str42);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    int i70 = hashmap_serializable_str67.size();
    org.cs362.dominion.Card[] card_array71 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card72 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card72, card_array71);
    int i74 = arraylist_card72.size();
    arraylist_card72.ensureCapacity((int)' ');
    boolean b77 = hashmap_serializable_str42.remove((java.lang.Object)i70, (java.lang.Object)arraylist_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card6 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str11 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str13 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b15 = hashmap_serializable_str13.equals((java.lang.Object)1.0d);
    int i16 = hashmap_serializable_str13.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str17 = hashmap_serializable_str13.entrySet();
    boolean b18 = hashmap_serializable_str11.equals((java.lang.Object)set_entry_serializable_str17);
    boolean b19 = arraylist_abstractcollection_card6.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str17);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    int i33 = arraylist_card31.size();
    java.util.RandomAccess[] randomAccess_array34 = new java.util.RandomAccess[] { arraylist_card26, arraylist_card31 };
    java.util.RandomAccess[] randomAccess_array35 = arraylist_card21.toArray(randomAccess_array34);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName36);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    int i42 = hashmap_serializable_str39.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str43 = hashmap_serializable_str39.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str45 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b47 = hashmap_serializable_str45.equals((java.lang.Object)1.0d);
    hashmap_serializable_str39.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str45);
    java.util.HashMap[] hashMap_array50 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array50;
    hashmap_serializable_str_array51[0] = hashmap_serializable_str45;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = arraylist_card21.toArray(hashmap_serializable_str_array51);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card55 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b56 = arraylist_abstractcollection_card55.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card21);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card57 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card55);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card57.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card59 = linkedlist_abstractcollection_card57.peekLast();
    boolean b60 = hashmap_serializable_str1.remove((java.lang.Object)set_entry_serializable_str17, (java.lang.Object)linkedlist_abstractcollection_card57);
    linkedlist_abstractcollection_card57.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.Card.CardName cardName1 = org.cs362.dominion.Card.CardName.Cutpurse;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card2 = org.cs362.dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + org.cs362.dominion.Card.CardName.Cutpurse + "'", cardName1.equals(org.cs362.dominion.Card.CardName.Cutpurse));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card6 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card7 = arraylist_abstractcollection_card6.spliterator();
    java.lang.Object[] obj_array8 = arraylist_abstractcollection_card6.toArray();
    int i9 = arraylist_card1.lastIndexOf((java.lang.Object)obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.get(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card card44 = null;
    boolean b45 = arraylist_card42.add(card44);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str47 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b49 = hashmap_serializable_str47.equals((java.lang.Object)1.0d);
    int i50 = hashmap_serializable_str47.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str51 = hashmap_serializable_str47.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str52 = hashmap_serializable_str47.entrySet();
    boolean b53 = arraylist_card42.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str52);
    linkedlist_abstractcollection_card39.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.Card card56 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_card42.add(61, card56);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b8 = hashmap_serializable_str6.equals((java.lang.Object)1.0d);
    int i9 = hashmap_serializable_str6.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str10 = hashmap_serializable_str6.entrySet();
    boolean b11 = hashmap_serializable_str4.equals((java.lang.Object)set_entry_serializable_str10);
    int i12 = hashmap_serializable_str4.size();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card14 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str16 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b18 = hashmap_serializable_str16.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    boolean b26 = hashmap_serializable_str19.equals((java.lang.Object)set_entry_serializable_str25);
    boolean b27 = arraylist_abstractcollection_card14.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str25);
    java.lang.Object[] obj_array28 = arraylist_abstractcollection_card14.toArray();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    boolean b34 = arraylist_card30.equals((java.lang.Object)(-1.0f));
    boolean b35 = arraylist_abstractcollection_card14.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30);
    boolean b36 = hashmap_serializable_str4.containsKey((java.lang.Object)b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.createCards();
    boolean b6 = arraylist_card1.contains((java.lang.Object)list_card5);
    int i8 = arraylist_card1.indexOf((java.lang.Object)(byte)10);
    java.lang.Object obj9 = arraylist_card1.clone();
    java.util.function.UnaryOperator<org.cs362.dominion.Card> unaryoperator_card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_card1.replaceAll(unaryoperator_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    java.lang.String[] str_array88 = new java.lang.String[] { "{}", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n" };
    java.util.ArrayList<java.lang.String> arraylist_str89 = new java.util.ArrayList<java.lang.String>();
    boolean b90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str89, str_array88);
    boolean b91 = abstractcollection_card84.removeAll((java.util.Collection<java.lang.String>)arraylist_str89);
    java.lang.Object[] obj_array92 = arraylist_str89.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array92);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card38 = linkedlist_abstractcollection_card37.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card39 = linkedlist_abstractcollection_card37.peekLast();
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.Card card43 = null;
    boolean b44 = arraylist_card41.add(card43);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.Card.CardName cardName53 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i54 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card51, cardName53);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    int i58 = arraylist_card56.size();
    java.util.RandomAccess[] randomAccess_array59 = new java.util.RandomAccess[] { arraylist_card51, arraylist_card56 };
    java.util.RandomAccess[] randomAccess_array60 = arraylist_card46.toArray(randomAccess_array59);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card62 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName61);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    int i67 = hashmap_serializable_str64.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str68 = hashmap_serializable_str64.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str70 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b72 = hashmap_serializable_str70.equals((java.lang.Object)1.0d);
    hashmap_serializable_str64.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str70);
    java.util.HashMap[] hashMap_array75 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array75;
    hashmap_serializable_str_array76[0] = hashmap_serializable_str70;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array79 = arraylist_card46.toArray(hashmap_serializable_str_array76);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card80 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b81 = arraylist_abstractcollection_card80.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card46);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card82 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card80);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card83 = linkedlist_abstractcollection_card82.pollFirst();
    boolean b84 = arraylist_card41.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card82);
    linkedlist_abstractcollection_card37.addFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card41);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card86 = linkedlist_abstractcollection_card37.peekLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card87 = linkedlist_abstractcollection_card37.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName53.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card87);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    linkedlist_abstractcollection_card39.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card39.getFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    linkedlist_abstractcollection_card37.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peek();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    boolean b53 = arraylist_card48.contains((java.lang.Object)list_card52);
    int i55 = arraylist_card48.indexOf((java.lang.Object)(byte)10);
    boolean b56 = linkedlist_abstractcollection_card42.remove((java.lang.Object)i55);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card58 = linkedlist_abstractcollection_card42.listIterator((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    int i44 = linkedlist_abstractcollection_card39.size();
    java.lang.Object obj45 = linkedlist_abstractcollection_card39.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card38 = linkedlist_abstractcollection_card37.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card39 = linkedlist_abstractcollection_card37.peekLast();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card37.removeFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card39);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    java.lang.String[] str_array4 = new java.lang.String[] { "{}", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str5 = new java.util.ArrayList<java.lang.String>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str5, str_array4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = arraylist_str5.get((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.Map<java.io.Serializable,java.lang.String>[] map_serializable_str_array78 = linkedlist_abstractcollection_card39.toArray((java.util.Map<java.io.Serializable,java.lang.String>[])hashmap_serializable_str_array74);
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card80 = linkedlist_abstractcollection_card39.listIterator(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card80);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    java.lang.String[] str_array88 = new java.lang.String[] { "{}", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n" };
    java.util.ArrayList<java.lang.String> arraylist_str89 = new java.util.ArrayList<java.lang.String>();
    boolean b90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str89, str_array88);
    boolean b91 = abstractcollection_card84.removeAll((java.util.Collection<java.lang.String>)arraylist_str89);
    boolean b92 = arraylist_str89.isEmpty();
    java.lang.String[] str_array95 = new java.lang.String[] { "hi!" };
    java.util.ArrayList<java.lang.String> arraylist_str96 = new java.util.ArrayList<java.lang.String>();
    boolean b97 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str96, str_array95);
    // The following exception was thrown during execution in test generation
    try {
    boolean b98 = arraylist_str89.addAll((int)'4', (java.util.Collection<java.lang.String>)arraylist_str96);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str3 = hashmap_type_cloneable2.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b7 = hashmap_type_cloneable5.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    java.util.RandomAccess[] randomAccess_array23 = new java.util.RandomAccess[] { arraylist_card15, arraylist_card20 };
    java.util.RandomAccess[] randomAccess_array24 = arraylist_card10.toArray(randomAccess_array23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName25);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    int i31 = hashmap_serializable_str28.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str32 = hashmap_serializable_str28.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    hashmap_serializable_str28.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str34);
    java.util.HashMap[] hashMap_array39 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array39;
    hashmap_serializable_str_array40[0] = hashmap_serializable_str34;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = arraylist_card10.toArray(hashmap_serializable_str_array40);
    java.lang.Cloneable cloneable44 = hashmap_type_cloneable5.replace(type8, (java.lang.Cloneable)hashmap_serializable_str_array40);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.createCards();
    boolean b51 = arraylist_card46.contains((java.lang.Object)list_card50);
    int i53 = arraylist_card46.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable54 = hashmap_type_cloneable2.put(type8, (java.lang.Cloneable)arraylist_card46);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card55 = hashmap_iterable_entry_serializable_str_spliterator_card0.remove((java.lang.Object)cloneable54);
    java.lang.Object obj56 = hashmap_iterable_entry_serializable_str_spliterator_card0.clone();
    boolean b57 = hashmap_iterable_entry_serializable_str_spliterator_card0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{}"+ "'", str3.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str3 = hashmap_type_cloneable2.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b7 = hashmap_type_cloneable5.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    java.util.RandomAccess[] randomAccess_array23 = new java.util.RandomAccess[] { arraylist_card15, arraylist_card20 };
    java.util.RandomAccess[] randomAccess_array24 = arraylist_card10.toArray(randomAccess_array23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName25);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    int i31 = hashmap_serializable_str28.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str32 = hashmap_serializable_str28.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    hashmap_serializable_str28.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str34);
    java.util.HashMap[] hashMap_array39 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array39;
    hashmap_serializable_str_array40[0] = hashmap_serializable_str34;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = arraylist_card10.toArray(hashmap_serializable_str_array40);
    java.lang.Cloneable cloneable44 = hashmap_type_cloneable5.replace(type8, (java.lang.Cloneable)hashmap_serializable_str_array40);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.createCards();
    boolean b51 = arraylist_card46.contains((java.lang.Object)list_card50);
    int i53 = arraylist_card46.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable54 = hashmap_type_cloneable2.put(type8, (java.lang.Cloneable)arraylist_card46);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card55 = hashmap_iterable_entry_serializable_str_spliterator_card0.remove((java.lang.Object)cloneable54);
    java.lang.Object obj56 = hashmap_iterable_entry_serializable_str_spliterator_card0.clone();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str63 = hashmap_serializable_str58.entrySet();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card65 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card66 = arraylist_abstractcollection_card65.spliterator();
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i72 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card69, cardName71);
    java.util.List<org.cs362.dominion.Card> list_card73 = org.cs362.dominion.Card.createCards();
    boolean b74 = arraylist_card69.contains((java.lang.Object)list_card73);
    arraylist_abstractcollection_card65.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    org.cs362.dominion.Card[] card_array76 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card77 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card77, card_array76);
    org.cs362.dominion.Card.CardName cardName79 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i80 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card77, cardName79);
    java.util.List<org.cs362.dominion.Card> list_card81 = org.cs362.dominion.Card.createCards();
    boolean b82 = arraylist_card77.contains((java.lang.Object)list_card81);
    org.cs362.dominion.Card.Type type83 = null;
    java.util.List<org.cs362.dominion.Card> list_card84 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card81, type83);
    boolean b85 = arraylist_card69.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card81);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card86 = arraylist_card69.spliterator();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card87 = hashmap_iterable_entry_serializable_str_spliterator_card0.put((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str63, spliterator_card86);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str89 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b91 = hashmap_serializable_str89.equals((java.lang.Object)1.0d);
    int i92 = hashmap_serializable_str89.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str93 = hashmap_serializable_str89.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str94 = hashmap_serializable_str89.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str95 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b96 = arraylist_iterable_entry_serializable_str95.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str63);
    boolean b97 = arraylist_iterable_entry_serializable_str95.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str94);
    java.util.function.UnaryOperator<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> unaryoperator_iterable_entry_serializable_str98 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_iterable_entry_serializable_str95.replaceAll(unaryoperator_iterable_entry_serializable_str98);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{}"+ "'", str3.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName79.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card0 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card1 = linkedlist_abstractcollection_card0.removeFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Estate;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Estate));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    int i44 = linkedlist_abstractcollection_card39.size();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card39.element();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card37.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card37.peekFirst();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card78 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b79 = arraylist_abstractcollection_card78.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card44);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card78);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card81 = linkedlist_abstractcollection_card80.pollFirst();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card82 = linkedlist_abstractcollection_card37.set((-1), abstractcollection_card81);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card81);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    boolean b61 = linkedlist_abstractcollection_card39.removeLastOccurrence((java.lang.Object)cardName59);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card63 = linkedlist_abstractcollection_card39.listIterator((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.Map<java.io.Serializable,java.lang.String>[] map_serializable_str_array78 = linkedlist_abstractcollection_card39.toArray((java.util.Map<java.io.Serializable,java.lang.String>[])hashmap_serializable_str_array74);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card79 = linkedlist_abstractcollection_card39.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card79);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.retainAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peekLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peekFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    boolean b57 = linkedlist_abstractcollection_card39.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card39.pop();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card60 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str65 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str62);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    int i70 = hashmap_serializable_str67.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str71 = hashmap_serializable_str67.entrySet();
    boolean b72 = hashmap_serializable_str65.equals((java.lang.Object)set_entry_serializable_str71);
    boolean b73 = arraylist_abstractcollection_card60.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str71);
    java.lang.Object[] obj_array74 = arraylist_abstractcollection_card60.toArray();
    boolean b75 = arraylist_abstractcollection_card60.isEmpty();
    org.cs362.dominion.Card[] card_array76 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card77 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card77, card_array76);
    org.cs362.dominion.Card card79 = null;
    boolean b80 = arraylist_card77.add(card79);
    boolean b81 = arraylist_abstractcollection_card60.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card77);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card83 = arraylist_card77.listIterator((int)(byte)0);
    boolean b84 = linkedlist_abstractcollection_card39.offerFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    // The following exception was thrown during execution in test generation
    try {
    boolean b96 = gameState90.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card.CardName cardName43 = org.cs362.dominion.Card.CardName.Feast;
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i66 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.Card.CardName cardName70 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i71 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card68, cardName70);
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    int i75 = arraylist_card73.size();
    java.util.RandomAccess[] randomAccess_array76 = new java.util.RandomAccess[] { arraylist_card68, arraylist_card73 };
    java.util.RandomAccess[] randomAccess_array77 = arraylist_card63.toArray(randomAccess_array76);
    org.cs362.dominion.Card.CardName cardName78 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card79 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName78);
    org.cs362.dominion.Card.CardName[] cardName_array80 = new org.cs362.dominion.Card.CardName[] { cardName43, cardName60, cardName78 };
    org.cs362.dominion.Card.CardName[] cardName_array81 = linkedlist_abstractcollection_card39.toArray(cardName_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + org.cs362.dominion.Card.CardName.Feast + "'", cardName43.equals(org.cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName70.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array77);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName78.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cardName_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cardName_array81);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "[]", "[]", "", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", "" };
    java.util.ArrayList<java.lang.String> arraylist_str6 = new java.util.ArrayList<java.lang.String>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str6, str_array5);
    java.util.Iterator<java.lang.String> iterator_str8 = arraylist_str6.iterator();
    java.util.function.UnaryOperator<java.lang.String> unaryoperator_str9 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_str6.replaceAll(unaryoperator_str9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_str8);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i1 = arraylist_entry_serializable_str0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.Map.Entry<java.io.Serializable,java.lang.String>> list_entry_serializable_str4 = arraylist_entry_serializable_str0.subList(1, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i92 = gameState90.play();
    org.cs362.dominion.GameState gameState93 = null;
    org.cs362.dominion.Player player95 = new org.cs362.dominion.Player(gameState93, "hi!");
    player95.buyCard();
    java.lang.String str97 = player95.toString();
    java.lang.Integer i99 = hashmap_player_i92.put(player95, (java.lang.Integer)61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i99);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i1 = arraylist_entry_serializable_str0.size();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str3 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i4 = arraylist_entry_serializable_str3.size();
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = arraylist_entry_serializable_str0.addAll((int)' ', (java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.List<org.cs362.dominion.Player> list_player94 = gameState90.players;
    gameState90.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player96 = gameState90.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player96);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    boolean b43 = linkedlist_abstractcollection_card39.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    boolean b16 = arraylist_abstractcollection_card1.isEmpty();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card17 = arraylist_abstractcollection_card1.listIterator();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card18 = arraylist_abstractcollection_card1.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card18);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str54 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b56 = hashmap_serializable_str54.equals((java.lang.Object)1.0d);
    int i57 = hashmap_serializable_str54.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str58 = hashmap_serializable_str54.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str59 = hashmap_serializable_str54.entrySet();
    boolean b60 = linkedlist_abstractcollection_card45.removeLastOccurrence((java.lang.Object)set_entry_serializable_str59);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card61 = linkedlist_abstractcollection_card45.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card61);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    hashmap_serializable_str1.clear();
    java.lang.String str21 = hashmap_serializable_str1.remove((java.lang.Object)10.0f);
    hashmap_serializable_str1.clear();
    hashmap_serializable_str1.clear();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str24 = hashmap_serializable_str1.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str24);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(3, (float)'#');
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable4 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str5 = hashmap_type_cloneable4.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable7 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b9 = hashmap_type_cloneable7.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i20 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    int i24 = arraylist_card22.size();
    java.util.RandomAccess[] randomAccess_array25 = new java.util.RandomAccess[] { arraylist_card17, arraylist_card22 };
    java.util.RandomAccess[] randomAccess_array26 = arraylist_card12.toArray(randomAccess_array25);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName27);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    int i33 = hashmap_serializable_str30.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str34 = hashmap_serializable_str30.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str36 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b38 = hashmap_serializable_str36.equals((java.lang.Object)1.0d);
    hashmap_serializable_str30.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str36);
    java.util.HashMap[] hashMap_array41 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array41;
    hashmap_serializable_str_array42[0] = hashmap_serializable_str36;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array45 = arraylist_card12.toArray(hashmap_serializable_str_array42);
    java.lang.Cloneable cloneable46 = hashmap_type_cloneable7.replace(type10, (java.lang.Cloneable)hashmap_serializable_str_array42);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    boolean b53 = arraylist_card48.contains((java.lang.Object)list_card52);
    int i55 = arraylist_card48.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable56 = hashmap_type_cloneable4.put(type10, (java.lang.Cloneable)arraylist_card48);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable58 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b60 = hashmap_type_cloneable58.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type61 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i66 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.Card.CardName cardName70 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i71 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card68, cardName70);
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    int i75 = arraylist_card73.size();
    java.util.RandomAccess[] randomAccess_array76 = new java.util.RandomAccess[] { arraylist_card68, arraylist_card73 };
    java.util.RandomAccess[] randomAccess_array77 = arraylist_card63.toArray(randomAccess_array76);
    org.cs362.dominion.Card.CardName cardName78 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card79 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName78);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str81 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b83 = hashmap_serializable_str81.equals((java.lang.Object)1.0d);
    int i84 = hashmap_serializable_str81.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str85 = hashmap_serializable_str81.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str87 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b89 = hashmap_serializable_str87.equals((java.lang.Object)1.0d);
    hashmap_serializable_str81.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str87);
    java.util.HashMap[] hashMap_array92 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array93 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array92;
    hashmap_serializable_str_array93[0] = hashmap_serializable_str87;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array96 = arraylist_card63.toArray(hashmap_serializable_str_array93);
    java.lang.Cloneable cloneable97 = hashmap_type_cloneable58.replace(type61, (java.lang.Cloneable)hashmap_serializable_str_array93);
    java.lang.Cloneable cloneable98 = hashmap_type_cloneable2.replace(type10, (java.lang.Cloneable)hashmap_type_cloneable58);
    java.lang.String str99 = hashmap_type_cloneable2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{}"+ "'", str5.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type61.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName70.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array77);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName78.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "{}"+ "'", str99.equals("{}"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i1 = arraylist_entry_serializable_str0.size();
    java.util.function.UnaryOperator<java.util.Map.Entry<java.io.Serializable,java.lang.String>> unaryoperator_entry_serializable_str2 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_entry_serializable_str0.replaceAll(unaryoperator_entry_serializable_str2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = '#';

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card39.toArray();
    java.lang.Object obj42 = linkedlist_abstractcollection_card39.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = null;
    boolean b44 = linkedlist_abstractcollection_card39.offerLast(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> collection_iterable_entry_serializable_str2 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b3 = arraylist_entry_serializable_str0.retainAll(collection_iterable_entry_serializable_str2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card3 = arraylist_abstractcollection_card1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card3);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.retainAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable46 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b48 = hashmap_type_cloneable46.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type49 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.Card.CardName cardName53 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i54 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card51, cardName53);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i59 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName58);
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    int i63 = arraylist_card61.size();
    java.util.RandomAccess[] randomAccess_array64 = new java.util.RandomAccess[] { arraylist_card56, arraylist_card61 };
    java.util.RandomAccess[] randomAccess_array65 = arraylist_card51.toArray(randomAccess_array64);
    org.cs362.dominion.Card.CardName cardName66 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card67 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card51, cardName66);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    int i72 = hashmap_serializable_str69.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str73 = hashmap_serializable_str69.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str75 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b77 = hashmap_serializable_str75.equals((java.lang.Object)1.0d);
    hashmap_serializable_str69.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str75);
    java.util.HashMap[] hashMap_array80 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array81 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array80;
    hashmap_serializable_str_array81[0] = hashmap_serializable_str75;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array84 = arraylist_card51.toArray(hashmap_serializable_str_array81);
    java.lang.Cloneable cloneable85 = hashmap_type_cloneable46.replace(type49, (java.lang.Cloneable)hashmap_serializable_str_array81);
    java.util.AbstractMap<java.io.Serializable,java.lang.String>[] abstractmap_serializable_str_array86 = linkedlist_abstractcollection_card42.toArray((java.util.AbstractMap<java.io.Serializable,java.lang.String>[])hashmap_serializable_str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type49.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName53.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array65);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName66.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractmap_serializable_str_array86);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    java.lang.String[] str_array1 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array1);
    java.lang.Object obj4 = arraylist_str2.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    boolean b54 = hashmap_type_cloneable5.replace(type6, (java.lang.Cloneable)arraylist_card12, (java.lang.Cloneable)hashmap_serializable_str_array53);
    java.util.Set<org.cs362.dominion.Card.Type> set_type55 = hashmap_type_cloneable5.keySet();
    boolean b56 = arraylist_str2.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    java.util.function.UnaryOperator<java.lang.String> unaryoperator_str57 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_str2.replaceAll(unaryoperator_str57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i96 = gameState90.getWinners();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str97 = gameState90.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i96);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card card46 = null;
    boolean b47 = arraylist_card44.add(card46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str54 = hashmap_serializable_str49.entrySet();
    boolean b55 = arraylist_card44.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str57 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b59 = hashmap_serializable_str57.equals((java.lang.Object)1.0d);
    int i60 = hashmap_serializable_str57.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str57.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str57.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str63 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b64 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    boolean b65 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str62);
    boolean b66 = linkedlist_abstractcollection_card39.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>> iterable_entry_serializable_str67 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> list_iterable_entry_serializable_str70 = arraylist_iterable_entry_serializable_str63.subList((int)(short)100, (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterable_entry_serializable_str67);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peek();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    boolean b53 = arraylist_card48.contains((java.lang.Object)list_card52);
    int i55 = arraylist_card48.indexOf((java.lang.Object)(byte)10);
    boolean b56 = linkedlist_abstractcollection_card42.remove((java.lang.Object)i55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    boolean b61 = linkedlist_abstractcollection_card42.removeLastOccurrence((java.lang.Object)arraylist_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    hashmap_player_i94.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.List<org.cs362.dominion.Player> list_player94 = gameState90.players;
    gameState90.initializeGame();
    gameState90.initializeGame();
    gameState90.initializeGame();
    org.cs362.dominion.Player player99 = new org.cs362.dominion.Player(gameState90, "{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player94);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    org.cs362.dominion.Card card35 = null;
    boolean b36 = arraylist_card1.add(card35);
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card37 = arraylist_card1.parallelStream();
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Gardens;
    // The following exception was thrown during execution in test generation
    try {
    int i39 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Gardens + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Gardens));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = 1;

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    int i2 = arraylist_abstractcollection_card1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.stream.Stream<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> stream_entry_iterable_entry_serializable_str_spliterator_card1 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.stream();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_entry_iterable_entry_serializable_str_spliterator_card3 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.listIterator(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_iterable_entry_serializable_str_spliterator_card1);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    hashmap_player_i5.clear();
    org.cs362.dominion.GameState gameState7 = null;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState7, "hi!");
    player9.buyCard();
    java.lang.String str11 = player9.toString();
    player9.playKingdomCard();
    player9.playKingdomCard();
    java.lang.Integer i15 = hashmap_player_i5.replace(player9, (java.lang.Integer)10);
    player9.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player9.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i15);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card40 = linkedlist_abstractcollection_card37.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card40);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    java.util.Set<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> set_entry_player_i96 = hashmap_player_i95.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_player_i96);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b8 = hashmap_serializable_str6.equals((java.lang.Object)1.0d);
    int i9 = hashmap_serializable_str6.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str10 = hashmap_serializable_str6.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str11 = hashmap_serializable_str6.entrySet();
    boolean b12 = arraylist_card1.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str11);
    arraylist_card1.clear();
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card14 = arraylist_card1.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card14);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i46 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    java.util.RandomAccess[] randomAccess_array56 = new java.util.RandomAccess[] { arraylist_card48, arraylist_card53 };
    java.util.RandomAccess[] randomAccess_array57 = arraylist_card43.toArray(randomAccess_array56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName58);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    int i64 = hashmap_serializable_str61.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str65 = hashmap_serializable_str61.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    hashmap_serializable_str61.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str67);
    java.util.HashMap[] hashMap_array72 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array72;
    hashmap_serializable_str_array73[0] = hashmap_serializable_str67;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = arraylist_card43.toArray(hashmap_serializable_str_array73);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card77 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b78 = arraylist_abstractcollection_card77.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card77);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card80 = linkedlist_abstractcollection_card79.pollFirst();
    boolean b81 = linkedlist_abstractcollection_card39.add(abstractcollection_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card card45 = null;
    boolean b46 = arraylist_card43.add(card45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    int i69 = hashmap_serializable_str66.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str66.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str72 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b74 = hashmap_serializable_str72.equals((java.lang.Object)1.0d);
    hashmap_serializable_str66.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str72);
    java.util.HashMap[] hashMap_array77 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array77;
    hashmap_serializable_str_array78[0] = hashmap_serializable_str72;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array81 = arraylist_card48.toArray(hashmap_serializable_str_array78);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card82 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b83 = arraylist_abstractcollection_card82.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card48);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card84 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card82);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card84.pollFirst();
    boolean b86 = arraylist_card43.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card84);
    linkedlist_abstractcollection_card39.addFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card88 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array89 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card90 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b91 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card90, card_array89);
    org.cs362.dominion.Card.CardName cardName92 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i93 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card90, cardName92);
    java.util.List<org.cs362.dominion.Card> list_card94 = org.cs362.dominion.Card.createCards();
    boolean b95 = arraylist_card90.contains((java.lang.Object)list_card94);
    boolean b96 = linkedlist_abstractcollection_card39.offerFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card90);
    boolean b97 = arraylist_entry_serializable_str0.contains((java.lang.Object)linkedlist_abstractcollection_card39);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card99 = linkedlist_abstractcollection_card39.get((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    org.junit.Assert.assertTrue("'" + cardName92 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName92.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    org.cs362.dominion.Player player96 = new org.cs362.dominion.Player(gameState90, "");
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState97 = gameState90.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    org.cs362.dominion.Card card79 = null;
    boolean b80 = arraylist_card45.add(card79);
    linkedlist_abstractcollection_card39.add((int)(byte)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card82 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array83 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card84 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b85 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card84, card_array83);
    int i86 = arraylist_card84.size();
    org.cs362.dominion.GameState gameState87 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card84);
    boolean b88 = linkedlist_abstractcollection_card39.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.lang.Object[] obj_array42 = linkedlist_abstractcollection_card39.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card39.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    boolean b16 = arraylist_abstractcollection_card1.isEmpty();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card card20 = null;
    boolean b21 = arraylist_card18.add(card20);
    boolean b22 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card24 = arraylist_card18.listIterator(1);
    arraylist_card18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card24);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.function.UnaryOperator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> unaryoperator_entry_iterable_entry_serializable_str_spliterator_card1 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.replaceAll(unaryoperator_entry_iterable_entry_serializable_str_spliterator_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.Map<java.io.Serializable,java.lang.String>[] map_serializable_str_array78 = linkedlist_abstractcollection_card39.toArray((java.util.Map<java.io.Serializable,java.lang.String>[])hashmap_serializable_str_array74);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card79 = linkedlist_abstractcollection_card39.removeLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map_serializable_str_array78);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card37.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card37.peekFirst();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card78 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b79 = arraylist_abstractcollection_card78.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card44);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card78);
    java.lang.Object[] obj_array81 = linkedlist_abstractcollection_card80.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card82 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card80);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card83 = linkedlist_abstractcollection_card82.element();
    org.cs362.dominion.Card[] card_array84 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card85 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b86 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card85, card_array84);
    org.cs362.dominion.Card card87 = null;
    boolean b88 = arraylist_card85.add(card87);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str90 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b92 = hashmap_serializable_str90.equals((java.lang.Object)1.0d);
    int i93 = hashmap_serializable_str90.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str94 = hashmap_serializable_str90.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str95 = hashmap_serializable_str90.entrySet();
    boolean b96 = arraylist_card85.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str95);
    linkedlist_abstractcollection_card82.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card85);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card98 = linkedlist_abstractcollection_card82.removeLast();
    // The following exception was thrown during execution in test generation
    try {
    boolean b99 = linkedlist_abstractcollection_card37.addAll(2, (java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card82);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card98);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    org.cs362.dominion.Randomness.reset((long)(short)10);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card41);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = linkedlist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card38);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card37.peekFirst();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable41 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type42 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card44 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card45 = arraylist_abstractcollection_card44.spliterator();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    boolean b53 = arraylist_card48.contains((java.lang.Object)list_card52);
    arraylist_abstractcollection_card44.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card48);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i59 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName58);
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i64 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card61, cardName63);
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    int i68 = arraylist_card66.size();
    java.util.RandomAccess[] randomAccess_array69 = new java.util.RandomAccess[] { arraylist_card61, arraylist_card66 };
    java.util.RandomAccess[] randomAccess_array70 = arraylist_card56.toArray(randomAccess_array69);
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card72 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName71);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str74 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b76 = hashmap_serializable_str74.equals((java.lang.Object)1.0d);
    int i77 = hashmap_serializable_str74.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str78 = hashmap_serializable_str74.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str80 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b82 = hashmap_serializable_str80.equals((java.lang.Object)1.0d);
    hashmap_serializable_str74.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str80);
    java.util.HashMap[] hashMap_array85 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array86 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array85;
    hashmap_serializable_str_array86[0] = hashmap_serializable_str80;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array89 = arraylist_card56.toArray(hashmap_serializable_str_array86);
    boolean b90 = hashmap_type_cloneable41.replace(type42, (java.lang.Cloneable)arraylist_card48, (java.lang.Cloneable)hashmap_serializable_str_array89);
    java.util.List<org.cs362.dominion.Card> list_card91 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)abstractcollection_card40, type42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type42.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array70);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    int i1 = org.cs362.dominion.Randomness.nextRandomInt((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i46 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    java.util.RandomAccess[] randomAccess_array56 = new java.util.RandomAccess[] { arraylist_card48, arraylist_card53 };
    java.util.RandomAccess[] randomAccess_array57 = arraylist_card43.toArray(randomAccess_array56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName58);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    int i64 = hashmap_serializable_str61.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str65 = hashmap_serializable_str61.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    hashmap_serializable_str61.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str67);
    java.util.HashMap[] hashMap_array72 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array72;
    hashmap_serializable_str_array73[0] = hashmap_serializable_str67;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = arraylist_card43.toArray(hashmap_serializable_str_array73);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card77 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b78 = arraylist_abstractcollection_card77.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card77);
    java.lang.Object[] obj_array80 = linkedlist_abstractcollection_card79.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card79);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card82 = linkedlist_abstractcollection_card81.descendingIterator();
    java.lang.Object obj83 = linkedlist_abstractcollection_card81.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card81.removeFirst();
    linkedlist_abstractcollection_card39.push(abstractcollection_card84);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card86 = linkedlist_abstractcollection_card39.descendingIterator();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card88 = linkedlist_abstractcollection_card39.listIterator((int)(short)1);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card89 = linkedlist_abstractcollection_card39.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card89);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.spliterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.AbstractCollection<org.cs362.dominion.Card>> list_abstractcollection_card46 = linkedlist_abstractcollection_card39.subList((int)(short)-1, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card43);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Village;
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card4 = hashmap_iterable_entry_serializable_str_spliterator_card2.remove((java.lang.Object)cardName3);
    java.util.Set<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> set_entry_iterable_entry_serializable_str_spliterator_card5 = hashmap_iterable_entry_serializable_str_spliterator_card2.entrySet();
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.addAll(61, (java.util.Collection<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>)set_entry_iterable_entry_serializable_str_spliterator_card5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_iterable_entry_serializable_str_spliterator_card5);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    org.cs362.dominion.Card card6 = null;
    player2.discard(card6);
    
    // Regression assertion (captures the current behavior of the code)
  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    boolean b91 = gameState90.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState91 = null;
    org.cs362.dominion.Player player93 = new org.cs362.dominion.Player(gameState91, "hi!");
    player93.playTreasureCard();
    org.cs362.dominion.Card card95 = null;
    player93.discard(card95);
    gameState90.addPlayer(player93);
    org.cs362.dominion.Card card98 = null;
    player93.discard(card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    java.lang.Object obj41 = linkedlist_abstractcollection_card39.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str54 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b56 = hashmap_serializable_str54.equals((java.lang.Object)1.0d);
    int i57 = hashmap_serializable_str54.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str58 = hashmap_serializable_str54.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str59 = hashmap_serializable_str54.entrySet();
    boolean b60 = linkedlist_abstractcollection_card45.removeLastOccurrence((java.lang.Object)set_entry_serializable_str59);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card62 = linkedlist_abstractcollection_card45.remove(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card62);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i46 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    java.util.RandomAccess[] randomAccess_array56 = new java.util.RandomAccess[] { arraylist_card48, arraylist_card53 };
    java.util.RandomAccess[] randomAccess_array57 = arraylist_card43.toArray(randomAccess_array56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName58);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    int i64 = hashmap_serializable_str61.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str65 = hashmap_serializable_str61.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    hashmap_serializable_str61.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str67);
    java.util.HashMap[] hashMap_array72 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array72;
    hashmap_serializable_str_array73[0] = hashmap_serializable_str67;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = arraylist_card43.toArray(hashmap_serializable_str_array73);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card77 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b78 = arraylist_abstractcollection_card77.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card77);
    java.lang.Object[] obj_array80 = linkedlist_abstractcollection_card79.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card79);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card82 = linkedlist_abstractcollection_card81.descendingIterator();
    java.lang.Object obj83 = linkedlist_abstractcollection_card81.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card81.removeFirst();
    linkedlist_abstractcollection_card39.push(abstractcollection_card84);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card86 = linkedlist_abstractcollection_card39.removeLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card86);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card5 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    hashmap_iterable_entry_serializable_str_spliterator_card2.putAll((java.util.Map<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>)hashmap_iterable_entry_serializable_str_spliterator_card5);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    org.cs362.dominion.Card card7 = null;
    player2.discard(card7);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = org.cs362.dominion.Randomness.nextRandomInt((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    arraylist_abstractcollection_card1.clear();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    boolean b17 = arraylist_abstractcollection_card1.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card14);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card19 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness20 = new org.cs362.dominion.Randomness();
    int i21 = randomness20.main();
    int i22 = arraylist_abstractcollection_card19.lastIndexOf((java.lang.Object)i21);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card23 = arraylist_abstractcollection_card19.stream();
    int i24 = arraylist_card14.indexOf((java.lang.Object)stream_abstractcollection_card23);
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card25 = arraylist_card14.stream();
    java.util.Collection<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> collection_entry_iterable_entry_serializable_str_spliterator_card26 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b27 = arraylist_card14.retainAll(collection_entry_iterable_entry_serializable_str_spliterator_card26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card25);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card44 = linkedlist_abstractcollection_card39.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card44);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str3 = hashmap_type_cloneable2.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b7 = hashmap_type_cloneable5.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    java.util.RandomAccess[] randomAccess_array23 = new java.util.RandomAccess[] { arraylist_card15, arraylist_card20 };
    java.util.RandomAccess[] randomAccess_array24 = arraylist_card10.toArray(randomAccess_array23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName25);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    int i31 = hashmap_serializable_str28.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str32 = hashmap_serializable_str28.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    hashmap_serializable_str28.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str34);
    java.util.HashMap[] hashMap_array39 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array39;
    hashmap_serializable_str_array40[0] = hashmap_serializable_str34;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = arraylist_card10.toArray(hashmap_serializable_str_array40);
    java.lang.Cloneable cloneable44 = hashmap_type_cloneable5.replace(type8, (java.lang.Cloneable)hashmap_serializable_str_array40);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.createCards();
    boolean b51 = arraylist_card46.contains((java.lang.Object)list_card50);
    int i53 = arraylist_card46.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable54 = hashmap_type_cloneable2.put(type8, (java.lang.Cloneable)arraylist_card46);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card55 = hashmap_iterable_entry_serializable_str_spliterator_card0.remove((java.lang.Object)cloneable54);
    java.lang.Object obj56 = hashmap_iterable_entry_serializable_str_spliterator_card0.clone();
    java.util.Set<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> set_iterable_entry_serializable_str57 = hashmap_iterable_entry_serializable_str_spliterator_card0.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{}"+ "'", str3.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_iterable_entry_serializable_str57);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peek();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card47 = linkedlist_abstractcollection_card42.pop();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card55 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card56 = arraylist_abstractcollection_card55.spliterator();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.createCards();
    boolean b64 = arraylist_card59.contains((java.lang.Object)list_card63);
    arraylist_abstractcollection_card55.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card59);
    arraylist_abstractcollection_card55.clear();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    int i70 = arraylist_card68.size();
    boolean b71 = arraylist_abstractcollection_card55.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card72 = linkedlist_abstractcollection_card45.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card75 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str77 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b79 = hashmap_serializable_str77.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str80 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str77);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str82 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b84 = hashmap_serializable_str82.equals((java.lang.Object)1.0d);
    int i85 = hashmap_serializable_str82.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str86 = hashmap_serializable_str82.entrySet();
    boolean b87 = hashmap_serializable_str80.equals((java.lang.Object)set_entry_serializable_str86);
    boolean b88 = arraylist_abstractcollection_card75.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str86);
    java.lang.Object[] obj_array89 = arraylist_abstractcollection_card75.toArray();
    boolean b90 = arraylist_abstractcollection_card75.isEmpty();
    org.cs362.dominion.Card[] card_array91 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card92 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b93 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92, card_array91);
    org.cs362.dominion.Card card94 = null;
    boolean b95 = arraylist_card92.add(card94);
    boolean b96 = arraylist_abstractcollection_card75.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92);
    linkedlist_abstractcollection_card45.add(0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card92);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card98 = linkedlist_abstractcollection_card45.removeFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card98);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    boolean b19 = hashmap_serializable_str1.isEmpty();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable21 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b23 = hashmap_type_cloneable21.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i34 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    int i38 = arraylist_card36.size();
    java.util.RandomAccess[] randomAccess_array39 = new java.util.RandomAccess[] { arraylist_card31, arraylist_card36 };
    java.util.RandomAccess[] randomAccess_array40 = arraylist_card26.toArray(randomAccess_array39);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName41);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    int i47 = hashmap_serializable_str44.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str48 = hashmap_serializable_str44.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str50 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b52 = hashmap_serializable_str50.equals((java.lang.Object)1.0d);
    hashmap_serializable_str44.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str50);
    java.util.HashMap[] hashMap_array55 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array56 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array55;
    hashmap_serializable_str_array56[0] = hashmap_serializable_str50;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array59 = arraylist_card26.toArray(hashmap_serializable_str_array56);
    java.lang.Cloneable cloneable60 = hashmap_type_cloneable21.replace(type24, (java.lang.Cloneable)hashmap_serializable_str_array56);
    boolean b63 = hashmap_serializable_str1.replace((java.io.Serializable)hashmap_serializable_str_array56, "", "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type24.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.lang.Object obj81 = null;
    boolean b82 = linkedlist_abstractcollection_card80.remove(obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peekFirst();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card47 = linkedlist_abstractcollection_card42.removeFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)(short)-1, (float)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = 100;

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peek();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    boolean b53 = arraylist_card48.contains((java.lang.Object)list_card52);
    int i55 = arraylist_card48.indexOf((java.lang.Object)(byte)10);
    boolean b56 = linkedlist_abstractcollection_card42.remove((java.lang.Object)i55);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card58 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card59 = arraylist_abstractcollection_card58.spliterator();
    org.cs362.dominion.Card[] card_array61 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card62 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card62, card_array61);
    org.cs362.dominion.Card.CardName cardName64 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i65 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card62, cardName64);
    java.util.List<org.cs362.dominion.Card> list_card66 = org.cs362.dominion.Card.createCards();
    boolean b67 = arraylist_card62.contains((java.lang.Object)list_card66);
    arraylist_abstractcollection_card58.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card62);
    boolean b69 = linkedlist_abstractcollection_card42.offer((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card62);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card70 = linkedlist_abstractcollection_card42.getLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card71 = linkedlist_abstractcollection_card42.element();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName64.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card71);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card card46 = null;
    boolean b47 = arraylist_card44.add(card46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str54 = hashmap_serializable_str49.entrySet();
    boolean b55 = arraylist_card44.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str57 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b59 = hashmap_serializable_str57.equals((java.lang.Object)1.0d);
    int i60 = hashmap_serializable_str57.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str57.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str57.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str63 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b64 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    boolean b65 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str62);
    boolean b66 = linkedlist_abstractcollection_card39.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    java.lang.Object[] obj_array67 = arraylist_iterable_entry_serializable_str63.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str69 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str70 = arraylist_entry_serializable_str69.stream();
    java.lang.Object[] obj_array71 = arraylist_entry_serializable_str69.toArray();
    // The following exception was thrown during execution in test generation
    try {
    arraylist_iterable_entry_serializable_str63.add(100, (java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str69);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array71);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i46 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    java.util.RandomAccess[] randomAccess_array56 = new java.util.RandomAccess[] { arraylist_card48, arraylist_card53 };
    java.util.RandomAccess[] randomAccess_array57 = arraylist_card43.toArray(randomAccess_array56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName58);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    int i64 = hashmap_serializable_str61.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str65 = hashmap_serializable_str61.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    hashmap_serializable_str61.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str67);
    java.util.HashMap[] hashMap_array72 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array72;
    hashmap_serializable_str_array73[0] = hashmap_serializable_str67;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = arraylist_card43.toArray(hashmap_serializable_str_array73);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card77 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b78 = arraylist_abstractcollection_card77.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card77);
    java.lang.Object[] obj_array80 = linkedlist_abstractcollection_card79.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card79);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card82 = linkedlist_abstractcollection_card81.descendingIterator();
    java.lang.Object obj83 = linkedlist_abstractcollection_card81.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card81.removeFirst();
    linkedlist_abstractcollection_card39.push(abstractcollection_card84);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card86 = linkedlist_abstractcollection_card39.descendingIterator();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card88 = linkedlist_abstractcollection_card39.listIterator((int)(short)1);
    linkedlist_abstractcollection_card39.clear();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card91 = linkedlist_abstractcollection_card39.listIterator((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card88);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str2 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b3 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"");
    boolean b4 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Comparable<java.lang.String> comparable_str6 = arraylist_comparable_str2.remove((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    boolean b57 = linkedlist_abstractcollection_card39.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = null;
    linkedlist_abstractcollection_card39.push(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (short)1;

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = 0;

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)(short)0, (float)' ');
    java.lang.Object obj3 = hashmap_serializable_str2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b8 = hashmap_serializable_str6.equals((java.lang.Object)1.0d);
    int i9 = hashmap_serializable_str6.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str10 = hashmap_serializable_str6.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str11 = hashmap_serializable_str6.entrySet();
    boolean b12 = arraylist_card1.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str11);
    arraylist_card1.clear();
    java.lang.Object obj14 = arraylist_card1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str1 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>(0);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.io.Serializable,java.lang.String> entry_serializable_str2 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    boolean b57 = linkedlist_abstractcollection_card39.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card39.getFirst();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card59 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = 61;

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card3 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str5 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b7 = hashmap_serializable_str5.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str5);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b12 = hashmap_serializable_str10.equals((java.lang.Object)1.0d);
    int i13 = hashmap_serializable_str10.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str14 = hashmap_serializable_str10.entrySet();
    boolean b15 = hashmap_serializable_str8.equals((java.lang.Object)set_entry_serializable_str14);
    boolean b16 = arraylist_abstractcollection_card3.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str14);
    java.lang.Object[] obj_array17 = arraylist_abstractcollection_card3.toArray();
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    boolean b23 = arraylist_card19.equals((java.lang.Object)(-1.0f));
    boolean b24 = arraylist_abstractcollection_card3.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card25 = arraylist_abstractcollection_card3.spliterator();
    boolean b26 = arraylist_abstractcollection_card1.remove((java.lang.Object)spliterator_abstractcollection_card25);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable28 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i33 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    int i42 = arraylist_card40.size();
    java.util.RandomAccess[] randomAccess_array43 = new java.util.RandomAccess[] { arraylist_card35, arraylist_card40 };
    java.util.RandomAccess[] randomAccess_array44 = arraylist_card30.toArray(randomAccess_array43);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName45);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str48 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b50 = hashmap_serializable_str48.equals((java.lang.Object)1.0d);
    int i51 = hashmap_serializable_str48.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str52 = hashmap_serializable_str48.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str54 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b56 = hashmap_serializable_str54.equals((java.lang.Object)1.0d);
    hashmap_serializable_str48.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str54);
    java.util.HashMap[] hashMap_array59 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array60 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array59;
    hashmap_serializable_str_array60[0] = hashmap_serializable_str54;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array63 = arraylist_card30.toArray(hashmap_serializable_str_array60);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card64 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b65 = arraylist_abstractcollection_card64.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card30);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card66 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card64);
    java.lang.Object[] obj_array67 = linkedlist_abstractcollection_card66.toArray();
    boolean b68 = hashmap_type_cloneable28.containsKey((java.lang.Object)linkedlist_abstractcollection_card66);
    boolean b69 = arraylist_abstractcollection_card1.addAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card66);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card71 = linkedlist_abstractcollection_card66.listIterator((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    int i40 = linkedlist_abstractcollection_card39.size();
    int i41 = linkedlist_abstractcollection_card39.size();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = null;
    boolean b43 = linkedlist_abstractcollection_card39.offerFirst(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.retainAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peekLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str0 = new java.util.HashMap<java.io.Serializable,java.lang.String>();
    boolean b1 = hashmap_serializable_str0.isEmpty();
    boolean b2 = hashmap_serializable_str0.isEmpty();
    java.util.Collection<java.lang.String> collection_str3 = hashmap_serializable_str0.values();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_str3);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.lang.Object> listiterator_obj2 = linkedlist_obj0.listIterator((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card card45 = null;
    boolean b46 = arraylist_card43.add(card45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    int i69 = hashmap_serializable_str66.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str66.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str72 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b74 = hashmap_serializable_str72.equals((java.lang.Object)1.0d);
    hashmap_serializable_str66.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str72);
    java.util.HashMap[] hashMap_array77 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array77;
    hashmap_serializable_str_array78[0] = hashmap_serializable_str72;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array81 = arraylist_card48.toArray(hashmap_serializable_str_array78);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card82 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b83 = arraylist_abstractcollection_card82.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card48);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card84 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card82);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card84.pollFirst();
    boolean b86 = arraylist_card43.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card84);
    linkedlist_abstractcollection_card39.addFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card88 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array89 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card90 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b91 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card90, card_array89);
    org.cs362.dominion.Card.CardName cardName92 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i93 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card90, cardName92);
    java.util.List<org.cs362.dominion.Card> list_card94 = org.cs362.dominion.Card.createCards();
    boolean b95 = arraylist_card90.contains((java.lang.Object)list_card94);
    boolean b96 = linkedlist_abstractcollection_card39.offerFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card90);
    boolean b97 = arraylist_entry_serializable_str0.contains((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str98 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    org.junit.Assert.assertTrue("'" + cardName92 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName92.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    java.lang.String str3 = hashmap_serializable_str1.get((java.lang.Object)(byte)10);
    java.lang.Object obj4 = null;
    boolean b5 = hashmap_serializable_str1.equals(obj4);
    boolean b6 = hashmap_serializable_str1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "[]", "[]", "", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", "" };
    java.util.ArrayList<java.lang.String> arraylist_str6 = new java.util.ArrayList<java.lang.String>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str6, str_array5);
    java.util.Iterator<java.lang.String> iterator_str8 = arraylist_str6.iterator();
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    java.util.RandomAccess[] randomAccess_array23 = new java.util.RandomAccess[] { arraylist_card15, arraylist_card20 };
    java.util.RandomAccess[] randomAccess_array24 = arraylist_card10.toArray(randomAccess_array23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName25);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    int i31 = hashmap_serializable_str28.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str32 = hashmap_serializable_str28.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    hashmap_serializable_str28.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str34);
    java.util.HashMap[] hashMap_array39 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array39;
    hashmap_serializable_str_array40[0] = hashmap_serializable_str34;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = arraylist_card10.toArray(hashmap_serializable_str_array40);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card44 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b45 = arraylist_abstractcollection_card44.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card10);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card46 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card44);
    java.lang.Object[] obj_array47 = linkedlist_abstractcollection_card46.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card48 = linkedlist_abstractcollection_card46.getLast();
    int i49 = arraylist_str6.indexOf((java.lang.Object)linkedlist_abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b8 = hashmap_serializable_str6.equals((java.lang.Object)1.0d);
    int i9 = hashmap_serializable_str6.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str10 = hashmap_serializable_str6.entrySet();
    boolean b11 = hashmap_serializable_str4.equals((java.lang.Object)set_entry_serializable_str10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str13 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b15 = hashmap_serializable_str13.equals((java.lang.Object)1.0d);
    java.lang.String str16 = hashmap_serializable_str4.get((java.lang.Object)b15);
    hashmap_serializable_str4.clear();
    hashmap_serializable_str4.clear();
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    java.lang.String str25 = hashmap_serializable_str4.getOrDefault((java.lang.Object)arraylist_card20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    hashmap_serializable_str4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str25.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card card46 = null;
    boolean b47 = arraylist_card44.add(card46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str54 = hashmap_serializable_str49.entrySet();
    boolean b55 = arraylist_card44.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str57 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b59 = hashmap_serializable_str57.equals((java.lang.Object)1.0d);
    int i60 = hashmap_serializable_str57.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str57.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str57.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str63 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b64 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    boolean b65 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str62);
    boolean b66 = linkedlist_abstractcollection_card39.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str67 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str68 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str69 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str70 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    java.util.List[] list_array72 = new java.util.List[ 4 ];
    @SuppressWarnings("unchecked")
    java.util.List<java.lang.Comparable<java.lang.String>>[] list_comparable_str_array73 = (java.util.List<java.lang.Comparable<java.lang.String>>[])list_array72;
    list_comparable_str_array73[0] = arraylist_comparable_str67;
    list_comparable_str_array73[1] = arraylist_comparable_str68;
    list_comparable_str_array73[2] = arraylist_comparable_str69;
    list_comparable_str_array73[3] = arraylist_comparable_str70;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.Comparable<java.lang.String>>[] list_comparable_str_array82 = arraylist_iterable_entry_serializable_str63.toArray(list_comparable_str_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_comparable_str_array73);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b4 = arraylist_comparable_str3.add((java.lang.Comparable<java.lang.String>)"[]");
    boolean b5 = arraylist_comparable_str3.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b6 = arraylist_comparable_str3.add((java.lang.Comparable<java.lang.String>)"[]");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Comparable<java.lang.String> comparable_str9 = arraylist_comparable_str3.set((int)(short)100, (java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.Card.CardName cardName43 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i44 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName43);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    int i53 = arraylist_card51.size();
    java.util.RandomAccess[] randomAccess_array54 = new java.util.RandomAccess[] { arraylist_card46, arraylist_card51 };
    java.util.RandomAccess[] randomAccess_array55 = arraylist_card41.toArray(randomAccess_array54);
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName56);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str59 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b61 = hashmap_serializable_str59.equals((java.lang.Object)1.0d);
    int i62 = hashmap_serializable_str59.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str63 = hashmap_serializable_str59.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str65 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b67 = hashmap_serializable_str65.equals((java.lang.Object)1.0d);
    hashmap_serializable_str59.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str65);
    java.util.HashMap[] hashMap_array70 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array71 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array70;
    hashmap_serializable_str_array71[0] = hashmap_serializable_str65;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = arraylist_card41.toArray(hashmap_serializable_str_array71);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card75 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b76 = arraylist_abstractcollection_card75.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card41);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card77 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card75);
    java.lang.Object[] obj_array78 = linkedlist_abstractcollection_card77.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card77);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card80 = linkedlist_abstractcollection_card79.remove();
    org.cs362.dominion.Card[] card_array81 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card82 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card82, card_array81);
    org.cs362.dominion.Card.CardName cardName84 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i85 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card82, cardName84);
    org.cs362.dominion.Card[] card_array86 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card87 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b88 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card87, card_array86);
    org.cs362.dominion.Card.CardName cardName89 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i90 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card87, cardName89);
    org.cs362.dominion.Card[] card_array91 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card92 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b93 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92, card_array91);
    int i94 = arraylist_card92.size();
    java.util.RandomAccess[] randomAccess_array95 = new java.util.RandomAccess[] { arraylist_card87, arraylist_card92 };
    java.util.RandomAccess[] randomAccess_array96 = arraylist_card82.toArray(randomAccess_array95);
    boolean b97 = linkedlist_abstractcollection_card79.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card82);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card98 = linkedlist_abstractcollection_card79.getFirst();
    boolean b99 = linkedlist_abstractcollection_card37.offerFirst(abstractcollection_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName43.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName84.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + cardName89 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName89.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str41 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b43 = hashmap_serializable_str41.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str41);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str46 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b48 = hashmap_serializable_str46.equals((java.lang.Object)1.0d);
    int i49 = hashmap_serializable_str46.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str50 = hashmap_serializable_str46.entrySet();
    boolean b51 = hashmap_serializable_str44.equals((java.lang.Object)set_entry_serializable_str50);
    boolean b52 = arraylist_abstractcollection_card39.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str50);
    java.lang.Object[] obj_array53 = arraylist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i58 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName57);
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.createCards();
    boolean b60 = arraylist_card55.contains((java.lang.Object)list_card59);
    org.cs362.dominion.Card.Type type61 = null;
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type61);
    int i63 = arraylist_abstractcollection_card39.lastIndexOf((java.lang.Object)list_card59);
    boolean b64 = linkedlist_abstractcollection_card37.contains((java.lang.Object)list_card59);
    java.util.Random random65 = org.cs362.dominion.Randomness.random;
    org.cs362.dominion.Randomness.random = random65;
    org.cs362.dominion.Randomness.random = random65;
    boolean b68 = linkedlist_abstractcollection_card37.remove((java.lang.Object)random65);
    linkedlist_abstractcollection_card37.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(random65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str54 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b56 = hashmap_serializable_str54.equals((java.lang.Object)1.0d);
    int i57 = hashmap_serializable_str54.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str58 = hashmap_serializable_str54.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str59 = hashmap_serializable_str54.entrySet();
    boolean b60 = linkedlist_abstractcollection_card45.removeLastOccurrence((java.lang.Object)set_entry_serializable_str59);
    linkedlist_abstractcollection_card45.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    hashmap_serializable_str1.clear();
    java.lang.String str21 = hashmap_serializable_str1.remove((java.lang.Object)10.0f);
    hashmap_serializable_str1.clear();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i27 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    int i36 = arraylist_card34.size();
    java.util.RandomAccess[] randomAccess_array37 = new java.util.RandomAccess[] { arraylist_card29, arraylist_card34 };
    java.util.RandomAccess[] randomAccess_array38 = arraylist_card24.toArray(randomAccess_array37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName39);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b44 = hashmap_serializable_str42.equals((java.lang.Object)1.0d);
    int i45 = hashmap_serializable_str42.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str46 = hashmap_serializable_str42.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str48 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b50 = hashmap_serializable_str48.equals((java.lang.Object)1.0d);
    hashmap_serializable_str42.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str48);
    java.util.HashMap[] hashMap_array53 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array53;
    hashmap_serializable_str_array54[0] = hashmap_serializable_str48;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array57 = arraylist_card24.toArray(hashmap_serializable_str_array54);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card58 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b59 = arraylist_abstractcollection_card58.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card24);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card60 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card58);
    java.lang.Object[] obj_array61 = linkedlist_abstractcollection_card60.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card62 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card60);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card63 = linkedlist_abstractcollection_card62.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card64 = linkedlist_abstractcollection_card62.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card65 = linkedlist_abstractcollection_card62.listIterator();
    java.lang.String str67 = hashmap_serializable_str1.replace((java.io.Serializable)linkedlist_abstractcollection_card62, "{}");
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card68 = linkedlist_abstractcollection_card62.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card68);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.spliterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card39.element();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card43);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.lang.String[] str_array2 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str3 = new java.util.ArrayList<java.lang.String>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str3, str_array2);
    java.lang.Object obj5 = arraylist_str3.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable6 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card9 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card10 = arraylist_abstractcollection_card9.spliterator();
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.createCards();
    boolean b18 = arraylist_card13.contains((java.lang.Object)list_card17);
    arraylist_abstractcollection_card9.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    int i33 = arraylist_card31.size();
    java.util.RandomAccess[] randomAccess_array34 = new java.util.RandomAccess[] { arraylist_card26, arraylist_card31 };
    java.util.RandomAccess[] randomAccess_array35 = arraylist_card21.toArray(randomAccess_array34);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName36);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    int i42 = hashmap_serializable_str39.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str43 = hashmap_serializable_str39.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str45 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b47 = hashmap_serializable_str45.equals((java.lang.Object)1.0d);
    hashmap_serializable_str39.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str45);
    java.util.HashMap[] hashMap_array50 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array50;
    hashmap_serializable_str_array51[0] = hashmap_serializable_str45;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = arraylist_card21.toArray(hashmap_serializable_str_array51);
    boolean b55 = hashmap_type_cloneable6.replace(type7, (java.lang.Cloneable)arraylist_card13, (java.lang.Cloneable)hashmap_serializable_str_array54);
    java.util.Set<org.cs362.dominion.Card.Type> set_type56 = hashmap_type_cloneable6.keySet();
    boolean b57 = arraylist_str3.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type58 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    boolean b59 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.retainAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    int i60 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.size();
    java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> entry_iterable_entry_serializable_str_spliterator_card62 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> entry_iterable_entry_serializable_str_spliterator_card63 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.set(0, entry_iterable_entry_serializable_str_spliterator_card62);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card card12 = null;
    boolean b13 = arraylist_card5.add(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.ensureCapacity(2);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_entry_iterable_entry_serializable_str_spliterator_card4 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.listIterator((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card card46 = null;
    boolean b47 = arraylist_card44.add(card46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str54 = hashmap_serializable_str49.entrySet();
    boolean b55 = arraylist_card44.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str57 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b59 = hashmap_serializable_str57.equals((java.lang.Object)1.0d);
    int i60 = hashmap_serializable_str57.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str57.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str57.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str63 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b64 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    boolean b65 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str62);
    boolean b66 = linkedlist_abstractcollection_card39.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    java.lang.Object[] obj_array67 = arraylist_iterable_entry_serializable_str63.toArray();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>> iterable_entry_serializable_str69 = arraylist_iterable_entry_serializable_str63.get(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i92 = gameState90.play();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    gameState90.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    int i8 = arraylist_card6.size();
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card6);
    boolean b10 = arraylist_card1.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card0 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    linkedlist_abstractcollection_card0.clear();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card2 = linkedlist_abstractcollection_card0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card2);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState90.cards;
    boolean b96 = gameState90.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i97 = gameState90.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i97);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable43 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str44 = hashmap_type_cloneable43.toString();
    hashmap_type_cloneable1.putAll((java.util.Map<org.cs362.dominion.Card.Type,java.lang.Cloneable>)hashmap_type_cloneable43);
    boolean b46 = hashmap_type_cloneable43.isEmpty();
    int i47 = hashmap_type_cloneable43.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "{}"+ "'", str44.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(byte)100);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card41 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card41.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card41.peekFirst();
    java.lang.Cloneable cloneable44 = hashmap_type_cloneable1.get((java.lang.Object)abstractcollection_card43);
    org.cs362.dominion.Card.Type type45 = org.cs362.dominion.Card.Type.VICTORY;
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    player48.playTreasureCard();
    player48.playKingdomCard();
    java.lang.Cloneable cloneable51 = hashmap_type_cloneable1.put(type45, (java.lang.Cloneable)player48);
    player48.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type45.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable51);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card86 = null;
    boolean b87 = linkedlist_abstractcollection_card39.offerLast(abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>();
    int i3 = arraylist_entry_serializable_str0.indexOf((java.lang.Object)hashmap_serializable_str2);
    java.util.Map.Entry<java.io.Serializable,java.lang.String> entry_serializable_str5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.io.Serializable,java.lang.String> entry_serializable_str6 = arraylist_entry_serializable_str0.set((int)(short)100, entry_serializable_str5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.List<org.cs362.dominion.Player> list_player94 = gameState90.players;
    gameState90.initializeGame();
    gameState90.initializeGame();
    gameState90.initializeGame();
    gameState90.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player99 = gameState90.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player99);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    org.cs362.dominion.Randomness.reset((long)(short)0);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", "hi!" };
    java.util.ArrayList<java.lang.String> arraylist_str7 = new java.util.ArrayList<java.lang.String>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str7, str_array6);
    boolean b9 = arraylist_entry_serializable_str0.containsAll((java.util.Collection<java.lang.String>)arraylist_str7);
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str11 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str12 = arraylist_entry_serializable_str11.stream();
    arraylist_entry_serializable_str11.clear();
    java.util.Iterator<java.util.Map.Entry<java.io.Serializable,java.lang.String>> iterator_entry_serializable_str14 = arraylist_entry_serializable_str11.iterator();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = arraylist_entry_serializable_str0.addAll((int)(byte)1, (java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str11);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_entry_serializable_str14);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj1 = linkedlist_obj0.element();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card81 = linkedlist_abstractcollection_card37.element();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card81);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    org.cs362.dominion.Randomness.reset((long)(byte)0);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b8 = hashmap_serializable_str6.equals((java.lang.Object)1.0d);
    int i9 = hashmap_serializable_str6.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str10 = hashmap_serializable_str6.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str11 = hashmap_serializable_str6.entrySet();
    boolean b12 = arraylist_card1.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str11);
    boolean b13 = arraylist_card1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card41 = linkedlist_abstractcollection_card39.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card41);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    org.cs362.dominion.Card card4 = null;
    player2.discard(card4);
    org.cs362.dominion.Card card6 = null;
    player2.discard(card6);
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.createCards();
    boolean b47 = arraylist_card42.contains((java.lang.Object)list_card46);
    int i49 = arraylist_card42.indexOf((java.lang.Object)(byte)10);
    java.lang.Object obj50 = arraylist_card42.clone();
    linkedlist_abstractcollection_card39.push((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.Collection<java.lang.String> collection_str52 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = arraylist_card42.retainAll(collection_str52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.iterator();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card39.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card44);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.lang.String[] str_array2 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str3 = new java.util.ArrayList<java.lang.String>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str3, str_array2);
    java.lang.Object obj5 = arraylist_str3.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable6 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card9 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card10 = arraylist_abstractcollection_card9.spliterator();
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.createCards();
    boolean b18 = arraylist_card13.contains((java.lang.Object)list_card17);
    arraylist_abstractcollection_card9.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    int i33 = arraylist_card31.size();
    java.util.RandomAccess[] randomAccess_array34 = new java.util.RandomAccess[] { arraylist_card26, arraylist_card31 };
    java.util.RandomAccess[] randomAccess_array35 = arraylist_card21.toArray(randomAccess_array34);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName36);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    int i42 = hashmap_serializable_str39.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str43 = hashmap_serializable_str39.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str45 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b47 = hashmap_serializable_str45.equals((java.lang.Object)1.0d);
    hashmap_serializable_str39.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str45);
    java.util.HashMap[] hashMap_array50 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array50;
    hashmap_serializable_str_array51[0] = hashmap_serializable_str45;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = arraylist_card21.toArray(hashmap_serializable_str_array51);
    boolean b55 = hashmap_type_cloneable6.replace(type7, (java.lang.Cloneable)arraylist_card13, (java.lang.Cloneable)hashmap_serializable_str_array54);
    java.util.Set<org.cs362.dominion.Card.Type> set_type56 = hashmap_type_cloneable6.keySet();
    boolean b57 = arraylist_str3.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type58 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    boolean b59 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.retainAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    int i60 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.size();
    java.lang.String str61 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]"+ "'", str61.equals("[]"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    org.cs362.dominion.Card.CardName cardName1 = org.cs362.dominion.Card.CardName.Village;
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card2 = hashmap_iterable_entry_serializable_str_spliterator_card0.remove((java.lang.Object)cardName1);
    boolean b3 = hashmap_iterable_entry_serializable_str_spliterator_card0.isEmpty();
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName1.equals(org.cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState90.embargo;
    java.util.List<org.cs362.dominion.Player> list_player96 = gameState90.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player96);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    hashmap_player_i5.clear();
    hashmap_player_i5.clear();
    int i8 = hashmap_player_i5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    org.cs362.dominion.Randomness.reset((long)(short)1);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    hashmap_serializable_str1.clear();
    java.lang.String str21 = hashmap_serializable_str1.remove((java.lang.Object)10.0f);
    hashmap_serializable_str1.clear();
    hashmap_serializable_str1.clear();
    java.io.Serializable serializable24 = null;
    java.lang.String str26 = hashmap_serializable_str1.replace(serializable24, "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card card46 = null;
    boolean b47 = arraylist_card44.add(card46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str54 = hashmap_serializable_str49.entrySet();
    boolean b55 = arraylist_card44.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str57 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b59 = hashmap_serializable_str57.equals((java.lang.Object)1.0d);
    int i60 = hashmap_serializable_str57.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str57.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str57.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str63 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b64 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    boolean b65 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str62);
    boolean b66 = linkedlist_abstractcollection_card39.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>> iterable_entry_serializable_str67 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    java.lang.String[] str_array73 = new java.lang.String[] { "[]", "[]", "", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", "" };
    java.util.ArrayList<java.lang.String> arraylist_str74 = new java.util.ArrayList<java.lang.String>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str74, str_array73);
    java.util.Iterator<java.lang.String> iterator_str76 = arraylist_str74.iterator();
    int i77 = arraylist_iterable_entry_serializable_str63.indexOf((java.lang.Object)iterator_str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterable_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == (-1));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str2 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    int i3 = hashmap_randomAccess_array_set_entry_serializable_str2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.createCards();
    boolean b47 = arraylist_card42.contains((java.lang.Object)list_card46);
    int i49 = arraylist_card42.indexOf((java.lang.Object)(byte)10);
    java.lang.Object obj50 = arraylist_card42.clone();
    linkedlist_abstractcollection_card39.push((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card58, cardName60);
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    int i65 = arraylist_card63.size();
    java.util.RandomAccess[] randomAccess_array66 = new java.util.RandomAccess[] { arraylist_card58, arraylist_card63 };
    java.util.RandomAccess[] randomAccess_array67 = arraylist_card53.toArray(randomAccess_array66);
    arraylist_card53.trimToSize();
    boolean b69 = linkedlist_abstractcollection_card39.offerFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card53);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card70 = linkedlist_abstractcollection_card39.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card70);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.Card card4 = null;
    boolean b5 = arraylist_card1.add(card4);
    org.cs362.dominion.Card card7 = arraylist_card1.get((int)(byte)0);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.lang.Object[] obj_array46 = linkedlist_abstractcollection_card45.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card47 = linkedlist_abstractcollection_card45.getLast();
    boolean b48 = arraylist_card1.addAll((java.util.Collection<org.cs362.dominion.Card>)abstractcollection_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object[] obj_array2 = arraylist_entry_serializable_str0.toArray();
    arraylist_entry_serializable_str0.trimToSize();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.io.Serializable,java.lang.String> entry_serializable_str5 = arraylist_entry_serializable_str0.remove((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i1 = new java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer>(1);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card53 = linkedlist_abstractcollection_card45.remove();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card53);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    org.cs362.dominion.Card.Type type96 = org.cs362.dominion.Card.Type.ACTION;
    java.lang.Integer i97 = hashmap_player_i95.get((java.lang.Object)type96);
    java.util.Set<org.cs362.dominion.Player> set_player98 = hashmap_player_i95.keySet();
    java.util.Collection<java.lang.Integer> collection_i99 = hashmap_player_i95.values();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    org.junit.Assert.assertTrue("'" + type96 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type96.equals(org.cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_player98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_i99);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness2 = new org.cs362.dominion.Randomness();
    int i3 = randomness2.main();
    int i4 = arraylist_abstractcollection_card1.lastIndexOf((java.lang.Object)i3);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card5 = arraylist_abstractcollection_card1.stream();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card7 = arraylist_abstractcollection_card1.remove((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card5);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable0 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type1 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card3 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card4 = arraylist_abstractcollection_card3.spliterator();
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i10 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.createCards();
    boolean b12 = arraylist_card7.contains((java.lang.Object)list_card11);
    arraylist_abstractcollection_card3.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card7);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    int i27 = arraylist_card25.size();
    java.util.RandomAccess[] randomAccess_array28 = new java.util.RandomAccess[] { arraylist_card20, arraylist_card25 };
    java.util.RandomAccess[] randomAccess_array29 = arraylist_card15.toArray(randomAccess_array28);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName30);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    int i36 = hashmap_serializable_str33.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str37 = hashmap_serializable_str33.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    hashmap_serializable_str33.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str39);
    java.util.HashMap[] hashMap_array44 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array45 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array44;
    hashmap_serializable_str_array45[0] = hashmap_serializable_str39;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array48 = arraylist_card15.toArray(hashmap_serializable_str_array45);
    boolean b49 = hashmap_type_cloneable0.replace(type1, (java.lang.Cloneable)arraylist_card7, (java.lang.Cloneable)hashmap_serializable_str_array48);
    java.util.Set<org.cs362.dominion.Card.Type> set_type50 = hashmap_type_cloneable0.keySet();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable52 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str53 = hashmap_type_cloneable52.toString();
    hashmap_type_cloneable0.putAll((java.util.Map<org.cs362.dominion.Card.Type,java.lang.Cloneable>)hashmap_type_cloneable52);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str56 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b58 = hashmap_serializable_str56.equals((java.lang.Object)1.0d);
    int i59 = hashmap_serializable_str56.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str60 = hashmap_serializable_str56.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str56.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    hashmap_serializable_str56.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str63);
    boolean b74 = hashmap_serializable_str56.isEmpty();
    java.lang.Cloneable cloneable75 = hashmap_type_cloneable52.get((java.lang.Object)hashmap_serializable_str56);
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type1.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "{}"+ "'", str53.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable75);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i96 = gameState90.getWinners();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i97 = gameState90.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str98 = gameState90.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(hashmap_card_i97);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.lang.Object[] obj_array42 = linkedlist_abstractcollection_card39.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card39.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.ensureCapacity(2);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Copper;
    int i4 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.lastIndexOf((java.lang.Object)cardName3);
    java.lang.Object[] obj_array5 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.toArray();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> entry_iterable_entry_serializable_str_spliterator_card6 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_entry_iterable_entry_serializable_str_spliterator_card0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Copper + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card card46 = null;
    boolean b47 = arraylist_card44.add(card46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str54 = hashmap_serializable_str49.entrySet();
    boolean b55 = arraylist_card44.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str57 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b59 = hashmap_serializable_str57.equals((java.lang.Object)1.0d);
    int i60 = hashmap_serializable_str57.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str61 = hashmap_serializable_str57.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str57.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str63 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b64 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str54);
    boolean b65 = arraylist_iterable_entry_serializable_str63.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str62);
    boolean b66 = linkedlist_abstractcollection_card39.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str63);
    arraylist_iterable_entry_serializable_str63.clear();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>> iterable_entry_serializable_str69 = arraylist_iterable_entry_serializable_str63.remove((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str41 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b43 = hashmap_serializable_str41.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str41);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str46 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b48 = hashmap_serializable_str46.equals((java.lang.Object)1.0d);
    int i49 = hashmap_serializable_str46.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str50 = hashmap_serializable_str46.entrySet();
    boolean b51 = hashmap_serializable_str44.equals((java.lang.Object)set_entry_serializable_str50);
    boolean b52 = arraylist_abstractcollection_card39.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str50);
    java.lang.Object[] obj_array53 = arraylist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i58 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName57);
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.createCards();
    boolean b60 = arraylist_card55.contains((java.lang.Object)list_card59);
    org.cs362.dominion.Card.Type type61 = null;
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type61);
    int i63 = arraylist_abstractcollection_card39.lastIndexOf((java.lang.Object)list_card59);
    boolean b64 = linkedlist_abstractcollection_card37.contains((java.lang.Object)list_card59);
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    int i68 = arraylist_card66.size();
    boolean b70 = arraylist_card66.equals((java.lang.Object)(-1.0f));
    int i71 = linkedlist_abstractcollection_card37.lastIndexOf((java.lang.Object)arraylist_card66);
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    int i75 = arraylist_card73.size();
    org.cs362.dominion.Card card76 = null;
    boolean b77 = arraylist_card73.add(card76);
    org.cs362.dominion.Card card79 = arraylist_card73.get((int)(byte)0);
    boolean b80 = arraylist_card66.retainAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73);
    org.cs362.dominion.Card.Type type81 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<org.cs362.dominion.Card> list_card82 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card73, type81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    boolean b16 = arraylist_abstractcollection_card1.isEmpty();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card17 = arraylist_abstractcollection_card1.listIterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card19 = arraylist_abstractcollection_card1.get(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card17);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.lang.String str91 = gameState90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    org.cs362.dominion.Randomness.reset(10L);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    java.lang.String[] str_array1 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array1);
    java.lang.Object obj4 = arraylist_str2.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    boolean b54 = hashmap_type_cloneable5.replace(type6, (java.lang.Cloneable)arraylist_card12, (java.lang.Cloneable)hashmap_serializable_str_array53);
    java.util.Set<org.cs362.dominion.Card.Type> set_type55 = hashmap_type_cloneable5.keySet();
    boolean b56 = arraylist_str2.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type57 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    arraylist_comparable_type57.ensureCapacity(61);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card60 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.Set<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> set_entry_iterable_entry_serializable_str_spliterator_card61 = hashmap_iterable_entry_serializable_str_spliterator_card60.entrySet();
    boolean b62 = arraylist_comparable_type57.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>)set_entry_iterable_entry_serializable_str_spliterator_card61);
    java.util.stream.Stream<java.lang.Comparable<org.cs362.dominion.Card.Type>> stream_comparable_type63 = arraylist_comparable_type57.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_iterable_entry_serializable_str_spliterator_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_comparable_type63);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card55 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card56 = arraylist_abstractcollection_card55.spliterator();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.createCards();
    boolean b64 = arraylist_card59.contains((java.lang.Object)list_card63);
    arraylist_abstractcollection_card55.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card59);
    arraylist_abstractcollection_card55.clear();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    int i70 = arraylist_card68.size();
    boolean b71 = arraylist_abstractcollection_card55.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card72 = linkedlist_abstractcollection_card45.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    int i77 = arraylist_card75.size();
    org.cs362.dominion.GameState gameState78 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card75);
    linkedlist_abstractcollection_card45.add(3, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card75);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card80 = linkedlist_abstractcollection_card45.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card80);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(3, (float)'#');
    java.lang.String str3 = hashmap_type_cloneable2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{}"+ "'", str3.equals("{}"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.iterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    linkedlist_abstractcollection_card39.addFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card63 = linkedlist_abstractcollection_card39.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card63);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = gameState4.gameBoard;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState4.embargo;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str2 = hashmap_type_cloneable1.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable4 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b6 = hashmap_type_cloneable4.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.lang.Cloneable cloneable43 = hashmap_type_cloneable4.replace(type7, (java.lang.Cloneable)hashmap_serializable_str_array39);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.createCards();
    boolean b50 = arraylist_card45.contains((java.lang.Object)list_card49);
    int i52 = arraylist_card45.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable53 = hashmap_type_cloneable1.put(type7, (java.lang.Cloneable)arraylist_card45);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card55 = arraylist_card45.get((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "{}"+ "'", str2.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable53);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str41 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b43 = hashmap_serializable_str41.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str41);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str46 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b48 = hashmap_serializable_str46.equals((java.lang.Object)1.0d);
    int i49 = hashmap_serializable_str46.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str50 = hashmap_serializable_str46.entrySet();
    boolean b51 = hashmap_serializable_str44.equals((java.lang.Object)set_entry_serializable_str50);
    boolean b52 = arraylist_abstractcollection_card39.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str50);
    java.lang.Object[] obj_array53 = arraylist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i58 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName57);
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.createCards();
    boolean b60 = arraylist_card55.contains((java.lang.Object)list_card59);
    org.cs362.dominion.Card.Type type61 = null;
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type61);
    int i63 = arraylist_abstractcollection_card39.lastIndexOf((java.lang.Object)list_card59);
    boolean b64 = linkedlist_abstractcollection_card37.contains((java.lang.Object)list_card59);
    java.util.Random random65 = org.cs362.dominion.Randomness.random;
    org.cs362.dominion.Randomness.random = random65;
    org.cs362.dominion.Randomness.random = random65;
    boolean b68 = linkedlist_abstractcollection_card37.remove((java.lang.Object)random65);
    org.cs362.dominion.Randomness.random = random65;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(random65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str2 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b3 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"{}");
    boolean b4 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"");
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b9 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b10 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b11 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b12 = arraylist_comparable_str2.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str8);
    boolean b14 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str15 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i16 = arraylist_entry_serializable_str15.size();
    int i17 = arraylist_entry_serializable_str15.size();
    boolean b18 = arraylist_comparable_str8.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str15);
    java.util.Iterator<java.lang.Comparable<java.lang.String>> iterator_comparable_str19 = arraylist_comparable_str8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_comparable_str19);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.String[] str_array16 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str17 = new java.util.ArrayList<java.lang.String>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str17, str_array16);
    java.lang.Object obj19 = arraylist_str17.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable20 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type21 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card23 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card24 = arraylist_abstractcollection_card23.spliterator();
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i30 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.createCards();
    boolean b32 = arraylist_card27.contains((java.lang.Object)list_card31);
    arraylist_abstractcollection_card23.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card27);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    int i47 = arraylist_card45.size();
    java.util.RandomAccess[] randomAccess_array48 = new java.util.RandomAccess[] { arraylist_card40, arraylist_card45 };
    java.util.RandomAccess[] randomAccess_array49 = arraylist_card35.toArray(randomAccess_array48);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card51 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName50);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str53 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b55 = hashmap_serializable_str53.equals((java.lang.Object)1.0d);
    int i56 = hashmap_serializable_str53.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str57 = hashmap_serializable_str53.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str59 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b61 = hashmap_serializable_str59.equals((java.lang.Object)1.0d);
    hashmap_serializable_str53.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str59);
    java.util.HashMap[] hashMap_array64 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array65 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array64;
    hashmap_serializable_str_array65[0] = hashmap_serializable_str59;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array68 = arraylist_card35.toArray(hashmap_serializable_str_array65);
    boolean b69 = hashmap_type_cloneable20.replace(type21, (java.lang.Cloneable)arraylist_card27, (java.lang.Cloneable)hashmap_serializable_str_array68);
    java.util.Set<org.cs362.dominion.Card.Type> set_type70 = hashmap_type_cloneable20.keySet();
    boolean b71 = arraylist_str17.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type70);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type72 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type70);
    boolean b73 = arraylist_abstractcollection_card1.retainAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type21.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array49);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (byte)0;

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.stream.Stream<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> stream_entry_iterable_entry_serializable_str_spliterator_card1 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.stream();
    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card2 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    arraylist_entry_iterable_entry_serializable_str_spliterator_card2.ensureCapacity(2);
    java.util.ListIterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_entry_iterable_entry_serializable_str_spliterator_card5 = arraylist_entry_iterable_entry_serializable_str_spliterator_card2.listIterator();
    java.util.Iterator[] iterator_array7 = new java.util.Iterator[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.Iterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>[] iterator_entry_iterable_entry_serializable_str_spliterator_card_array8 = (java.util.Iterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>[])iterator_array7;
    iterator_entry_iterable_entry_serializable_str_spliterator_card_array8[0] = listiterator_entry_iterable_entry_serializable_str_spliterator_card5;
    java.util.Iterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>[] iterator_entry_iterable_entry_serializable_str_spliterator_card_array11 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.toArray(iterator_entry_iterable_entry_serializable_str_spliterator_card_array8);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> list_entry_iterable_entry_serializable_str_spliterator_card14 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.subList((int)(byte)10, (int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_iterable_entry_serializable_str_spliterator_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_entry_iterable_entry_serializable_str_spliterator_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_entry_iterable_entry_serializable_str_spliterator_card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_entry_iterable_entry_serializable_str_spliterator_card_array11);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    boolean b16 = arraylist_abstractcollection_card1.isEmpty();
    java.lang.String[] str_array18 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str19 = new java.util.ArrayList<java.lang.String>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str19, str_array18);
    java.lang.Object obj21 = arraylist_str19.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable22 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card25 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card26 = arraylist_abstractcollection_card25.spliterator();
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    java.util.List<org.cs362.dominion.Card> list_card33 = org.cs362.dominion.Card.createCards();
    boolean b34 = arraylist_card29.contains((java.lang.Object)list_card33);
    arraylist_abstractcollection_card25.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i40 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName39);
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    int i49 = arraylist_card47.size();
    java.util.RandomAccess[] randomAccess_array50 = new java.util.RandomAccess[] { arraylist_card42, arraylist_card47 };
    java.util.RandomAccess[] randomAccess_array51 = arraylist_card37.toArray(randomAccess_array50);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName52);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str55 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b57 = hashmap_serializable_str55.equals((java.lang.Object)1.0d);
    int i58 = hashmap_serializable_str55.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str59 = hashmap_serializable_str55.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    hashmap_serializable_str55.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str61);
    java.util.HashMap[] hashMap_array66 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array67 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array66;
    hashmap_serializable_str_array67[0] = hashmap_serializable_str61;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = arraylist_card37.toArray(hashmap_serializable_str_array67);
    boolean b71 = hashmap_type_cloneable22.replace(type23, (java.lang.Cloneable)arraylist_card29, (java.lang.Cloneable)hashmap_serializable_str_array70);
    java.util.Set<org.cs362.dominion.Card.Type> set_type72 = hashmap_type_cloneable22.keySet();
    boolean b73 = arraylist_str19.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type72);
    int i74 = arraylist_abstractcollection_card1.lastIndexOf((java.lang.Object)b73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type23.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array51);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == (-1));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    boolean b57 = linkedlist_abstractcollection_card39.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card39.pop();
    java.lang.CharSequence[] charSequence_array61 = new java.lang.CharSequence[] { " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", "[]" };
    java.lang.CharSequence[] charSequence_array62 = linkedlist_abstractcollection_card39.toArray(charSequence_array61);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card63 = linkedlist_abstractcollection_card39.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(charSequence_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(charSequence_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card63);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card19 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card20 = hashmap_iterable_entry_serializable_str_spliterator_card19.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card21 = collection_spliterator_card20.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card22 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b23 = linkedlist_stream_spliterator_card22.add(stream_spliterator_card21);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card26 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card27 = hashmap_iterable_entry_serializable_str_spliterator_card26.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card28 = collection_spliterator_card27.stream();
    linkedlist_stream_spliterator_card22.addFirst(stream_spliterator_card28);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card30 = linkedlist_stream_spliterator_card22.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card31 = linkedlist_stream_spliterator_card22.getLast();
    // The following exception was thrown during execution in test generation
    try {
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card32 = linkedlist_stream_spliterator_card5.set((int)(short)10, stream_spliterator_card31);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card31);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.ensureCapacity(2);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Copper;
    int i4 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.lastIndexOf((java.lang.Object)cardName3);
    java.lang.Object[] obj_array5 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.toArray();
    java.util.function.UnaryOperator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> unaryoperator_entry_iterable_entry_serializable_str_spliterator_card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.replaceAll(unaryoperator_entry_iterable_entry_serializable_str_spliterator_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Copper + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    org.cs362.dominion.GameState gameState6 = null;
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState6, "hi!");
    player8.buyCard();
    java.lang.String str10 = player8.toString();
    player8.playKingdomCard();
    org.cs362.dominion.Card card12 = null;
    player8.discard(card12);
    java.lang.String str14 = player8.toString();
    gameState4.addPlayer(player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    hashmap_player_i5.clear();
    org.cs362.dominion.GameState gameState7 = null;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState7, "hi!");
    player9.buyCard();
    java.lang.String str11 = player9.toString();
    player9.playKingdomCard();
    player9.playKingdomCard();
    java.lang.Integer i15 = hashmap_player_i5.replace(player9, (java.lang.Integer)10);
    // The following exception was thrown during execution in test generation
    try {
    player9.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i15);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    org.cs362.dominion.Player player93 = new org.cs362.dominion.Player(gameState90, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str94 = gameState90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type5 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = linkedlist_obj0.addAll((int)'4', (java.util.Collection<java.lang.Comparable<org.cs362.dominion.Card.Type>>)arraylist_comparable_type5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card81 = linkedlist_abstractcollection_card80.element();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card81);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = linkedlist_obj0.get(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card card44 = null;
    boolean b45 = arraylist_card42.add(card44);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str47 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b49 = hashmap_serializable_str47.equals((java.lang.Object)1.0d);
    int i50 = hashmap_serializable_str47.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str51 = hashmap_serializable_str47.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str52 = hashmap_serializable_str47.entrySet();
    boolean b53 = arraylist_card42.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str52);
    linkedlist_abstractcollection_card39.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card55 = linkedlist_abstractcollection_card39.removeLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card56 = linkedlist_abstractcollection_card39.removeLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card57 = linkedlist_abstractcollection_card39.iterator();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card39.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card58);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.io.Serializable,java.lang.String> entry_serializable_str2 = arraylist_entry_serializable_str0.get((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    java.lang.String str96 = hashmap_player_i95.toString();
    int i97 = hashmap_player_i95.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "{}"+ "'", str96.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    boolean b57 = linkedlist_abstractcollection_card39.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card39.getFirst();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable59 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    hashmap_type_cloneable59.clear();
    boolean b61 = linkedlist_abstractcollection_card39.contains((java.lang.Object)hashmap_type_cloneable59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    org.cs362.dominion.Player player96 = new org.cs362.dominion.Player(gameState90, "");
    player96.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4', (float)'a');
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b6 = hashmap_serializable_str4.equals((java.lang.Object)1.0d);
    int i7 = hashmap_serializable_str4.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str8 = hashmap_serializable_str4.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str9 = hashmap_serializable_str4.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str11 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b13 = hashmap_serializable_str11.equals((java.lang.Object)1.0d);
    int i14 = hashmap_serializable_str11.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str15 = hashmap_serializable_str11.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str17 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b19 = hashmap_serializable_str17.equals((java.lang.Object)1.0d);
    hashmap_serializable_str11.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str17);
    hashmap_serializable_str4.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str11);
    hashmap_serializable_str4.clear();
    java.lang.String str24 = hashmap_serializable_str4.remove((java.lang.Object)10.0f);
    hashmap_serializable_str4.clear();
    hashmap_serializable_str4.clear();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str28);
    hashmap_serializable_str28.clear();
    java.lang.String str34 = hashmap_serializable_str4.replace((java.io.Serializable)hashmap_serializable_str28, "{}");
    hashmap_serializable_str2.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object obj2 = arraylist_entry_serializable_str0.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i3 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b4 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i3);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card7 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card8 = hashmap_iterable_entry_serializable_str_spliterator_card7.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card9 = collection_spliterator_card8.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card10 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b11 = linkedlist_stream_spliterator_card10.add(stream_spliterator_card9);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card14 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card15 = hashmap_iterable_entry_serializable_str_spliterator_card14.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card16 = collection_spliterator_card15.stream();
    linkedlist_stream_spliterator_card10.addFirst(stream_spliterator_card16);
    boolean b18 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)linkedlist_stream_spliterator_card10);
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card19 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card21 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card22 = arraylist_abstractcollection_card21.spliterator();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.createCards();
    boolean b30 = arraylist_card25.contains((java.lang.Object)list_card29);
    arraylist_abstractcollection_card21.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    int i35 = arraylist_card33.size();
    boolean b37 = arraylist_card33.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    int i45 = arraylist_card43.size();
    boolean b47 = arraylist_card43.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i57 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card54, cardName56);
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    int i61 = arraylist_card59.size();
    java.util.RandomAccess[] randomAccess_array62 = new java.util.RandomAccess[] { arraylist_card54, arraylist_card59 };
    java.util.RandomAccess[] randomAccess_array63 = arraylist_card49.toArray(randomAccess_array62);
    arraylist_card49.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card65 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b66 = linkedlist_abstractcollection_card65.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card25);
    boolean b67 = linkedlist_abstractcollection_card65.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card33);
    boolean b68 = linkedlist_abstractcollection_card65.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card39);
    boolean b69 = linkedlist_abstractcollection_card65.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    boolean b70 = linkedlist_abstractcollection_card65.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card49);
    int i72 = linkedlist_abstractcollection_card65.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card75 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card76 = arraylist_abstractcollection_card75.spliterator();
    org.cs362.dominion.Card[] card_array78 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card79 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card79, card_array78);
    org.cs362.dominion.Card.CardName cardName81 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i82 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card79, cardName81);
    java.util.List<org.cs362.dominion.Card> list_card83 = org.cs362.dominion.Card.createCards();
    boolean b84 = arraylist_card79.contains((java.lang.Object)list_card83);
    arraylist_abstractcollection_card75.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card79);
    arraylist_abstractcollection_card75.clear();
    org.cs362.dominion.Card[] card_array87 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card88 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card88, card_array87);
    int i90 = arraylist_card88.size();
    boolean b91 = arraylist_abstractcollection_card75.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card88);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card92 = linkedlist_abstractcollection_card65.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card88);
    boolean b93 = linkedlist_stream_spliterator_card19.removeFirstOccurrence((java.lang.Object)linkedlist_abstractcollection_card65);
    boolean b94 = linkedlist_stream_spliterator_card10.addAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)linkedlist_stream_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName81.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card38 = linkedlist_abstractcollection_card37.pollFirst();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card card42 = null;
    boolean b43 = arraylist_card40.add(card42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card82 = linkedlist_abstractcollection_card81.pollFirst();
    boolean b83 = arraylist_card40.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card81.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card81.peek();
    org.cs362.dominion.Card[] card_array86 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card87 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b88 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card87, card_array86);
    org.cs362.dominion.Card.CardName cardName89 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i90 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card87, cardName89);
    java.util.List<org.cs362.dominion.Card> list_card91 = org.cs362.dominion.Card.createCards();
    boolean b92 = arraylist_card87.contains((java.lang.Object)list_card91);
    int i94 = arraylist_card87.indexOf((java.lang.Object)(byte)10);
    boolean b95 = linkedlist_abstractcollection_card81.remove((java.lang.Object)i94);
    java.lang.Object[] obj_array96 = linkedlist_abstractcollection_card81.toArray();
    boolean b97 = linkedlist_abstractcollection_card37.addAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + cardName89 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName89.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    linkedlist_abstractcollection_card37.clear();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card81 = linkedlist_abstractcollection_card37.removeLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card1 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable3 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    int i17 = arraylist_card15.size();
    java.util.RandomAccess[] randomAccess_array18 = new java.util.RandomAccess[] { arraylist_card10, arraylist_card15 };
    java.util.RandomAccess[] randomAccess_array19 = arraylist_card5.toArray(randomAccess_array18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName20);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str23 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b25 = hashmap_serializable_str23.equals((java.lang.Object)1.0d);
    int i26 = hashmap_serializable_str23.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str27 = hashmap_serializable_str23.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str29 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b31 = hashmap_serializable_str29.equals((java.lang.Object)1.0d);
    hashmap_serializable_str23.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str29);
    java.util.HashMap[] hashMap_array34 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array35 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array34;
    hashmap_serializable_str_array35[0] = hashmap_serializable_str29;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array38 = arraylist_card5.toArray(hashmap_serializable_str_array35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b40 = arraylist_abstractcollection_card39.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card41 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card39);
    java.lang.Object[] obj_array42 = linkedlist_abstractcollection_card41.toArray();
    boolean b43 = hashmap_type_cloneable3.containsKey((java.lang.Object)linkedlist_abstractcollection_card41);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card41.pollLast();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card45 = hashmap_iterable_entry_serializable_str_spliterator_card1.remove((java.lang.Object)linkedlist_abstractcollection_card41);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable47 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i57 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card54, cardName56);
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    int i61 = arraylist_card59.size();
    java.util.RandomAccess[] randomAccess_array62 = new java.util.RandomAccess[] { arraylist_card54, arraylist_card59 };
    java.util.RandomAccess[] randomAccess_array63 = arraylist_card49.toArray(randomAccess_array62);
    org.cs362.dominion.Card.CardName cardName64 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card65 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName64);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    int i70 = hashmap_serializable_str67.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str71 = hashmap_serializable_str67.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str73 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b75 = hashmap_serializable_str73.equals((java.lang.Object)1.0d);
    hashmap_serializable_str67.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str73);
    java.util.HashMap[] hashMap_array78 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array79 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array78;
    hashmap_serializable_str_array79[0] = hashmap_serializable_str73;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array82 = arraylist_card49.toArray(hashmap_serializable_str_array79);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card83 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b84 = arraylist_abstractcollection_card83.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card49);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card85 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card83);
    java.lang.Object[] obj_array86 = linkedlist_abstractcollection_card85.toArray();
    boolean b87 = hashmap_type_cloneable47.containsKey((java.lang.Object)linkedlist_abstractcollection_card85);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card88 = linkedlist_abstractcollection_card85.pollLast();
    boolean b89 = linkedlist_abstractcollection_card41.offerFirst(abstractcollection_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array63);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName64.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Adventurer;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Adventurer + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Adventurer));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str1 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str2 = arraylist_entry_serializable_str1.parallelStream();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card3 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    org.cs362.dominion.Card.CardName cardName4 = org.cs362.dominion.Card.CardName.Village;
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card5 = hashmap_iterable_entry_serializable_str_spliterator_card3.remove((java.lang.Object)cardName4);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card7 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str9 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b11 = hashmap_serializable_str9.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str12 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str9);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    int i17 = hashmap_serializable_str14.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str18 = hashmap_serializable_str14.entrySet();
    boolean b19 = hashmap_serializable_str12.equals((java.lang.Object)set_entry_serializable_str18);
    boolean b20 = arraylist_abstractcollection_card7.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str18);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card22 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card23 = arraylist_abstractcollection_card22.spliterator();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.createCards();
    boolean b31 = arraylist_card26.contains((java.lang.Object)list_card30);
    arraylist_abstractcollection_card22.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.createCards();
    boolean b39 = arraylist_card34.contains((java.lang.Object)list_card38);
    org.cs362.dominion.Card.Type type40 = null;
    java.util.List<org.cs362.dominion.Card> list_card41 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card38, type40);
    boolean b42 = arraylist_card26.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card38);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card43 = arraylist_card26.spliterator();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card44 = hashmap_iterable_entry_serializable_str_spliterator_card3.putIfAbsent((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str18, spliterator_card43);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card45 = hashmap_iterable_entry_serializable_str_spliterator_card0.put((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str1, spliterator_card44);
    int i46 = arraylist_entry_serializable_str1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str2);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName4.equals(org.cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    java.lang.Object obj5 = linkedlist_obj0.poll();
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.Object> list_obj8 = linkedlist_obj0.subList(100, (int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.peek();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peek();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    boolean b53 = arraylist_card48.contains((java.lang.Object)list_card52);
    int i55 = arraylist_card48.indexOf((java.lang.Object)(byte)10);
    boolean b56 = linkedlist_abstractcollection_card42.remove((java.lang.Object)i55);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card58 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card59 = arraylist_abstractcollection_card58.spliterator();
    org.cs362.dominion.Card[] card_array61 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card62 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card62, card_array61);
    org.cs362.dominion.Card.CardName cardName64 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i65 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card62, cardName64);
    java.util.List<org.cs362.dominion.Card> list_card66 = org.cs362.dominion.Card.createCards();
    boolean b67 = arraylist_card62.contains((java.lang.Object)list_card66);
    arraylist_abstractcollection_card58.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card62);
    boolean b69 = linkedlist_abstractcollection_card42.offer((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card62);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card71 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card72 = arraylist_abstractcollection_card71.spliterator();
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i78 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName77);
    java.util.List<org.cs362.dominion.Card> list_card79 = org.cs362.dominion.Card.createCards();
    boolean b80 = arraylist_card75.contains((java.lang.Object)list_card79);
    arraylist_abstractcollection_card71.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card75);
    org.cs362.dominion.Card[] card_array82 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card83 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83, card_array82);
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i86 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card83, cardName85);
    java.util.List<org.cs362.dominion.Card> list_card87 = org.cs362.dominion.Card.createCards();
    boolean b88 = arraylist_card83.contains((java.lang.Object)list_card87);
    org.cs362.dominion.Card.Type type89 = null;
    java.util.List<org.cs362.dominion.Card> list_card90 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card87, type89);
    boolean b91 = arraylist_card75.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card87);
    org.cs362.dominion.Card.CardName cardName92 = org.cs362.dominion.Card.CardName.Mine;
    int i93 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName92);
    boolean b94 = linkedlist_abstractcollection_card42.equals((java.lang.Object)arraylist_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName64.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    org.junit.Assert.assertTrue("'" + cardName92 + "' != '" + org.cs362.dominion.Card.CardName.Mine + "'", cardName92.equals(org.cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<java.lang.Iterable<java.util.AbstractCollection<org.cs362.dominion.Card>>,org.cs362.dominion.Card.CardName[]> hashmap_iterable_abstractcollection_card_cardName_array2 = new java.util.HashMap<java.lang.Iterable<java.util.AbstractCollection<org.cs362.dominion.Card>>,org.cs362.dominion.Card.CardName[]>(61, (float)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type1 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((int)(short)10);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type2 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<java.lang.Comparable<org.cs362.dominion.Card.Type>>)arraylist_comparable_type1);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type5 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = arraylist_comparable_type1.addAll((-1), (java.util.Collection<java.lang.Comparable<org.cs362.dominion.Card.Type>>)arraylist_comparable_type5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.String str2 = arraylist_entry_serializable_str0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str2 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b3 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"{}");
    boolean b4 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"");
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b9 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b10 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b11 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b12 = arraylist_comparable_str2.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str8);
    boolean b14 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str15 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i16 = arraylist_entry_serializable_str15.size();
    int i17 = arraylist_entry_serializable_str15.size();
    boolean b18 = arraylist_comparable_str8.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str15);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.Comparable<java.lang.String>> list_comparable_str21 = arraylist_comparable_str8.subList((-1), (int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object obj2 = arraylist_entry_serializable_str0.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i3 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b4 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i3);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card7 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card8 = hashmap_iterable_entry_serializable_str_spliterator_card7.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card9 = collection_spliterator_card8.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card10 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b11 = linkedlist_stream_spliterator_card10.add(stream_spliterator_card9);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card14 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card15 = hashmap_iterable_entry_serializable_str_spliterator_card14.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card16 = collection_spliterator_card15.stream();
    linkedlist_stream_spliterator_card10.addFirst(stream_spliterator_card16);
    boolean b18 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)linkedlist_stream_spliterator_card10);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card19 = linkedlist_stream_spliterator_card10.remove();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card19);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    org.cs362.dominion.Card card6 = null;
    player2.discard(card6);
    java.lang.String str8 = player2.toString();
    java.lang.String str9 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
  // Regression assertion (captures the current behavior of the code)

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    org.cs362.dominion.Card card4 = null;
    player2.discard(card4);
    java.lang.String str6 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    org.cs362.dominion.GameState gameState95 = gameState90.clone();
    gameState90.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState95);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    java.util.Iterator<java.lang.Object> iterator_obj5 = linkedlist_obj0.iterator();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.ArrayList<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_set_entry_serializable_str13 = new java.util.ArrayList<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b14 = arraylist_set_entry_serializable_str13.add(set_entry_serializable_str12);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = linkedlist_obj0.addAll((int)(byte)-1, (java.util.Collection<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_set_entry_serializable_str13);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b9 = hashmap_serializable_str7.equals((java.lang.Object)1.0d);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str7);
    java.lang.String str11 = hashmap_serializable_str7.toString();
    java.util.Collection<java.lang.String> collection_str12 = hashmap_serializable_str7.values();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{}"+ "'", str11.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_str12);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_collection_entry_serializable_str0 = new java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.Collection<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> collection_entry_randomAccess_array_set_entry_serializable_str1 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b2 = arraylist_collection_entry_serializable_str0.containsAll(collection_entry_randomAccess_array_set_entry_serializable_str1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.stream.Stream<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> stream_entry_iterable_entry_serializable_str_spliterator_card1 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.stream();
    int i2 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.size();
    java.util.function.UnaryOperator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> unaryoperator_entry_iterable_entry_serializable_str_spliterator_card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.replaceAll(unaryoperator_entry_iterable_entry_serializable_str_spliterator_card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_iterable_entry_serializable_str_spliterator_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    hashmap_serializable_str1.clear();
    java.lang.String str21 = hashmap_serializable_str1.remove((java.lang.Object)10.0f);
    hashmap_serializable_str1.clear();
    hashmap_serializable_str1.clear();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    hashmap_serializable_str25.clear();
    java.lang.String str31 = hashmap_serializable_str1.replace((java.io.Serializable)hashmap_serializable_str25, "{}");
    java.lang.String str32 = hashmap_serializable_str25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "{}"+ "'", str32.equals("{}"));

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.element();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card card44 = null;
    boolean b45 = arraylist_card42.add(card44);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str47 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b49 = hashmap_serializable_str47.equals((java.lang.Object)1.0d);
    int i50 = hashmap_serializable_str47.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str51 = hashmap_serializable_str47.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str52 = hashmap_serializable_str47.entrySet();
    boolean b53 = arraylist_card42.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str52);
    linkedlist_abstractcollection_card39.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card56 = arraylist_card42.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card56);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (short)10;

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    boolean b57 = linkedlist_abstractcollection_card39.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card39.getFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card59 = linkedlist_abstractcollection_card39.getFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card60 = linkedlist_abstractcollection_card39.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card60);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    arraylist_abstractcollection_card1.ensureCapacity((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState91 = null;
    org.cs362.dominion.Player player93 = new org.cs362.dominion.Player(gameState91, "hi!");
    player93.playTreasureCard();
    org.cs362.dominion.Card card95 = null;
    player93.discard(card95);
    gameState90.addPlayer(player93);
    java.lang.String str98 = gameState90.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState90.embargo;
    org.cs362.dominion.GameState gameState96 = gameState90.clone();
    java.util.List<org.cs362.dominion.Player> list_player97 = gameState96.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player97);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = linkedlist_obj0.getLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card86 = linkedlist_abstractcollection_card39.iterator();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card87 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card88 = linkedlist_abstractcollection_card39.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card88);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState90.embargo;
    java.util.List<org.cs362.dominion.Card> list_card96 = gameState90.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card96);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card0 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    linkedlist_abstractcollection_card0.clear();
    boolean b3 = linkedlist_abstractcollection_card0.remove((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    org.cs362.dominion.GameState gameState95 = gameState90.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i96 = gameState90.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i96);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    java.util.ArrayList<java.util.List<java.lang.String>> arraylist_list_str1 = new java.util.ArrayList<java.util.List<java.lang.String>>((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.List<java.lang.String>> list_list_str4 = arraylist_list_str1.subList((int)(byte)-1, (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.lang.Object obj45 = linkedlist_abstractcollection_card42.clone();
    int i46 = linkedlist_abstractcollection_card42.size();
    java.lang.Object obj47 = linkedlist_abstractcollection_card42.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card0 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    linkedlist_abstractcollection_card0.clear();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card2 = linkedlist_abstractcollection_card0.remove();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card2 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card3 = arraylist_abstractcollection_card2.spliterator();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.createCards();
    boolean b11 = arraylist_card6.contains((java.lang.Object)list_card10);
    arraylist_abstractcollection_card2.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    boolean b18 = arraylist_card14.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    boolean b28 = arraylist_card24.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i33 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    int i42 = arraylist_card40.size();
    java.util.RandomAccess[] randomAccess_array43 = new java.util.RandomAccess[] { arraylist_card35, arraylist_card40 };
    java.util.RandomAccess[] randomAccess_array44 = arraylist_card30.toArray(randomAccess_array43);
    arraylist_card30.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card46 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b47 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    boolean b48 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card14);
    boolean b49 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card20);
    boolean b50 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card24);
    boolean b51 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card30);
    int i53 = linkedlist_abstractcollection_card46.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card56 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card57 = arraylist_abstractcollection_card56.spliterator();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i63 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card60, cardName62);
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.createCards();
    boolean b65 = arraylist_card60.contains((java.lang.Object)list_card64);
    arraylist_abstractcollection_card56.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card60);
    arraylist_abstractcollection_card56.clear();
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    int i71 = arraylist_card69.size();
    boolean b72 = arraylist_abstractcollection_card56.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card73 = linkedlist_abstractcollection_card46.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    boolean b74 = linkedlist_stream_spliterator_card0.removeFirstOccurrence((java.lang.Object)linkedlist_abstractcollection_card46);
    // The following exception was thrown during execution in test generation
    try {
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card75 = linkedlist_stream_spliterator_card0.getFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_stream_spliterator_card2 = linkedlist_stream_spliterator_card0.listIterator(9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    boolean b16 = arraylist_abstractcollection_card1.isEmpty();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card card20 = null;
    boolean b21 = arraylist_card18.add(card20);
    boolean b22 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card24 = arraylist_card18.get(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b8 = hashmap_serializable_str6.equals((java.lang.Object)1.0d);
    int i9 = hashmap_serializable_str6.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str10 = hashmap_serializable_str6.entrySet();
    boolean b11 = hashmap_serializable_str4.equals((java.lang.Object)set_entry_serializable_str10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str13 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b15 = hashmap_serializable_str13.equals((java.lang.Object)1.0d);
    java.lang.String str16 = hashmap_serializable_str4.get((java.lang.Object)b15);
    hashmap_serializable_str4.clear();
    int i18 = hashmap_serializable_str4.size();
    java.util.Collection<java.lang.String> collection_str19 = hashmap_serializable_str4.values();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_str19);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    java.lang.String str3 = hashmap_serializable_str1.get((java.lang.Object)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card6 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b12 = hashmap_serializable_str10.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str13 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str15 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b17 = hashmap_serializable_str15.equals((java.lang.Object)1.0d);
    int i18 = hashmap_serializable_str15.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str19 = hashmap_serializable_str15.entrySet();
    boolean b20 = hashmap_serializable_str13.equals((java.lang.Object)set_entry_serializable_str19);
    boolean b21 = arraylist_abstractcollection_card8.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str19);
    java.lang.Object[] obj_array22 = arraylist_abstractcollection_card8.toArray();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    boolean b28 = arraylist_card24.equals((java.lang.Object)(-1.0f));
    boolean b29 = arraylist_abstractcollection_card8.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card30 = arraylist_abstractcollection_card8.spliterator();
    boolean b31 = arraylist_abstractcollection_card6.remove((java.lang.Object)spliterator_abstractcollection_card30);
    java.lang.String str32 = hashmap_serializable_str1.get((java.lang.Object)arraylist_abstractcollection_card6);
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card33 = arraylist_abstractcollection_card6.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card33);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type0 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness1 = new org.cs362.dominion.Randomness();
    int i2 = randomness1.main();
    int i3 = randomness1.main();
    int i4 = randomness1.main();
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type6 = hashmap_randomness_type0.put(randomness1, type5);
    java.lang.Object obj7 = hashmap_randomness_type0.clone();
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.createCards();
    boolean b14 = arraylist_card9.contains((java.lang.Object)list_card13);
    org.cs362.dominion.Card.Type type15 = hashmap_randomness_type0.get((java.lang.Object)b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type15);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    org.cs362.dominion.Randomness.reset(100L);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i92 = gameState90.play();
    org.cs362.dominion.Card card93 = null;
    gameState90.addEmbargo(card93);
    org.cs362.dominion.GameState gameState95 = null;
    org.cs362.dominion.Player player97 = new org.cs362.dominion.Player(gameState95, "hi!");
    player97.buyCard();
    gameState90.addPlayer(player97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i92);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i96 = gameState90.getWinners();
    org.cs362.dominion.Player player98 = new org.cs362.dominion.Player(gameState90, "[]");
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState99 = gameState90.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i96);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card54 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card55 = arraylist_abstractcollection_card54.spliterator();
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card58, cardName60);
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.createCards();
    boolean b63 = arraylist_card58.contains((java.lang.Object)list_card62);
    arraylist_abstractcollection_card54.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card58);
    arraylist_abstractcollection_card54.clear();
    org.cs362.dominion.Card[] card_array66 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card67 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card67, card_array66);
    int i69 = arraylist_card67.size();
    boolean b70 = arraylist_abstractcollection_card54.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card67);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card72 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness73 = new org.cs362.dominion.Randomness();
    int i74 = randomness73.main();
    int i75 = arraylist_abstractcollection_card72.lastIndexOf((java.lang.Object)i74);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card76 = arraylist_abstractcollection_card72.stream();
    int i77 = arraylist_card67.indexOf((java.lang.Object)stream_abstractcollection_card76);
    org.cs362.dominion.Card.CardName cardName78 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i79 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName78);
    boolean b80 = linkedlist_abstractcollection_card45.offerLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card67);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card82 = linkedlist_abstractcollection_card45.listIterator((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == (-1));
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName78.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    gameState90.initializeGame();
    java.lang.String str93 = gameState90.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i94 = gameState90.gameBoard;
    java.util.Set<org.cs362.dominion.Card> set_card95 = hashmap_card_i94.keySet();
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card96 = set_card95.stream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
   
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card96);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card42.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card46);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i0 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> listiterator_entry_player_i2 = arraylist_entry_player_i0.listIterator(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.lang.Object obj1 = null;
    boolean b2 = linkedlist_stream_spliterator_card0.contains(obj1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<java.util.List<java.lang.Object>,java.util.stream.Stream<org.cs362.dominion.Card>> hashmap_list_obj_stream_card2 = new java.util.HashMap<java.util.List<java.lang.Object>,java.util.stream.Stream<org.cs362.dominion.Card>>((int)(short)100, (float)0L);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card19 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card20 = hashmap_iterable_entry_serializable_str_spliterator_card19.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card21 = collection_spliterator_card20.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card22 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b23 = linkedlist_stream_spliterator_card22.add(stream_spliterator_card21);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card26 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card27 = hashmap_iterable_entry_serializable_str_spliterator_card26.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card28 = collection_spliterator_card27.stream();
    linkedlist_stream_spliterator_card22.addFirst(stream_spliterator_card28);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card30 = linkedlist_stream_spliterator_card22.removeLast();
    // The following exception was thrown during execution in test generation
    try {
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card31 = linkedlist_stream_spliterator_card5.set((int)'a', stream_spliterator_card30);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card30);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    int i40 = linkedlist_abstractcollection_card39.size();
    int i41 = linkedlist_abstractcollection_card39.size();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i46 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    java.util.RandomAccess[] randomAccess_array56 = new java.util.RandomAccess[] { arraylist_card48, arraylist_card53 };
    java.util.RandomAccess[] randomAccess_array57 = arraylist_card43.toArray(randomAccess_array56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName58);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    int i64 = hashmap_serializable_str61.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str65 = hashmap_serializable_str61.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    hashmap_serializable_str61.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str67);
    java.util.HashMap[] hashMap_array72 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array72;
    hashmap_serializable_str_array73[0] = hashmap_serializable_str67;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = arraylist_card43.toArray(hashmap_serializable_str_array73);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card77 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b78 = arraylist_abstractcollection_card77.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card77);
    java.lang.Object[] obj_array80 = linkedlist_abstractcollection_card79.toArray();
    boolean b81 = linkedlist_abstractcollection_card39.removeLastOccurrence((java.lang.Object)obj_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    int i1 = linkedlist_stream_spliterator_card0.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card5 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card6 = hashmap_iterable_entry_serializable_str_spliterator_card5.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card7 = collection_spliterator_card6.stream();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str8 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str9 = arraylist_entry_serializable_str8.stream();
    java.lang.Object obj10 = arraylist_entry_serializable_str8.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i11 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b12 = arraylist_entry_serializable_str8.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i11);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card15 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card16 = hashmap_iterable_entry_serializable_str_spliterator_card15.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card17 = collection_spliterator_card16.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card18 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b19 = linkedlist_stream_spliterator_card18.add(stream_spliterator_card17);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card22 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card23 = hashmap_iterable_entry_serializable_str_spliterator_card22.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card24 = collection_spliterator_card23.stream();
    linkedlist_stream_spliterator_card18.addFirst(stream_spliterator_card24);
    boolean b26 = arraylist_entry_serializable_str8.retainAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)linkedlist_stream_spliterator_card18);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card27 = linkedlist_stream_spliterator_card18.remove();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card30 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card31 = hashmap_iterable_entry_serializable_str_spliterator_card30.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card32 = collection_spliterator_card31.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card33 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b34 = linkedlist_stream_spliterator_card33.add(stream_spliterator_card32);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card37 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card38 = hashmap_iterable_entry_serializable_str_spliterator_card37.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card39 = collection_spliterator_card38.stream();
    linkedlist_stream_spliterator_card33.addFirst(stream_spliterator_card39);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card41 = linkedlist_stream_spliterator_card33.removeLast();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card44 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card45 = hashmap_iterable_entry_serializable_str_spliterator_card44.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card46 = collection_spliterator_card45.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card47 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b48 = linkedlist_stream_spliterator_card47.add(stream_spliterator_card46);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card51 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card52 = hashmap_iterable_entry_serializable_str_spliterator_card51.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card53 = collection_spliterator_card52.stream();
    linkedlist_stream_spliterator_card47.addFirst(stream_spliterator_card53);
    java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_stream_spliterator_card55 = new java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b56 = arraylist_stream_spliterator_card55.add(stream_spliterator_card7);
    boolean b57 = arraylist_stream_spliterator_card55.add(stream_spliterator_card27);
    boolean b58 = arraylist_stream_spliterator_card55.add(stream_spliterator_card41);
    boolean b59 = arraylist_stream_spliterator_card55.add(stream_spliterator_card53);
    // The following exception was thrown during execution in test generation
    try {
    boolean b60 = linkedlist_stream_spliterator_card0.addAll((-1), (java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_stream_spliterator_card55);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState91 = null;
    org.cs362.dominion.Player player93 = new org.cs362.dominion.Player(gameState91, "hi!");
    player93.playTreasureCard();
    org.cs362.dominion.Card card95 = null;
    player93.discard(card95);
    gameState90.addPlayer(player93);
    java.util.List<org.cs362.dominion.Player> list_player98 = gameState90.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player98);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card2 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card3 = arraylist_abstractcollection_card2.spliterator();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.createCards();
    boolean b11 = arraylist_card6.contains((java.lang.Object)list_card10);
    arraylist_abstractcollection_card2.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    boolean b18 = arraylist_card14.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    boolean b28 = arraylist_card24.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i33 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    int i42 = arraylist_card40.size();
    java.util.RandomAccess[] randomAccess_array43 = new java.util.RandomAccess[] { arraylist_card35, arraylist_card40 };
    java.util.RandomAccess[] randomAccess_array44 = arraylist_card30.toArray(randomAccess_array43);
    arraylist_card30.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card46 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b47 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    boolean b48 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card14);
    boolean b49 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card20);
    boolean b50 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card24);
    boolean b51 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card30);
    int i53 = linkedlist_abstractcollection_card46.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card56 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card57 = arraylist_abstractcollection_card56.spliterator();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i63 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card60, cardName62);
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.createCards();
    boolean b65 = arraylist_card60.contains((java.lang.Object)list_card64);
    arraylist_abstractcollection_card56.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card60);
    arraylist_abstractcollection_card56.clear();
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    int i71 = arraylist_card69.size();
    boolean b72 = arraylist_abstractcollection_card56.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card73 = linkedlist_abstractcollection_card46.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    boolean b74 = linkedlist_stream_spliterator_card0.removeFirstOccurrence((java.lang.Object)linkedlist_abstractcollection_card46);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card75 = null;
    linkedlist_stream_spliterator_card0.push(stream_spliterator_card75);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card77 = linkedlist_stream_spliterator_card0.peekLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card78 = linkedlist_stream_spliterator_card0.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(stream_spliterator_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(stream_spliterator_card78);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i0 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array1 = arraylist_entry_player_i0.toArray();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer> entry_player_i2 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.lang.Object obj45 = linkedlist_abstractcollection_card42.clone();
    int i46 = linkedlist_abstractcollection_card42.size();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card47 = linkedlist_abstractcollection_card42.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card47);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    java.lang.Iterable<org.cs362.dominion.Card> iterable_card0 = null;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card2 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b6 = hashmap_serializable_str4.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str4);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str9 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b11 = hashmap_serializable_str9.equals((java.lang.Object)1.0d);
    int i12 = hashmap_serializable_str9.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str13 = hashmap_serializable_str9.entrySet();
    boolean b14 = hashmap_serializable_str7.equals((java.lang.Object)set_entry_serializable_str13);
    boolean b15 = arraylist_abstractcollection_card2.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str13);
    java.lang.Object[] obj_array16 = arraylist_abstractcollection_card2.toArray();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.createCards();
    boolean b23 = arraylist_card18.contains((java.lang.Object)list_card22);
    org.cs362.dominion.Card.Type type24 = null;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card22, type24);
    int i26 = arraylist_abstractcollection_card2.lastIndexOf((java.lang.Object)list_card22);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card22, type27);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter(iterable_card0, type27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type27.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    java.util.HashMap<java.util.Collection<java.lang.Integer>,java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>> hashmap_collection_i_iterable_comparable_type1 = new java.util.HashMap<java.util.Collection<java.lang.Integer>,java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>>((int)(byte)100);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type2 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness3 = new org.cs362.dominion.Randomness();
    int i4 = randomness3.main();
    int i5 = randomness3.main();
    int i6 = randomness3.main();
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type8 = hashmap_randomness_type2.put(randomness3, type7);
    boolean b9 = hashmap_collection_i_iterable_comparable_type1.containsValue((java.lang.Object)randomness3);
    boolean b10 = hashmap_collection_i_iterable_comparable_type1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_map_randomAccess_array_set_entry_serializable_str1 = new java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>((int)'4');
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> map_randomAccess_array_set_entry_serializable_str2 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>)arraylist_map_randomAccess_array_set_entry_serializable_str1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str0 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.Set<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> set_entry_randomAccess_array_set_entry_serializable_str1 = hashmap_randomAccess_array_set_entry_serializable_str0.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_randomAccess_array_set_entry_serializable_str1);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    boolean b19 = hashmap_serializable_str1.isEmpty();
    java.lang.String str21 = hashmap_serializable_str1.remove((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str22 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.peekFirst();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card18 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card19 = hashmap_iterable_entry_serializable_str_spliterator_card18.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = collection_spliterator_card19.stream();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card23 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card24 = hashmap_iterable_entry_serializable_str_spliterator_card23.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card25 = collection_spliterator_card24.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card26 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b27 = linkedlist_stream_spliterator_card26.add(stream_spliterator_card25);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card30 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card31 = hashmap_iterable_entry_serializable_str_spliterator_card30.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card32 = collection_spliterator_card31.stream();
    linkedlist_stream_spliterator_card26.addFirst(stream_spliterator_card32);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card34 = linkedlist_stream_spliterator_card26.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card35 = linkedlist_stream_spliterator_card26.getLast();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card38 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card39 = hashmap_iterable_entry_serializable_str_spliterator_card38.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card40 = collection_spliterator_card39.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card41 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b42 = linkedlist_stream_spliterator_card41.add(stream_spliterator_card40);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card45 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card46 = hashmap_iterable_entry_serializable_str_spliterator_card45.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card47 = collection_spliterator_card46.stream();
    linkedlist_stream_spliterator_card41.addFirst(stream_spliterator_card47);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card49 = linkedlist_stream_spliterator_card41.removeLast();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card50 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b51 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card15);
    boolean b52 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card20);
    boolean b53 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card35);
    boolean b54 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card49);
    java.util.Iterator<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> iterator_stream_spliterator_card55 = linkedlist_stream_spliterator_card50.iterator();
    java.lang.Object[] obj_array56 = linkedlist_stream_spliterator_card50.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_stream_spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array56);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    java.lang.String[] str_array1 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array1);
    java.lang.Object obj4 = arraylist_str2.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    boolean b54 = hashmap_type_cloneable5.replace(type6, (java.lang.Cloneable)arraylist_card12, (java.lang.Cloneable)hashmap_serializable_str_array53);
    java.util.Set<org.cs362.dominion.Card.Type> set_type55 = hashmap_type_cloneable5.keySet();
    boolean b56 = arraylist_str2.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type57 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    arraylist_comparable_type57.ensureCapacity(61);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.lang.Comparable<org.cs362.dominion.Card.Type>> listiterator_comparable_type61 = arraylist_comparable_type57.listIterator(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str1 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>(0);
    java.util.function.UnaryOperator<java.util.Map.Entry<java.io.Serializable,java.lang.String>> unaryoperator_entry_serializable_str2 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_entry_serializable_str1.replaceAll(unaryoperator_entry_serializable_str2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    java.lang.String[] str_array1 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array1);
    java.lang.Object obj4 = arraylist_str2.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    boolean b54 = hashmap_type_cloneable5.replace(type6, (java.lang.Cloneable)arraylist_card12, (java.lang.Cloneable)hashmap_serializable_str_array53);
    java.util.Set<org.cs362.dominion.Card.Type> set_type55 = hashmap_type_cloneable5.keySet();
    boolean b56 = arraylist_str2.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type57 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    arraylist_comparable_type57.ensureCapacity(61);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i60 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array61 = arraylist_entry_player_i60.toArray();
    boolean b62 = arraylist_comparable_type57.containsAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i60);
    java.lang.Object[] obj_array63 = arraylist_comparable_type57.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array63);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_collection_entry_serializable_str0 = new java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>> collection_entry_serializable_str1 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_collection_entry_serializable_str0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_map_iterable_entry_serializable_str_spliterator_card1 = new java.util.ArrayList<java.util.Map<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.lang.Object obj45 = linkedlist_abstractcollection_card42.clone();
    int i46 = linkedlist_abstractcollection_card42.size();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card47 = linkedlist_abstractcollection_card42.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card47);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str2 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b3 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"{}");
    boolean b4 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"");
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b9 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b10 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b11 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b12 = arraylist_comparable_str2.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str8);
    boolean b14 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str15 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i16 = arraylist_entry_serializable_str15.size();
    int i17 = arraylist_entry_serializable_str15.size();
    boolean b18 = arraylist_comparable_str8.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str15);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.io.Serializable,java.lang.String> entry_serializable_str20 = arraylist_entry_serializable_str15.get((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str3 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b5 = hashmap_serializable_str3.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str6 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str3);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    boolean b13 = hashmap_serializable_str6.equals((java.lang.Object)set_entry_serializable_str12);
    boolean b14 = arraylist_abstractcollection_card1.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str12);
    java.lang.Object[] obj_array15 = arraylist_abstractcollection_card1.toArray();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    boolean b21 = arraylist_card17.equals((java.lang.Object)(-1.0f));
    boolean b22 = arraylist_abstractcollection_card1.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card25 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness26 = new org.cs362.dominion.Randomness();
    int i27 = randomness26.main();
    int i28 = arraylist_abstractcollection_card25.lastIndexOf((java.lang.Object)i27);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card29 = arraylist_abstractcollection_card25.stream();
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = arraylist_abstractcollection_card1.addAll((int)'a', (java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card25);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card29);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str0 = new java.util.HashMap<java.io.Serializable,java.lang.String>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i7 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    java.util.RandomAccess[] randomAccess_array17 = new java.util.RandomAccess[] { arraylist_card9, arraylist_card14 };
    java.util.RandomAccess[] randomAccess_array18 = arraylist_card4.toArray(randomAccess_array17);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName19);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str22 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b24 = hashmap_serializable_str22.equals((java.lang.Object)1.0d);
    int i25 = hashmap_serializable_str22.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str26 = hashmap_serializable_str22.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    hashmap_serializable_str22.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str28);
    java.util.HashMap[] hashMap_array33 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array33;
    hashmap_serializable_str_array34[0] = hashmap_serializable_str28;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = arraylist_card4.toArray(hashmap_serializable_str_array34);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card38 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b39 = arraylist_abstractcollection_card38.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card4);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card40 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card38);
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card40.toArray();
    boolean b42 = hashmap_type_cloneable2.containsKey((java.lang.Object)linkedlist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card40.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card44 = linkedlist_abstractcollection_card40.descendingIterator();
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.Card.CardName cardName53 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i54 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card51, cardName53);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    int i58 = arraylist_card56.size();
    java.util.RandomAccess[] randomAccess_array59 = new java.util.RandomAccess[] { arraylist_card51, arraylist_card56 };
    java.util.RandomAccess[] randomAccess_array60 = arraylist_card46.toArray(randomAccess_array59);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card62 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName61);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    int i67 = hashmap_serializable_str64.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str68 = hashmap_serializable_str64.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str70 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b72 = hashmap_serializable_str70.equals((java.lang.Object)1.0d);
    hashmap_serializable_str64.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str70);
    java.util.HashMap[] hashMap_array75 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array75;
    hashmap_serializable_str_array76[0] = hashmap_serializable_str70;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array79 = arraylist_card46.toArray(hashmap_serializable_str_array76);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card80 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b81 = arraylist_abstractcollection_card80.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card46);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card82 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card80);
    java.lang.Object[] obj_array83 = linkedlist_abstractcollection_card82.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card84 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card82);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card84.remove();
    linkedlist_abstractcollection_card40.addFirst(abstractcollection_card85);
    java.lang.String[] str_array89 = new java.lang.String[] { "{}", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n" };
    java.util.ArrayList<java.lang.String> arraylist_str90 = new java.util.ArrayList<java.lang.String>();
    boolean b91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str90, str_array89);
    boolean b92 = abstractcollection_card85.removeAll((java.util.Collection<java.lang.String>)arraylist_str90);
    boolean b93 = arraylist_str90.isEmpty();
    arraylist_str90.trimToSize();
    boolean b97 = hashmap_serializable_str0.replace((java.io.Serializable)arraylist_str90, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName53.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.peekFirst();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable17 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i22 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i27 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    int i31 = arraylist_card29.size();
    java.util.RandomAccess[] randomAccess_array32 = new java.util.RandomAccess[] { arraylist_card24, arraylist_card29 };
    java.util.RandomAccess[] randomAccess_array33 = arraylist_card19.toArray(randomAccess_array32);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName34);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b39 = hashmap_serializable_str37.equals((java.lang.Object)1.0d);
    int i40 = hashmap_serializable_str37.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str41 = hashmap_serializable_str37.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str43 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b45 = hashmap_serializable_str43.equals((java.lang.Object)1.0d);
    hashmap_serializable_str37.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str43);
    java.util.HashMap[] hashMap_array48 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array49 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array48;
    hashmap_serializable_str_array49[0] = hashmap_serializable_str43;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array52 = arraylist_card19.toArray(hashmap_serializable_str_array49);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card53 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b54 = arraylist_abstractcollection_card53.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card55 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card53);
    java.lang.Object[] obj_array56 = linkedlist_abstractcollection_card55.toArray();
    boolean b57 = hashmap_type_cloneable17.containsKey((java.lang.Object)linkedlist_abstractcollection_card55);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card55.pollLast();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card card62 = null;
    boolean b63 = arraylist_card60.add(card62);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str65 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b67 = hashmap_serializable_str65.equals((java.lang.Object)1.0d);
    int i68 = hashmap_serializable_str65.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str69 = hashmap_serializable_str65.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str65.entrySet();
    boolean b71 = arraylist_card60.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str70);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str73 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b75 = hashmap_serializable_str73.equals((java.lang.Object)1.0d);
    int i76 = hashmap_serializable_str73.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str77 = hashmap_serializable_str73.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str78 = hashmap_serializable_str73.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str79 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b80 = arraylist_iterable_entry_serializable_str79.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str70);
    boolean b81 = arraylist_iterable_entry_serializable_str79.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str78);
    boolean b82 = linkedlist_abstractcollection_card55.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str79);
    boolean b83 = linkedlist_stream_spliterator_card5.remove((java.lang.Object)arraylist_iterable_entry_serializable_str79);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card87 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card88 = hashmap_iterable_entry_serializable_str_spliterator_card87.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card89 = collection_spliterator_card88.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card90 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b91 = linkedlist_stream_spliterator_card90.add(stream_spliterator_card89);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card94 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card95 = hashmap_iterable_entry_serializable_str_spliterator_card94.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card96 = collection_spliterator_card95.stream();
    linkedlist_stream_spliterator_card90.addFirst(stream_spliterator_card96);
    // The following exception was thrown during execution in test generation
    try {
    linkedlist_stream_spliterator_card5.add((int)'a', stream_spliterator_card96);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card96);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> listiterator_arraylist_entry_serializable_str2 = linkedlist_arraylist_entry_serializable_str0.listIterator(83);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    org.cs362.dominion.Card.Type type96 = org.cs362.dominion.Card.Type.ACTION;
    java.lang.Integer i97 = hashmap_player_i95.get((java.lang.Object)type96);
    java.util.Set<org.cs362.dominion.Player> set_player98 = hashmap_player_i95.keySet();
    java.util.Set<org.cs362.dominion.Player> set_player99 = hashmap_player_i95.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    org.junit.Assert.assertTrue("'" + type96 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type96.equals(org.cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_player98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_player99);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = org.cs362.dominion.Randomness.nextRandomInt((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    java.lang.String str3 = hashmap_serializable_str1.get((java.lang.Object)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str1);
    java.util.Set<java.io.Serializable> set_serializable5 = hashmap_serializable_str1.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_serializable5);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    int i17 = arraylist_card15.size();
    java.util.RandomAccess[] randomAccess_array18 = new java.util.RandomAccess[] { arraylist_card10, arraylist_card15 };
    java.util.RandomAccess[] randomAccess_array19 = arraylist_card5.toArray(randomAccess_array18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName20);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str23 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b25 = hashmap_serializable_str23.equals((java.lang.Object)1.0d);
    int i26 = hashmap_serializable_str23.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str27 = hashmap_serializable_str23.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str29 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b31 = hashmap_serializable_str29.equals((java.lang.Object)1.0d);
    hashmap_serializable_str23.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str29);
    java.util.HashMap[] hashMap_array34 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array35 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array34;
    hashmap_serializable_str_array35[0] = hashmap_serializable_str29;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array38 = arraylist_card5.toArray(hashmap_serializable_str_array35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b40 = arraylist_abstractcollection_card39.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card41 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card39);
    java.lang.Object[] obj_array42 = linkedlist_abstractcollection_card41.toArray();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card78 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b79 = arraylist_abstractcollection_card78.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card44);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card78);
    java.lang.Object[] obj_array81 = linkedlist_abstractcollection_card80.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card82 = linkedlist_abstractcollection_card80.getLast();
    linkedlist_abstractcollection_card41.addFirst(abstractcollection_card82);
    org.cs362.dominion.Card[] card_array84 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card85 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b86 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card85, card_array84);
    org.cs362.dominion.Card.CardName cardName87 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i88 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card85, cardName87);
    java.util.List<org.cs362.dominion.Card> list_card89 = org.cs362.dominion.Card.createCards();
    boolean b90 = arraylist_card85.contains((java.lang.Object)list_card89);
    int i92 = arraylist_card85.indexOf((java.lang.Object)(byte)10);
    boolean b93 = abstractcollection_card82.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card85);
    org.cs362.dominion.GameState gameState94 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card85);
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState94.cards;
    gameState94.initializeGame();
    org.cs362.dominion.GameState gameState97 = gameState94.clone();
    boolean b98 = hashmap_iterable_entry_serializable_str_spliterator_card2.containsValue((java.lang.Object)gameState97);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i99 = gameState97.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    org.junit.Assert.assertTrue("'" + cardName87 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName87.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i99);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.List<org.cs362.dominion.Player> list_player94 = gameState90.players;
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState90.embargo;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card95);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.stream.Stream<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> stream_entry_iterable_entry_serializable_str_spliterator_card1 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.stream();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> entry_iterable_entry_serializable_str_spliterator_card3 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.remove(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_iterable_entry_serializable_str_spliterator_card1);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    org.cs362.dominion.Randomness.reset((long)61);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str0 = new java.util.HashMap<java.io.Serializable,java.lang.String>();
    java.lang.Object obj1 = null;
    boolean b2 = hashmap_serializable_str0.containsValue(obj1);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i7 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    java.util.RandomAccess[] randomAccess_array17 = new java.util.RandomAccess[] { arraylist_card9, arraylist_card14 };
    java.util.RandomAccess[] randomAccess_array18 = arraylist_card4.toArray(randomAccess_array17);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName19);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str22 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b24 = hashmap_serializable_str22.equals((java.lang.Object)1.0d);
    int i25 = hashmap_serializable_str22.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str26 = hashmap_serializable_str22.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    hashmap_serializable_str22.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str28);
    java.util.HashMap[] hashMap_array33 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array33;
    hashmap_serializable_str_array34[0] = hashmap_serializable_str28;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = arraylist_card4.toArray(hashmap_serializable_str_array34);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card38 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b39 = arraylist_abstractcollection_card38.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card4);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card40 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card38);
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card40.toArray();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i46 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    java.util.RandomAccess[] randomAccess_array56 = new java.util.RandomAccess[] { arraylist_card48, arraylist_card53 };
    java.util.RandomAccess[] randomAccess_array57 = arraylist_card43.toArray(randomAccess_array56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card43, cardName58);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str61 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b63 = hashmap_serializable_str61.equals((java.lang.Object)1.0d);
    int i64 = hashmap_serializable_str61.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str65 = hashmap_serializable_str61.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str67 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b69 = hashmap_serializable_str67.equals((java.lang.Object)1.0d);
    hashmap_serializable_str61.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str67);
    java.util.HashMap[] hashMap_array72 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array72;
    hashmap_serializable_str_array73[0] = hashmap_serializable_str67;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = arraylist_card43.toArray(hashmap_serializable_str_array73);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card77 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b78 = arraylist_abstractcollection_card77.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card79 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card77);
    java.lang.Object[] obj_array80 = linkedlist_abstractcollection_card79.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card81 = linkedlist_abstractcollection_card79.getLast();
    linkedlist_abstractcollection_card40.addFirst(abstractcollection_card81);
    org.cs362.dominion.Card[] card_array83 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card84 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b85 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card84, card_array83);
    org.cs362.dominion.Card.CardName cardName86 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i87 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card84, cardName86);
    java.util.List<org.cs362.dominion.Card> list_card88 = org.cs362.dominion.Card.createCards();
    boolean b89 = arraylist_card84.contains((java.lang.Object)list_card88);
    int i91 = arraylist_card84.indexOf((java.lang.Object)(byte)10);
    boolean b92 = abstractcollection_card81.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card84);
    org.cs362.dominion.GameState gameState93 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card84);
    java.util.List<org.cs362.dominion.Player> list_player94 = gameState93.players;
    gameState93.initializeGame();
    java.lang.String str96 = gameState93.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i97 = gameState93.gameBoard;
    java.util.Set<org.cs362.dominion.Card> set_card98 = hashmap_card_i97.keySet();
    boolean b99 = hashmap_serializable_str0.containsKey((java.lang.Object)set_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName86.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player94);
    
    // Regression assertion (captures the current behavior of the code)
   
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    java.util.ArrayList<java.util.List<java.lang.String>> arraylist_list_str1 = new java.util.ArrayList<java.util.List<java.lang.String>>((int)(byte)10);
    arraylist_list_str1.ensureCapacity((int)(short)100);
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    int i17 = arraylist_card15.size();
    java.util.RandomAccess[] randomAccess_array18 = new java.util.RandomAccess[] { arraylist_card10, arraylist_card15 };
    java.util.RandomAccess[] randomAccess_array19 = arraylist_card5.toArray(randomAccess_array18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName20);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str23 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b25 = hashmap_serializable_str23.equals((java.lang.Object)1.0d);
    int i26 = hashmap_serializable_str23.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str27 = hashmap_serializable_str23.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str29 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b31 = hashmap_serializable_str29.equals((java.lang.Object)1.0d);
    hashmap_serializable_str23.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str29);
    java.util.HashMap[] hashMap_array34 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array35 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array34;
    hashmap_serializable_str_array35[0] = hashmap_serializable_str29;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array38 = arraylist_card5.toArray(hashmap_serializable_str_array35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b40 = arraylist_abstractcollection_card39.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card41 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card39);
    java.lang.Object[] obj_array42 = linkedlist_abstractcollection_card41.toArray();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    int i56 = arraylist_card54.size();
    java.util.RandomAccess[] randomAccess_array57 = new java.util.RandomAccess[] { arraylist_card49, arraylist_card54 };
    java.util.RandomAccess[] randomAccess_array58 = arraylist_card44.toArray(randomAccess_array57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName59);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str62 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b64 = hashmap_serializable_str62.equals((java.lang.Object)1.0d);
    int i65 = hashmap_serializable_str62.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str66 = hashmap_serializable_str62.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str68 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b70 = hashmap_serializable_str68.equals((java.lang.Object)1.0d);
    hashmap_serializable_str62.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str68);
    java.util.HashMap[] hashMap_array73 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array74 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array73;
    hashmap_serializable_str_array74[0] = hashmap_serializable_str68;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = arraylist_card44.toArray(hashmap_serializable_str_array74);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card78 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b79 = arraylist_abstractcollection_card78.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card44);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card78);
    java.lang.Object[] obj_array81 = linkedlist_abstractcollection_card80.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card82 = linkedlist_abstractcollection_card80.getLast();
    linkedlist_abstractcollection_card41.addFirst(abstractcollection_card82);
    org.cs362.dominion.Card[] card_array84 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card85 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b86 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card85, card_array84);
    org.cs362.dominion.Card.CardName cardName87 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i88 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card85, cardName87);
    java.util.List<org.cs362.dominion.Card> list_card89 = org.cs362.dominion.Card.createCards();
    boolean b90 = arraylist_card85.contains((java.lang.Object)list_card89);
    int i92 = arraylist_card85.indexOf((java.lang.Object)(byte)10);
    boolean b93 = abstractcollection_card82.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card85);
    org.cs362.dominion.GameState gameState94 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card85);
    java.util.List<org.cs362.dominion.Player> list_player95 = gameState94.players;
    gameState94.initializeGame();
    java.lang.String str97 = gameState94.toString();
    java.lang.String str98 = gameState94.toString();
    boolean b99 = arraylist_list_str1.remove((java.lang.Object)str98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    org.junit.Assert.assertTrue("'" + cardName87 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName87.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player95);
    
    // Regression assertion (captures the current behavior of the code)

    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    org.cs362.dominion.GameState gameState93 = gameState90.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i94 = gameState93.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i95 = gameState93.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i95);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.List<org.cs362.dominion.Player> list_player94 = gameState90.players;
    gameState90.initializeGame();
    gameState90.initializeGame();
    gameState90.initializeGame();
    gameState90.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card99 = gameState90.embargo;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card99);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    arraylist_entry_serializable_str0.clear();
    java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_collection_entry_serializable_str3 = new java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b4 = arraylist_collection_entry_serializable_str3.add((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str0);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>> collection_entry_serializable_str6 = arraylist_collection_entry_serializable_str3.get((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    java.lang.Object obj5 = linkedlist_obj0.poll();
    java.lang.Object[] obj_array6 = linkedlist_obj0.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str7 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str8 = arraylist_entry_serializable_str7.stream();
    java.lang.Object obj9 = arraylist_entry_serializable_str7.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i10 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b11 = arraylist_entry_serializable_str7.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i10);
    boolean b12 = linkedlist_obj0.removeAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i10);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> listiterator_entry_player_i14 = arraylist_entry_player_i10.listIterator(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.iterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    linkedlist_abstractcollection_card39.addFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    int i66 = arraylist_card64.size();
    boolean b67 = linkedlist_abstractcollection_card39.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type1 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((int)(short)10);
    java.util.Iterator<java.lang.Comparable<org.cs362.dominion.Card.Type>> iterator_comparable_type2 = arraylist_comparable_type1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_comparable_type2);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b3 = hashmap_serializable_str1.equals((java.lang.Object)1.0d);
    int i4 = hashmap_serializable_str1.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str5 = hashmap_serializable_str1.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str1.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b16 = hashmap_serializable_str14.equals((java.lang.Object)1.0d);
    hashmap_serializable_str8.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str14);
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str8);
    boolean b19 = hashmap_serializable_str1.isEmpty();
    java.lang.String str21 = hashmap_serializable_str1.remove((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str23 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b25 = hashmap_serializable_str23.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str26 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str23);
    boolean b27 = hashmap_serializable_str23.isEmpty();
    hashmap_serializable_str1.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    int i9 = arraylist_card7.size();
    org.cs362.dominion.Card card10 = null;
    boolean b11 = arraylist_card7.add(card10);
    gameState4.cards = arraylist_card7;
    java.lang.String str13 = gameState4.toString();
    gameState4.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b7 = arraylist_comparable_str6.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b8 = arraylist_comparable_str6.add((java.lang.Comparable<java.lang.String>)"");
    boolean b9 = arraylist_comparable_str6.add((java.lang.Comparable<java.lang.String>)"");
    boolean b10 = arraylist_comparable_str6.add((java.lang.Comparable<java.lang.String>)"[]");
    boolean b11 = arraylist_comparable_str6.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b12 = arraylist_comparable_str6.add((java.lang.Comparable<java.lang.String>)"{}");
    java.lang.Comparable<java.lang.String> comparable_str13 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str6);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str15 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    int i16 = arraylist_comparable_str6.lastIndexOf((java.lang.Object)'4');
    java.util.stream.Stream<java.lang.Comparable<java.lang.String>> stream_comparable_str17 = arraylist_comparable_str6.stream();
    java.util.function.UnaryOperator<java.lang.Comparable<java.lang.String>> unaryoperator_comparable_str18 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_comparable_str6.replaceAll(unaryoperator_comparable_str18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_comparable_str17);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    org.cs362.dominion.Card card7 = null;
    player2.discard(card7);
    org.cs362.dominion.Card card9 = null;
    player2.discard(card9);
    
    // Regression assertion (captures the current behavior of the code)
 
  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.pollLast();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card5 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b9 = hashmap_serializable_str7.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str7);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str12 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b14 = hashmap_serializable_str12.equals((java.lang.Object)1.0d);
    int i15 = hashmap_serializable_str12.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str16 = hashmap_serializable_str12.entrySet();
    boolean b17 = hashmap_serializable_str10.equals((java.lang.Object)set_entry_serializable_str16);
    boolean b18 = arraylist_abstractcollection_card5.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str16);
    java.lang.Object[] obj_array19 = arraylist_abstractcollection_card5.toArray();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    int i23 = arraylist_card21.size();
    boolean b25 = arraylist_card21.equals((java.lang.Object)(-1.0f));
    boolean b26 = arraylist_abstractcollection_card5.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card27 = arraylist_abstractcollection_card5.spliterator();
    boolean b28 = linkedlist_obj0.offerFirst((java.lang.Object)spliterator_abstractcollection_card27);
    java.lang.Object obj29 = linkedlist_obj0.getLast();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card30 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str31 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str32 = arraylist_entry_serializable_str31.parallelStream();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card33 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Village;
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card35 = hashmap_iterable_entry_serializable_str_spliterator_card33.remove((java.lang.Object)cardName34);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str39);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    int i47 = hashmap_serializable_str44.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str48 = hashmap_serializable_str44.entrySet();
    boolean b49 = hashmap_serializable_str42.equals((java.lang.Object)set_entry_serializable_str48);
    boolean b50 = arraylist_abstractcollection_card37.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str48);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card52 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card53 = arraylist_abstractcollection_card52.spliterator();
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i59 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName58);
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.createCards();
    boolean b61 = arraylist_card56.contains((java.lang.Object)list_card60);
    arraylist_abstractcollection_card52.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card56);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    org.cs362.dominion.Card.CardName cardName66 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i67 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card64, cardName66);
    java.util.List<org.cs362.dominion.Card> list_card68 = org.cs362.dominion.Card.createCards();
    boolean b69 = arraylist_card64.contains((java.lang.Object)list_card68);
    org.cs362.dominion.Card.Type type70 = null;
    java.util.List<org.cs362.dominion.Card> list_card71 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card68, type70);
    boolean b72 = arraylist_card56.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card68);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card73 = arraylist_card56.spliterator();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card74 = hashmap_iterable_entry_serializable_str_spliterator_card33.putIfAbsent((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str48, spliterator_card73);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card75 = hashmap_iterable_entry_serializable_str_spliterator_card30.put((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str31, spliterator_card74);
    boolean b76 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str32);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName66.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_collection_entry_serializable_str0 = new java.util.ArrayList<java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    // The following exception was thrown during execution in test generation
    try {
    arraylist_collection_entry_serializable_str0.add(83, (java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)arraylist_entry_serializable_str2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    java.lang.Object obj5 = linkedlist_obj0.poll();
    java.util.Iterator<java.lang.Object> iterator_obj6 = linkedlist_obj0.iterator();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable8 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(short)10);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type9 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type10 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness11 = new org.cs362.dominion.Randomness();
    int i12 = randomness11.main();
    int i13 = randomness11.main();
    int i14 = randomness11.main();
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type16 = hashmap_randomness_type10.put(randomness11, type15);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type17 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness18 = new org.cs362.dominion.Randomness();
    int i19 = randomness18.main();
    int i20 = randomness18.main();
    int i21 = randomness18.main();
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type23 = hashmap_randomness_type17.put(randomness18, type22);
    org.cs362.dominion.Card.Type type24 = hashmap_randomness_type9.put(randomness11, type22);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    int i28 = arraylist_card26.size();
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState29.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState29.gameBoard;
    java.lang.String str32 = hashmap_card_i31.toString();
    java.lang.Cloneable cloneable33 = hashmap_type_cloneable8.putIfAbsent(type22, (java.lang.Cloneable)hashmap_card_i31);
    boolean b34 = linkedlist_obj0.offer((java.lang.Object)type22);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj36 = linkedlist_obj0.remove((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type15.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type22.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "{}"+ "'", str32.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card card6 = null;
    boolean b7 = arraylist_card4.add(card6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card45.pollFirst();
    boolean b47 = arraylist_card4.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card45);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card48 = arraylist_card4.listIterator();
    boolean b49 = linkedlist_obj0.equals((java.lang.Object)listiterator_card48);
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    int i53 = arraylist_card51.size();
    org.cs362.dominion.GameState gameState54 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i55 = gameState54.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState54.gameBoard;
    boolean b57 = hashmap_card_i56.isEmpty();
    org.cs362.dominion.GameState gameState58 = null;
    org.cs362.dominion.Player player60 = new org.cs362.dominion.Player(gameState58, "hi!");
    boolean b61 = hashmap_card_i56.containsKey((java.lang.Object)gameState58);
    boolean b62 = linkedlist_obj0.add((java.lang.Object)b61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = gameState4.gameBoard;
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card card10 = null;
    boolean b11 = arraylist_card8.add(card10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    java.util.RandomAccess[] randomAccess_array26 = new java.util.RandomAccess[] { arraylist_card18, arraylist_card23 };
    java.util.RandomAccess[] randomAccess_array27 = arraylist_card13.toArray(randomAccess_array26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName28);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    int i34 = hashmap_serializable_str31.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str35 = hashmap_serializable_str31.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b39 = hashmap_serializable_str37.equals((java.lang.Object)1.0d);
    hashmap_serializable_str31.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str37);
    java.util.HashMap[] hashMap_array42 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array42;
    hashmap_serializable_str_array43[0] = hashmap_serializable_str37;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = arraylist_card13.toArray(hashmap_serializable_str_array43);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card47 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b48 = arraylist_abstractcollection_card47.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card49 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card47);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card50 = linkedlist_abstractcollection_card49.pollFirst();
    boolean b51 = arraylist_card8.retainAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card49);
    boolean b52 = hashmap_card_i6.containsValue((java.lang.Object)b51);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i57 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card54, cardName56);
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    int i66 = arraylist_card64.size();
    java.util.RandomAccess[] randomAccess_array67 = new java.util.RandomAccess[] { arraylist_card59, arraylist_card64 };
    java.util.RandomAccess[] randomAccess_array68 = arraylist_card54.toArray(randomAccess_array67);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card70 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card54, cardName69);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str72 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b74 = hashmap_serializable_str72.equals((java.lang.Object)1.0d);
    int i75 = hashmap_serializable_str72.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str76 = hashmap_serializable_str72.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str78 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b80 = hashmap_serializable_str78.equals((java.lang.Object)1.0d);
    hashmap_serializable_str72.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str78);
    java.util.HashMap[] hashMap_array83 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array84 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array83;
    hashmap_serializable_str_array84[0] = hashmap_serializable_str78;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array87 = arraylist_card54.toArray(hashmap_serializable_str_array84);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card88 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b89 = arraylist_abstractcollection_card88.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card54);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card90 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card88);
    java.lang.Object[] obj_array91 = linkedlist_abstractcollection_card90.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card92 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card90);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card93 = linkedlist_abstractcollection_card92.remove();
    boolean b94 = hashmap_card_i6.containsValue((java.lang.Object)linkedlist_abstractcollection_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness2 = new org.cs362.dominion.Randomness();
    int i3 = randomness2.main();
    int i4 = arraylist_abstractcollection_card1.lastIndexOf((java.lang.Object)i3);
    java.lang.Object obj5 = arraylist_abstractcollection_card1.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    int i20 = arraylist_card18.size();
    java.util.RandomAccess[] randomAccess_array21 = new java.util.RandomAccess[] { arraylist_card13, arraylist_card18 };
    java.util.RandomAccess[] randomAccess_array22 = arraylist_card8.toArray(randomAccess_array21);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName23);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str26 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b28 = hashmap_serializable_str26.equals((java.lang.Object)1.0d);
    int i29 = hashmap_serializable_str26.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str30 = hashmap_serializable_str26.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str32 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b34 = hashmap_serializable_str32.equals((java.lang.Object)1.0d);
    hashmap_serializable_str26.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str32);
    java.util.HashMap[] hashMap_array37 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array38 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array37;
    hashmap_serializable_str_array38[0] = hashmap_serializable_str32;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array41 = arraylist_card8.toArray(hashmap_serializable_str_array38);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card42 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b43 = arraylist_abstractcollection_card42.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card8);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card44 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card42);
    java.lang.Object[] obj_array45 = linkedlist_abstractcollection_card44.toArray();
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    org.cs362.dominion.Card.CardName cardName54 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i55 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card52, cardName54);
    org.cs362.dominion.Card[] card_array56 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card57, card_array56);
    int i59 = arraylist_card57.size();
    java.util.RandomAccess[] randomAccess_array60 = new java.util.RandomAccess[] { arraylist_card52, arraylist_card57 };
    java.util.RandomAccess[] randomAccess_array61 = arraylist_card47.toArray(randomAccess_array60);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card63 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName62);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str65 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b67 = hashmap_serializable_str65.equals((java.lang.Object)1.0d);
    int i68 = hashmap_serializable_str65.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str69 = hashmap_serializable_str65.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str71 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b73 = hashmap_serializable_str71.equals((java.lang.Object)1.0d);
    hashmap_serializable_str65.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str71);
    java.util.HashMap[] hashMap_array76 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array77 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array76;
    hashmap_serializable_str_array77[0] = hashmap_serializable_str71;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array80 = arraylist_card47.toArray(hashmap_serializable_str_array77);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card81 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b82 = arraylist_abstractcollection_card81.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card47);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card81);
    java.lang.Object[] obj_array84 = linkedlist_abstractcollection_card83.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card83.getLast();
    linkedlist_abstractcollection_card44.addFirst(abstractcollection_card85);
    org.cs362.dominion.Card[] card_array87 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card88 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card88, card_array87);
    org.cs362.dominion.Card.CardName cardName90 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i91 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card88, cardName90);
    java.util.List<org.cs362.dominion.Card> list_card92 = org.cs362.dominion.Card.createCards();
    boolean b93 = arraylist_card88.contains((java.lang.Object)list_card92);
    int i95 = arraylist_card88.indexOf((java.lang.Object)(byte)10);
    boolean b96 = abstractcollection_card85.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card88);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card97 = arraylist_abstractcollection_card1.set((-1), (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card88);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName54.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    org.junit.Assert.assertTrue("'" + cardName90 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName90.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    java.lang.Object obj41 = linkedlist_abstractcollection_card39.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card39.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card43);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i91 = gameState90.getWinners();
    java.lang.Object obj92 = hashmap_player_i91.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj92);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i95 = gameState90.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card96 = gameState90.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card96);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    org.cs362.dominion.Randomness.totalCallsToRandom = (byte)10;

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    java.util.ArrayList<java.util.List<java.lang.String>> arraylist_list_str1 = new java.util.ArrayList<java.util.List<java.lang.String>>((int)(byte)10);
    arraylist_list_str1.ensureCapacity((int)(short)100);
    java.lang.String[] str_array5 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str6 = new java.util.ArrayList<java.lang.String>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str6, str_array5);
    java.lang.Object obj8 = arraylist_str6.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable9 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card12 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card13 = arraylist_abstractcollection_card12.spliterator();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i19 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.createCards();
    boolean b21 = arraylist_card16.contains((java.lang.Object)list_card20);
    arraylist_abstractcollection_card12.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i27 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    int i36 = arraylist_card34.size();
    java.util.RandomAccess[] randomAccess_array37 = new java.util.RandomAccess[] { arraylist_card29, arraylist_card34 };
    java.util.RandomAccess[] randomAccess_array38 = arraylist_card24.toArray(randomAccess_array37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName39);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b44 = hashmap_serializable_str42.equals((java.lang.Object)1.0d);
    int i45 = hashmap_serializable_str42.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str46 = hashmap_serializable_str42.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str48 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b50 = hashmap_serializable_str48.equals((java.lang.Object)1.0d);
    hashmap_serializable_str42.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str48);
    java.util.HashMap[] hashMap_array53 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array53;
    hashmap_serializable_str_array54[0] = hashmap_serializable_str48;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array57 = arraylist_card24.toArray(hashmap_serializable_str_array54);
    boolean b58 = hashmap_type_cloneable9.replace(type10, (java.lang.Cloneable)arraylist_card16, (java.lang.Cloneable)hashmap_serializable_str_array57);
    java.util.Set<org.cs362.dominion.Card.Type> set_type59 = hashmap_type_cloneable9.keySet();
    boolean b60 = arraylist_str6.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type59);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type61 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type59);
    arraylist_comparable_type61.ensureCapacity(61);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i64 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array65 = arraylist_entry_player_i64.toArray();
    boolean b66 = arraylist_comparable_type61.containsAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i64);
    java.util.stream.Stream<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> stream_entry_player_i67 = arraylist_entry_player_i64.parallelStream();
    java.util.LinkedList<java.lang.Object> linkedlist_obj68 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = linkedlist_obj68.offerLast((java.lang.Object)arraylist_card69);
    java.lang.Object obj71 = linkedlist_obj68.removeLast();
    boolean b72 = linkedlist_obj68.isEmpty();
    java.lang.Object obj73 = linkedlist_obj68.poll();
    java.lang.Object[] obj_array74 = linkedlist_obj68.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str75 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str76 = arraylist_entry_serializable_str75.stream();
    java.lang.Object obj77 = arraylist_entry_serializable_str75.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i78 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b79 = arraylist_entry_serializable_str75.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i78);
    boolean b80 = linkedlist_obj68.removeAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i78);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i81 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array82 = arraylist_entry_player_i81.toArray();
    java.util.List[] list_array84 = new java.util.List[ 3 ];
    @SuppressWarnings("unchecked")
    java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] list_entry_player_i_array85 = (java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[])list_array84;
    list_entry_player_i_array85[0] = arraylist_entry_player_i64;
    list_entry_player_i_array85[1] = arraylist_entry_player_i78;
    list_entry_player_i_array85[2] = arraylist_entry_player_i81;
    java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] list_entry_player_i_array92 = arraylist_list_str1.toArray(list_entry_player_i_array85);
    arraylist_list_str1.ensureCapacity((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type10.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_player_i67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_entry_player_i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_entry_player_i_array92);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }

    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>(0, (float)10);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }

    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type0 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<org.cs362.dominion.Card.Type> set_type1 = linkedlist_set_type0.pop();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i91 = gameState90.getWinners();
    org.cs362.dominion.Player player92 = null;
    gameState90.addPlayer(player92);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i91);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    arraylist_card1.ensureCapacity((int)' ');
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable7 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(byte)100);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.lang.Object[] obj_array46 = linkedlist_abstractcollection_card45.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card47 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card45);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card48 = linkedlist_abstractcollection_card47.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card49 = linkedlist_abstractcollection_card47.peekFirst();
    java.lang.Cloneable cloneable50 = hashmap_type_cloneable7.get((java.lang.Object)abstractcollection_card49);
    org.cs362.dominion.Card.Type type51 = org.cs362.dominion.Card.Type.VICTORY;
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    player54.playTreasureCard();
    player54.playKingdomCard();
    java.lang.Cloneable cloneable57 = hashmap_type_cloneable7.put(type51, (java.lang.Cloneable)player54);
    java.util.List<org.cs362.dominion.Card> list_card58 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type51);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card59 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    boolean b61 = hashmap_iterable_entry_serializable_str_spliterator_card59.containsKey((java.lang.Object)cardName60);
    int i62 = org.cs362.dominion.Card.getCardIndex(list_card58, cardName60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type51.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }

    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str0 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b2 = arraylist_arraylist_comparable_str0.add(arraylist_comparable_str1);
    java.util.Iterator<java.lang.Comparable<java.lang.String>> iterator_comparable_str3 = arraylist_comparable_str1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_comparable_str3);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }

    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type0 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<org.cs362.dominion.Card.Type> set_type1 = linkedlist_set_type0.getLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    boolean b42 = hashmap_type_cloneable1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card2 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card3 = arraylist_abstractcollection_card2.spliterator();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.createCards();
    boolean b11 = arraylist_card6.contains((java.lang.Object)list_card10);
    arraylist_abstractcollection_card2.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    boolean b18 = arraylist_card14.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    boolean b28 = arraylist_card24.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i33 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    int i42 = arraylist_card40.size();
    java.util.RandomAccess[] randomAccess_array43 = new java.util.RandomAccess[] { arraylist_card35, arraylist_card40 };
    java.util.RandomAccess[] randomAccess_array44 = arraylist_card30.toArray(randomAccess_array43);
    arraylist_card30.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card46 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b47 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    boolean b48 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card14);
    boolean b49 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card20);
    boolean b50 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card24);
    boolean b51 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card30);
    int i53 = linkedlist_abstractcollection_card46.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card56 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card57 = arraylist_abstractcollection_card56.spliterator();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i63 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card60, cardName62);
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.createCards();
    boolean b65 = arraylist_card60.contains((java.lang.Object)list_card64);
    arraylist_abstractcollection_card56.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card60);
    arraylist_abstractcollection_card56.clear();
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    int i71 = arraylist_card69.size();
    boolean b72 = arraylist_abstractcollection_card56.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card73 = linkedlist_abstractcollection_card46.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    boolean b74 = linkedlist_stream_spliterator_card0.removeFirstOccurrence((java.lang.Object)linkedlist_abstractcollection_card46);
    // The following exception was thrown during execution in test generation
    try {
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card75 = linkedlist_stream_spliterator_card0.removeLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i92 = gameState90.play();
    java.util.Collection<java.lang.Integer> collection_i93 = hashmap_player_i92.values();
    java.util.Set<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> set_entry_player_i94 = hashmap_player_i92.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_i93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_player_i94);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.util.Iterator<java.lang.Object> iterator_obj3 = linkedlist_obj0.descendingIterator();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card5 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b9 = hashmap_serializable_str7.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str7);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str12 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b14 = hashmap_serializable_str12.equals((java.lang.Object)1.0d);
    int i15 = hashmap_serializable_str12.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str16 = hashmap_serializable_str12.entrySet();
    boolean b17 = hashmap_serializable_str10.equals((java.lang.Object)set_entry_serializable_str16);
    boolean b18 = arraylist_abstractcollection_card5.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str16);
    java.lang.Object[] obj_array19 = arraylist_abstractcollection_card5.toArray();
    boolean b20 = arraylist_abstractcollection_card5.isEmpty();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.Card card24 = null;
    boolean b25 = arraylist_card22.add(card24);
    boolean b26 = arraylist_abstractcollection_card5.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card28 = arraylist_card22.listIterator((int)(byte)0);
    arraylist_card22.ensureCapacity((int)(byte)10);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState31.cards;
    boolean b33 = linkedlist_obj0.contains((java.lang.Object)list_card32);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card36 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str41 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str38);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str43 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b45 = hashmap_serializable_str43.equals((java.lang.Object)1.0d);
    int i46 = hashmap_serializable_str43.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str47 = hashmap_serializable_str43.entrySet();
    boolean b48 = hashmap_serializable_str41.equals((java.lang.Object)set_entry_serializable_str47);
    boolean b49 = arraylist_abstractcollection_card36.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str47);
    java.lang.Object[] obj_array50 = arraylist_abstractcollection_card36.toArray();
    java.lang.Object obj51 = arraylist_abstractcollection_card36.clone();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj52 = linkedlist_obj0.set((int)(byte)-1, obj51);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card55 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card56 = arraylist_abstractcollection_card55.spliterator();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.createCards();
    boolean b64 = arraylist_card59.contains((java.lang.Object)list_card63);
    arraylist_abstractcollection_card55.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card59);
    arraylist_abstractcollection_card55.clear();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    int i70 = arraylist_card68.size();
    boolean b71 = arraylist_abstractcollection_card55.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card72 = linkedlist_abstractcollection_card45.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card75 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str77 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b79 = hashmap_serializable_str77.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str80 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str77);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str82 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b84 = hashmap_serializable_str82.equals((java.lang.Object)1.0d);
    int i85 = hashmap_serializable_str82.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str86 = hashmap_serializable_str82.entrySet();
    boolean b87 = hashmap_serializable_str80.equals((java.lang.Object)set_entry_serializable_str86);
    boolean b88 = arraylist_abstractcollection_card75.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str86);
    java.lang.Object[] obj_array89 = arraylist_abstractcollection_card75.toArray();
    boolean b90 = arraylist_abstractcollection_card75.isEmpty();
    org.cs362.dominion.Card[] card_array91 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card92 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b93 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92, card_array91);
    org.cs362.dominion.Card card94 = null;
    boolean b95 = arraylist_card92.add(card94);
    boolean b96 = arraylist_abstractcollection_card75.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92);
    linkedlist_abstractcollection_card45.add(0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card92);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card98 = arraylist_card92.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_card98);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }

    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card0 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card1 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card0);
    java.util.ArrayList<java.util.List<java.lang.String>> arraylist_list_str3 = new java.util.ArrayList<java.util.List<java.lang.String>>((int)(byte)10);
    arraylist_list_str3.ensureCapacity((int)(short)100);
    java.lang.String[] str_array7 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str8 = new java.util.ArrayList<java.lang.String>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str8, str_array7);
    java.lang.Object obj10 = arraylist_str8.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable11 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card14 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card15 = arraylist_abstractcollection_card14.spliterator();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.createCards();
    boolean b23 = arraylist_card18.contains((java.lang.Object)list_card22);
    arraylist_abstractcollection_card14.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i34 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    int i38 = arraylist_card36.size();
    java.util.RandomAccess[] randomAccess_array39 = new java.util.RandomAccess[] { arraylist_card31, arraylist_card36 };
    java.util.RandomAccess[] randomAccess_array40 = arraylist_card26.toArray(randomAccess_array39);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName41);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    int i47 = hashmap_serializable_str44.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str48 = hashmap_serializable_str44.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str50 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b52 = hashmap_serializable_str50.equals((java.lang.Object)1.0d);
    hashmap_serializable_str44.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str50);
    java.util.HashMap[] hashMap_array55 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array56 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array55;
    hashmap_serializable_str_array56[0] = hashmap_serializable_str50;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array59 = arraylist_card26.toArray(hashmap_serializable_str_array56);
    boolean b60 = hashmap_type_cloneable11.replace(type12, (java.lang.Cloneable)arraylist_card18, (java.lang.Cloneable)hashmap_serializable_str_array59);
    java.util.Set<org.cs362.dominion.Card.Type> set_type61 = hashmap_type_cloneable11.keySet();
    boolean b62 = arraylist_str8.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type61);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type63 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type61);
    arraylist_comparable_type63.ensureCapacity(61);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i66 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array67 = arraylist_entry_player_i66.toArray();
    boolean b68 = arraylist_comparable_type63.containsAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i66);
    java.util.stream.Stream<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> stream_entry_player_i69 = arraylist_entry_player_i66.parallelStream();
    java.util.LinkedList<java.lang.Object> linkedlist_obj70 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card71 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b72 = linkedlist_obj70.offerLast((java.lang.Object)arraylist_card71);
    java.lang.Object obj73 = linkedlist_obj70.removeLast();
    boolean b74 = linkedlist_obj70.isEmpty();
    java.lang.Object obj75 = linkedlist_obj70.poll();
    java.lang.Object[] obj_array76 = linkedlist_obj70.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str77 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str78 = arraylist_entry_serializable_str77.stream();
    java.lang.Object obj79 = arraylist_entry_serializable_str77.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i80 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b81 = arraylist_entry_serializable_str77.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i80);
    boolean b82 = linkedlist_obj70.removeAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i80);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i83 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array84 = arraylist_entry_player_i83.toArray();
    java.util.List[] list_array86 = new java.util.List[ 3 ];
    @SuppressWarnings("unchecked")
    java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] list_entry_player_i_array87 = (java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[])list_array86;
    list_entry_player_i_array87[0] = arraylist_entry_player_i66;
    list_entry_player_i_array87[1] = arraylist_entry_player_i80;
    list_entry_player_i_array87[2] = arraylist_entry_player_i83;
    java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] list_entry_player_i_array94 = arraylist_list_str3.toArray(list_entry_player_i_array87);
    java.lang.Iterable<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] iterable_entry_player_i_array95 = linkedlist_abstractcollection_card0.toArray((java.lang.Iterable<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[])list_entry_player_i_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type12.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_player_i69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_entry_player_i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_entry_player_i_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterable_entry_player_i_array95);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.peekFirst();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable17 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i22 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i27 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    int i31 = arraylist_card29.size();
    java.util.RandomAccess[] randomAccess_array32 = new java.util.RandomAccess[] { arraylist_card24, arraylist_card29 };
    java.util.RandomAccess[] randomAccess_array33 = arraylist_card19.toArray(randomAccess_array32);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName34);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b39 = hashmap_serializable_str37.equals((java.lang.Object)1.0d);
    int i40 = hashmap_serializable_str37.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str41 = hashmap_serializable_str37.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str43 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b45 = hashmap_serializable_str43.equals((java.lang.Object)1.0d);
    hashmap_serializable_str37.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str43);
    java.util.HashMap[] hashMap_array48 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array49 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array48;
    hashmap_serializable_str_array49[0] = hashmap_serializable_str43;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array52 = arraylist_card19.toArray(hashmap_serializable_str_array49);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card53 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b54 = arraylist_abstractcollection_card53.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card55 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card53);
    java.lang.Object[] obj_array56 = linkedlist_abstractcollection_card55.toArray();
    boolean b57 = hashmap_type_cloneable17.containsKey((java.lang.Object)linkedlist_abstractcollection_card55);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card58 = linkedlist_abstractcollection_card55.pollLast();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card card62 = null;
    boolean b63 = arraylist_card60.add(card62);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str65 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b67 = hashmap_serializable_str65.equals((java.lang.Object)1.0d);
    int i68 = hashmap_serializable_str65.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str69 = hashmap_serializable_str65.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str65.entrySet();
    boolean b71 = arraylist_card60.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str70);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str73 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b75 = hashmap_serializable_str73.equals((java.lang.Object)1.0d);
    int i76 = hashmap_serializable_str73.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str77 = hashmap_serializable_str73.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str78 = hashmap_serializable_str73.entrySet();
    java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_iterable_entry_serializable_str79 = new java.util.ArrayList<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    boolean b80 = arraylist_iterable_entry_serializable_str79.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str70);
    boolean b81 = arraylist_iterable_entry_serializable_str79.add((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str78);
    boolean b82 = linkedlist_abstractcollection_card55.retainAll((java.util.Collection<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)arraylist_iterable_entry_serializable_str79);
    boolean b83 = linkedlist_stream_spliterator_card5.remove((java.lang.Object)arraylist_iterable_entry_serializable_str79);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card86 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card87 = hashmap_iterable_entry_serializable_str_spliterator_card86.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card88 = collection_spliterator_card87.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card89 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b90 = linkedlist_stream_spliterator_card89.add(stream_spliterator_card88);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card93 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card94 = hashmap_iterable_entry_serializable_str_spliterator_card93.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card95 = collection_spliterator_card94.stream();
    linkedlist_stream_spliterator_card89.addFirst(stream_spliterator_card95);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card97 = linkedlist_stream_spliterator_card89.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card98 = linkedlist_stream_spliterator_card89.getLast();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card98);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }

    java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_entry_randomAccess_array_set_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> entry_randomAccess_array_set_entry_serializable_str1 = null;
    boolean b2 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.add(entry_randomAccess_array_set_entry_serializable_str1);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> entry_randomAccess_array_set_entry_serializable_str4 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.get((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object obj2 = arraylist_entry_serializable_str0.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i3 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b4 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i3);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card7 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card8 = hashmap_iterable_entry_serializable_str_spliterator_card7.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card9 = collection_spliterator_card8.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card10 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b11 = linkedlist_stream_spliterator_card10.add(stream_spliterator_card9);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card14 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card15 = hashmap_iterable_entry_serializable_str_spliterator_card14.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card16 = collection_spliterator_card15.stream();
    linkedlist_stream_spliterator_card10.addFirst(stream_spliterator_card16);
    boolean b18 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)linkedlist_stream_spliterator_card10);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card54 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b55 = arraylist_abstractcollection_card54.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card20);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card56 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card54);
    java.lang.Object[] obj_array57 = linkedlist_abstractcollection_card56.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card58 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card56);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card59 = linkedlist_abstractcollection_card58.element();
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.Card card63 = null;
    boolean b64 = arraylist_card61.add(card63);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    int i69 = hashmap_serializable_str66.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str66.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str71 = hashmap_serializable_str66.entrySet();
    boolean b72 = arraylist_card61.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str71);
    linkedlist_abstractcollection_card58.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card61);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card74 = linkedlist_abstractcollection_card58.removeLast();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card75 = linkedlist_abstractcollection_card58.removeLast();
    int i76 = linkedlist_stream_spliterator_card10.lastIndexOf((java.lang.Object)linkedlist_abstractcollection_card58);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card78 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card79 = arraylist_abstractcollection_card78.spliterator();
    org.cs362.dominion.Card[] card_array81 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card82 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card82, card_array81);
    org.cs362.dominion.Card.CardName cardName84 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i85 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card82, cardName84);
    java.util.List<org.cs362.dominion.Card> list_card86 = org.cs362.dominion.Card.createCards();
    boolean b87 = arraylist_card82.contains((java.lang.Object)list_card86);
    arraylist_abstractcollection_card78.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card82);
    java.lang.String str89 = arraylist_card82.toString();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str90 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str91 = arraylist_entry_serializable_str90.stream();
    java.lang.Object[] obj_array92 = arraylist_entry_serializable_str90.toArray();
    boolean b93 = arraylist_card82.equals((java.lang.Object)obj_array92);
    linkedlist_abstractcollection_card58.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName84.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "[]"+ "'", str89.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }

    java.util.ArrayList<java.util.AbstractList<java.lang.Object>> arraylist_abstractlist_obj0 = new java.util.ArrayList<java.util.AbstractList<java.lang.Object>>();
    java.util.Iterator<java.util.AbstractList<java.lang.Object>> iterator_abstractlist_obj1 = arraylist_abstractlist_obj0.iterator();
    java.lang.Object obj2 = null;
    boolean b3 = arraylist_abstractlist_obj0.remove(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractlist_obj1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    hashmap_player_i5.clear();
    org.cs362.dominion.GameState gameState7 = null;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState7, "hi!");
    player9.buyCard();
    java.lang.String str11 = player9.toString();
    player9.playKingdomCard();
    player9.playKingdomCard();
    java.lang.Integer i15 = hashmap_player_i5.replace(player9, (java.lang.Integer)10);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card17 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str22 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str19);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    boolean b29 = hashmap_serializable_str22.equals((java.lang.Object)set_entry_serializable_str28);
    boolean b30 = arraylist_abstractcollection_card17.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str28);
    java.lang.Object[] obj_array31 = arraylist_abstractcollection_card17.toArray();
    boolean b32 = arraylist_abstractcollection_card17.isEmpty();
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card card36 = null;
    boolean b37 = arraylist_card34.add(card36);
    boolean b38 = arraylist_abstractcollection_card17.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card40 = arraylist_card34.listIterator((int)(byte)0);
    arraylist_card34.ensureCapacity((int)(byte)10);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState43.cards;
    boolean b45 = hashmap_player_i5.containsValue((java.lang.Object)gameState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)

    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i91 = gameState90.getWinners();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState90.gameBoard;
    org.cs362.dominion.Card card93 = null;
    java.lang.Integer i95 = hashmap_card_i92.putIfAbsent(card93, (java.lang.Integer)61);
    java.util.Collection<java.lang.Integer> collection_i96 = hashmap_card_i92.values();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_i96);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }

    java.util.HashMap<java.util.Collection<java.lang.Integer>,java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>> hashmap_collection_i_iterable_comparable_type1 = new java.util.HashMap<java.util.Collection<java.lang.Integer>,java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>>((int)(byte)100);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card58 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName57);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str60 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b62 = hashmap_serializable_str60.equals((java.lang.Object)1.0d);
    int i63 = hashmap_serializable_str60.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str64 = hashmap_serializable_str60.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    hashmap_serializable_str60.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str66);
    java.util.HashMap[] hashMap_array71 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array72 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array71;
    hashmap_serializable_str_array72[0] = hashmap_serializable_str66;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = arraylist_card42.toArray(hashmap_serializable_str_array72);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card76 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b77 = arraylist_abstractcollection_card76.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card78 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card76);
    java.lang.Object[] obj_array79 = linkedlist_abstractcollection_card78.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card80 = linkedlist_abstractcollection_card78.getLast();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card80);
    org.cs362.dominion.Card[] card_array82 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card83 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83, card_array82);
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i86 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card83, cardName85);
    java.util.List<org.cs362.dominion.Card> list_card87 = org.cs362.dominion.Card.createCards();
    boolean b88 = arraylist_card83.contains((java.lang.Object)list_card87);
    int i90 = arraylist_card83.indexOf((java.lang.Object)(byte)10);
    boolean b91 = abstractcollection_card80.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83);
    org.cs362.dominion.GameState gameState92 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card83);
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState92.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState92.play();
    java.util.Collection<java.lang.Integer> collection_i95 = hashmap_player_i94.values();
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type97 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((int)(short)100);
    java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>> iterable_comparable_type98 = hashmap_collection_i_iterable_comparable_type1.put(collection_i95, (java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>)arraylist_comparable_type97);
    java.lang.String str99 = hashmap_collection_i_iterable_comparable_type1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iterable_comparable_type98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "{[]=[]}"+ "'", str99.equals("{[]=[]}"));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }

    java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_entry_randomAccess_array_set_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> entry_randomAccess_array_set_entry_serializable_str1 = null;
    boolean b2 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.add(entry_randomAccess_array_set_entry_serializable_str1);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> list_entry_randomAccess_array_set_entry_serializable_str5 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.subList((int)(short)10, (int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }

    java.util.ArrayList<java.util.List<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>> arraylist_list_entry_randomAccess_array_set_entry_serializable_str1 = new java.util.ArrayList<java.util.List<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>>(83);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> list_entry_randomAccess_array_set_entry_serializable_str2 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.List<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>>)arraylist_list_entry_randomAccess_array_set_entry_serializable_str1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState4.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = gameState4.gameBoard;
    java.lang.String str7 = hashmap_card_i6.toString();
    org.cs362.dominion.Card card8 = null;
    java.lang.Integer i10 = hashmap_card_i6.put(card8, (java.lang.Integer)61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{}"+ "'", str7.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i10);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card2 = arraylist_abstractcollection_card1.spliterator();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.createCards();
    boolean b10 = arraylist_card5.contains((java.lang.Object)list_card9);
    arraylist_abstractcollection_card1.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    boolean b17 = arraylist_card13.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    boolean b27 = arraylist_card23.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i37 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    int i41 = arraylist_card39.size();
    java.util.RandomAccess[] randomAccess_array42 = new java.util.RandomAccess[] { arraylist_card34, arraylist_card39 };
    java.util.RandomAccess[] randomAccess_array43 = arraylist_card29.toArray(randomAccess_array42);
    arraylist_card29.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b46 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    boolean b47 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    boolean b48 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card19);
    boolean b49 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card23);
    boolean b50 = linkedlist_abstractcollection_card45.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card29);
    int i52 = linkedlist_abstractcollection_card45.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card55 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card56 = arraylist_abstractcollection_card55.spliterator();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.createCards();
    boolean b64 = arraylist_card59.contains((java.lang.Object)list_card63);
    arraylist_abstractcollection_card55.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card59);
    arraylist_abstractcollection_card55.clear();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    int i70 = arraylist_card68.size();
    boolean b71 = arraylist_abstractcollection_card55.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card72 = linkedlist_abstractcollection_card45.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    int i77 = arraylist_card75.size();
    org.cs362.dominion.GameState gameState78 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card75);
    linkedlist_abstractcollection_card45.add(3, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card75);
    linkedlist_abstractcollection_card45.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str3 = hashmap_type_cloneable2.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b7 = hashmap_type_cloneable5.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    java.util.RandomAccess[] randomAccess_array23 = new java.util.RandomAccess[] { arraylist_card15, arraylist_card20 };
    java.util.RandomAccess[] randomAccess_array24 = arraylist_card10.toArray(randomAccess_array23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName25);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    int i31 = hashmap_serializable_str28.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str32 = hashmap_serializable_str28.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    hashmap_serializable_str28.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str34);
    java.util.HashMap[] hashMap_array39 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array39;
    hashmap_serializable_str_array40[0] = hashmap_serializable_str34;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = arraylist_card10.toArray(hashmap_serializable_str_array40);
    java.lang.Cloneable cloneable44 = hashmap_type_cloneable5.replace(type8, (java.lang.Cloneable)hashmap_serializable_str_array40);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.createCards();
    boolean b51 = arraylist_card46.contains((java.lang.Object)list_card50);
    int i53 = arraylist_card46.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable54 = hashmap_type_cloneable2.put(type8, (java.lang.Cloneable)arraylist_card46);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card55 = hashmap_iterable_entry_serializable_str_spliterator_card0.remove((java.lang.Object)cloneable54);
    java.lang.Object obj56 = hashmap_iterable_entry_serializable_str_spliterator_card0.clone();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str63 = hashmap_serializable_str58.entrySet();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card65 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card66 = arraylist_abstractcollection_card65.spliterator();
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i72 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card69, cardName71);
    java.util.List<org.cs362.dominion.Card> list_card73 = org.cs362.dominion.Card.createCards();
    boolean b74 = arraylist_card69.contains((java.lang.Object)list_card73);
    arraylist_abstractcollection_card65.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    org.cs362.dominion.Card[] card_array76 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card77 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card77, card_array76);
    org.cs362.dominion.Card.CardName cardName79 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i80 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card77, cardName79);
    java.util.List<org.cs362.dominion.Card> list_card81 = org.cs362.dominion.Card.createCards();
    boolean b82 = arraylist_card77.contains((java.lang.Object)list_card81);
    org.cs362.dominion.Card.Type type83 = null;
    java.util.List<org.cs362.dominion.Card> list_card84 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card81, type83);
    boolean b85 = arraylist_card69.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card81);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card86 = arraylist_card69.spliterator();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card87 = hashmap_iterable_entry_serializable_str_spliterator_card0.put((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str63, spliterator_card86);
    java.util.Set<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> set_entry_iterable_entry_serializable_str_spliterator_card88 = hashmap_iterable_entry_serializable_str_spliterator_card0.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{}"+ "'", str3.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName79.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_iterable_entry_serializable_str_spliterator_card88);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }

    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i0 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer> entry_player_i2 = arraylist_entry_player_i0.remove(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }

    java.lang.String[] str_array1 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array1);
    java.lang.Object obj4 = arraylist_str2.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    boolean b54 = hashmap_type_cloneable5.replace(type6, (java.lang.Cloneable)arraylist_card12, (java.lang.Cloneable)hashmap_serializable_str_array53);
    java.util.Set<org.cs362.dominion.Card.Type> set_type55 = hashmap_type_cloneable5.keySet();
    boolean b56 = arraylist_str2.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str57 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.String>)arraylist_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str1 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i2 = arraylist_entry_serializable_str1.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card3 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str6 = hashmap_type_cloneable5.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable8 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b10 = hashmap_type_cloneable8.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    java.util.RandomAccess[] randomAccess_array26 = new java.util.RandomAccess[] { arraylist_card18, arraylist_card23 };
    java.util.RandomAccess[] randomAccess_array27 = arraylist_card13.toArray(randomAccess_array26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName28);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    int i34 = hashmap_serializable_str31.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str35 = hashmap_serializable_str31.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b39 = hashmap_serializable_str37.equals((java.lang.Object)1.0d);
    hashmap_serializable_str31.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str37);
    java.util.HashMap[] hashMap_array42 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array42;
    hashmap_serializable_str_array43[0] = hashmap_serializable_str37;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = arraylist_card13.toArray(hashmap_serializable_str_array43);
    java.lang.Cloneable cloneable47 = hashmap_type_cloneable8.replace(type11, (java.lang.Cloneable)hashmap_serializable_str_array43);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.createCards();
    boolean b54 = arraylist_card49.contains((java.lang.Object)list_card53);
    int i56 = arraylist_card49.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable57 = hashmap_type_cloneable5.put(type11, (java.lang.Cloneable)arraylist_card49);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card58 = hashmap_iterable_entry_serializable_str_spliterator_card3.remove((java.lang.Object)cloneable57);
    java.lang.Object obj59 = hashmap_iterable_entry_serializable_str_spliterator_card3.clone();
    int i60 = arraylist_entry_serializable_str1.indexOf(obj59);
    boolean b61 = linkedlist_arraylist_entry_serializable_str0.offerLast(arraylist_entry_serializable_str1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card63 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card64 = arraylist_abstractcollection_card63.spliterator();
    org.cs362.dominion.Card[] card_array66 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card67 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card67, card_array66);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i70 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName69);
    java.util.List<org.cs362.dominion.Card> list_card71 = org.cs362.dominion.Card.createCards();
    boolean b72 = arraylist_card67.contains((java.lang.Object)list_card71);
    arraylist_abstractcollection_card63.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card67);
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i78 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName77);
    java.util.List<org.cs362.dominion.Card> list_card79 = org.cs362.dominion.Card.createCards();
    boolean b80 = arraylist_card75.contains((java.lang.Object)list_card79);
    org.cs362.dominion.Card.Type type81 = null;
    java.util.List<org.cs362.dominion.Card> list_card82 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card79, type81);
    boolean b83 = arraylist_card67.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card79);
    org.cs362.dominion.Card.CardName cardName84 = null;
    org.cs362.dominion.Card card85 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName84);
    org.cs362.dominion.Card.CardName cardName86 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card87 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName86);
    boolean b88 = linkedlist_arraylist_entry_serializable_str0.removeLastOccurrence((java.lang.Object)card87);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str90 = linkedlist_arraylist_entry_serializable_str0.get((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{}"+ "'", str6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName86.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }

    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str2 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    hashmap_randomAccess_array_set_entry_serializable_str2.clear();
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str6 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    arraylist_abstractcollection_card8.clear();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    int i23 = arraylist_card21.size();
    boolean b24 = arraylist_abstractcollection_card8.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card21);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card26 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness27 = new org.cs362.dominion.Randomness();
    int i28 = randomness27.main();
    int i29 = arraylist_abstractcollection_card26.lastIndexOf((java.lang.Object)i28);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card30 = arraylist_abstractcollection_card26.stream();
    int i31 = arraylist_card21.indexOf((java.lang.Object)stream_abstractcollection_card30);
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str32 = hashmap_randomAccess_array_set_entry_serializable_str6.remove((java.lang.Object)i31);
    java.util.Set<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> set_entry_randomAccess_array_set_entry_serializable_str33 = hashmap_randomAccess_array_set_entry_serializable_str6.entrySet();
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str36 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable37 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card41 = arraylist_abstractcollection_card40.spliterator();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i47 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card44, cardName46);
    java.util.List<org.cs362.dominion.Card> list_card48 = org.cs362.dominion.Card.createCards();
    boolean b49 = arraylist_card44.contains((java.lang.Object)list_card48);
    arraylist_abstractcollection_card40.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card44);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    org.cs362.dominion.Card.CardName cardName54 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i55 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card52, cardName54);
    org.cs362.dominion.Card[] card_array56 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card57, card_array56);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i60 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card57, cardName59);
    org.cs362.dominion.Card[] card_array61 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card62 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card62, card_array61);
    int i64 = arraylist_card62.size();
    java.util.RandomAccess[] randomAccess_array65 = new java.util.RandomAccess[] { arraylist_card57, arraylist_card62 };
    java.util.RandomAccess[] randomAccess_array66 = arraylist_card52.toArray(randomAccess_array65);
    org.cs362.dominion.Card.CardName cardName67 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card68 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card52, cardName67);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str70 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b72 = hashmap_serializable_str70.equals((java.lang.Object)1.0d);
    int i73 = hashmap_serializable_str70.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str74 = hashmap_serializable_str70.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str76 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b78 = hashmap_serializable_str76.equals((java.lang.Object)1.0d);
    hashmap_serializable_str70.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str76);
    java.util.HashMap[] hashMap_array81 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array82 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array81;
    hashmap_serializable_str_array82[0] = hashmap_serializable_str76;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array85 = arraylist_card52.toArray(hashmap_serializable_str_array82);
    boolean b86 = hashmap_type_cloneable37.replace(type38, (java.lang.Cloneable)arraylist_card44, (java.lang.Cloneable)hashmap_serializable_str_array85);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable87 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((java.util.Map<org.cs362.dominion.Card.Type,java.lang.Cloneable>)hashmap_type_cloneable37);
    boolean b88 = hashmap_randomAccess_array_set_entry_serializable_str36.equals((java.lang.Object)hashmap_type_cloneable37);
    java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_map_randomAccess_array_set_entry_serializable_str89 = new java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    boolean b90 = arraylist_map_randomAccess_array_set_entry_serializable_str89.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str2);
    boolean b91 = arraylist_map_randomAccess_array_set_entry_serializable_str89.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str6);
    boolean b92 = arraylist_map_randomAccess_array_set_entry_serializable_str89.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str36);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> list_map_randomAccess_array_set_entry_serializable_str95 = arraylist_map_randomAccess_array_set_entry_serializable_str89.subList((int)(short)-1, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(set_entry_serializable_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_randomAccess_array_set_entry_serializable_str33);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type38.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName54.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array66);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName67.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }

    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str2 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    hashmap_randomAccess_array_set_entry_serializable_str2.clear();
    java.lang.Object obj4 = hashmap_randomAccess_array_set_entry_serializable_str2.clone();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card5 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Village;
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card7 = hashmap_iterable_entry_serializable_str_spliterator_card5.remove((java.lang.Object)cardName6);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card9 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str11 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b13 = hashmap_serializable_str11.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str14 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str11);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str16 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b18 = hashmap_serializable_str16.equals((java.lang.Object)1.0d);
    int i19 = hashmap_serializable_str16.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str20 = hashmap_serializable_str16.entrySet();
    boolean b21 = hashmap_serializable_str14.equals((java.lang.Object)set_entry_serializable_str20);
    boolean b22 = arraylist_abstractcollection_card9.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str20);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card24 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card25 = arraylist_abstractcollection_card24.spliterator();
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i31 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.createCards();
    boolean b33 = arraylist_card28.contains((java.lang.Object)list_card32);
    arraylist_abstractcollection_card24.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card28);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i39 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card36, cardName38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.createCards();
    boolean b41 = arraylist_card36.contains((java.lang.Object)list_card40);
    org.cs362.dominion.Card.Type type42 = null;
    java.util.List<org.cs362.dominion.Card> list_card43 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card40, type42);
    boolean b44 = arraylist_card28.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card40);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card45 = arraylist_card28.spliterator();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card46 = hashmap_iterable_entry_serializable_str_spliterator_card5.putIfAbsent((java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str20, spliterator_card45);
    boolean b47 = hashmap_randomAccess_array_set_entry_serializable_str2.equals((java.lang.Object)spliterator_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.pollLast();
    int i4 = linkedlist_obj0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }

    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str2 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card4 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card5 = arraylist_abstractcollection_card4.spliterator();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    boolean b13 = arraylist_card8.contains((java.lang.Object)list_card12);
    arraylist_abstractcollection_card4.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card8);
    arraylist_abstractcollection_card4.clear();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    boolean b20 = arraylist_abstractcollection_card4.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card17);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card22 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness23 = new org.cs362.dominion.Randomness();
    int i24 = randomness23.main();
    int i25 = arraylist_abstractcollection_card22.lastIndexOf((java.lang.Object)i24);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card26 = arraylist_abstractcollection_card22.stream();
    int i27 = arraylist_card17.indexOf((java.lang.Object)stream_abstractcollection_card26);
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_randomAccess_array_set_entry_serializable_str2.remove((java.lang.Object)i27);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card30 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness31 = new org.cs362.dominion.Randomness();
    int i32 = randomness31.main();
    int i33 = arraylist_abstractcollection_card30.lastIndexOf((java.lang.Object)i32);
    java.util.ArrayList[] arrayList_array35 = new java.util.ArrayList[ 0 ];
    @SuppressWarnings("unchecked")
    java.util.ArrayList<org.cs362.dominion.Card>[] arraylist_card_array36 = (java.util.ArrayList<org.cs362.dominion.Card>[])arrayList_array35;
    java.util.ArrayList<org.cs362.dominion.Card>[] arraylist_card_array37 = arraylist_abstractcollection_card30.toArray((java.util.ArrayList<org.cs362.dominion.Card>[])arrayList_array35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    int i42 = hashmap_serializable_str39.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str43 = hashmap_serializable_str39.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str44 = hashmap_randomAccess_array_set_entry_serializable_str2.replace((java.util.RandomAccess[])arraylist_card_array37, set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(set_entry_serializable_str44);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }

    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str2 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str10 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b11 = arraylist_comparable_str10.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b12 = arraylist_comparable_str10.add((java.lang.Comparable<java.lang.String>)"");
    boolean b13 = arraylist_comparable_str10.add((java.lang.Comparable<java.lang.String>)"");
    boolean b14 = arraylist_comparable_str10.add((java.lang.Comparable<java.lang.String>)"[]");
    boolean b15 = arraylist_comparable_str10.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b16 = arraylist_comparable_str10.add((java.lang.Comparable<java.lang.String>)"{}");
    java.lang.Comparable<java.lang.String> comparable_str17 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str10);
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b21 = arraylist_comparable_str20.add((java.lang.Comparable<java.lang.String>)"{}");
    boolean b22 = arraylist_comparable_str20.add((java.lang.Comparable<java.lang.String>)"");
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b27 = arraylist_comparable_str26.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b28 = arraylist_comparable_str26.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b29 = arraylist_comparable_str26.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b30 = arraylist_comparable_str20.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str26);
    boolean b32 = arraylist_comparable_str26.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str33 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    boolean b34 = arraylist_arraylist_comparable_str33.add(arraylist_comparable_str3);
    boolean b35 = arraylist_arraylist_comparable_str33.add(arraylist_comparable_str10);
    boolean b36 = arraylist_arraylist_comparable_str33.add(arraylist_comparable_str26);
    boolean b37 = linkedlist_arraylist_arraylist_comparable_str2.offer(arraylist_arraylist_comparable_str33);
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str38 = linkedlist_arraylist_arraylist_comparable_str2.remove();
    // The following exception was thrown during execution in test generation
    try {
    linkedlist_arraylist_arraylist_comparable_str0.add((-1), arraylist_arraylist_comparable_str38);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)

    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_arraylist_comparable_str38);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    java.lang.Object obj5 = linkedlist_obj0.poll();
    java.util.Iterator<java.lang.Object> iterator_obj6 = linkedlist_obj0.iterator();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable8 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(short)10);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type9 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type10 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness11 = new org.cs362.dominion.Randomness();
    int i12 = randomness11.main();
    int i13 = randomness11.main();
    int i14 = randomness11.main();
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type16 = hashmap_randomness_type10.put(randomness11, type15);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type17 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness18 = new org.cs362.dominion.Randomness();
    int i19 = randomness18.main();
    int i20 = randomness18.main();
    int i21 = randomness18.main();
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type23 = hashmap_randomness_type17.put(randomness18, type22);
    org.cs362.dominion.Card.Type type24 = hashmap_randomness_type9.put(randomness11, type22);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    int i28 = arraylist_card26.size();
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState29.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState29.gameBoard;
    java.lang.String str32 = hashmap_card_i31.toString();
    java.lang.Cloneable cloneable33 = hashmap_type_cloneable8.putIfAbsent(type22, (java.lang.Cloneable)hashmap_card_i31);
    boolean b34 = linkedlist_obj0.offer((java.lang.Object)type22);
    int i35 = linkedlist_obj0.size();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    java.lang.String str39 = hashmap_serializable_str37.get((java.lang.Object)(byte)10);
    java.lang.String str42 = hashmap_serializable_str37.getOrDefault((java.lang.Object)(byte)100, "hi!");
    boolean b43 = linkedlist_obj0.removeFirstOccurrence((java.lang.Object)str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type15.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type22.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "{}"+ "'", str32.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!"+ "'", str42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.stream.Stream<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> stream_entry_iterable_entry_serializable_str_spliterator_card1 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.stream();
    int i2 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> entry_iterable_entry_serializable_str_spliterator_card3 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_entry_iterable_entry_serializable_str_spliterator_card0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_iterable_entry_serializable_str_spliterator_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }

    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type0 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    int i1 = hashmap_randomness_type0.size();
    java.util.Set<org.cs362.dominion.Randomness> set_randomness2 = hashmap_randomness_type0.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_randomness2);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.ensureCapacity(2);
    java.util.ListIterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_entry_iterable_entry_serializable_str_spliterator_card3 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.listIterator();
    java.util.function.UnaryOperator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> unaryoperator_entry_iterable_entry_serializable_str_spliterator_card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.replaceAll(unaryoperator_entry_iterable_entry_serializable_str_spliterator_card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_entry_iterable_entry_serializable_str_spliterator_card3);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }

    java.util.ArrayList<java.util.List<java.lang.String>> arraylist_list_str1 = new java.util.ArrayList<java.util.List<java.lang.String>>((int)(byte)10);
    arraylist_list_str1.ensureCapacity((int)(short)100);
    java.lang.String[] str_array5 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str6 = new java.util.ArrayList<java.lang.String>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str6, str_array5);
    java.lang.Object obj8 = arraylist_str6.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable9 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card12 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card13 = arraylist_abstractcollection_card12.spliterator();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i19 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.createCards();
    boolean b21 = arraylist_card16.contains((java.lang.Object)list_card20);
    arraylist_abstractcollection_card12.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i27 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i32 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    int i36 = arraylist_card34.size();
    java.util.RandomAccess[] randomAccess_array37 = new java.util.RandomAccess[] { arraylist_card29, arraylist_card34 };
    java.util.RandomAccess[] randomAccess_array38 = arraylist_card24.toArray(randomAccess_array37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName39);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b44 = hashmap_serializable_str42.equals((java.lang.Object)1.0d);
    int i45 = hashmap_serializable_str42.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str46 = hashmap_serializable_str42.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str48 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b50 = hashmap_serializable_str48.equals((java.lang.Object)1.0d);
    hashmap_serializable_str42.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str48);
    java.util.HashMap[] hashMap_array53 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array53;
    hashmap_serializable_str_array54[0] = hashmap_serializable_str48;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array57 = arraylist_card24.toArray(hashmap_serializable_str_array54);
    boolean b58 = hashmap_type_cloneable9.replace(type10, (java.lang.Cloneable)arraylist_card16, (java.lang.Cloneable)hashmap_serializable_str_array57);
    java.util.Set<org.cs362.dominion.Card.Type> set_type59 = hashmap_type_cloneable9.keySet();
    boolean b60 = arraylist_str6.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type59);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type61 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type59);
    arraylist_comparable_type61.ensureCapacity(61);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i64 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array65 = arraylist_entry_player_i64.toArray();
    boolean b66 = arraylist_comparable_type61.containsAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i64);
    java.util.stream.Stream<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> stream_entry_player_i67 = arraylist_entry_player_i64.parallelStream();
    java.util.LinkedList<java.lang.Object> linkedlist_obj68 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = linkedlist_obj68.offerLast((java.lang.Object)arraylist_card69);
    java.lang.Object obj71 = linkedlist_obj68.removeLast();
    boolean b72 = linkedlist_obj68.isEmpty();
    java.lang.Object obj73 = linkedlist_obj68.poll();
    java.lang.Object[] obj_array74 = linkedlist_obj68.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str75 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str76 = arraylist_entry_serializable_str75.stream();
    java.lang.Object obj77 = arraylist_entry_serializable_str75.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i78 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b79 = arraylist_entry_serializable_str75.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i78);
    boolean b80 = linkedlist_obj68.removeAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i78);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i81 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array82 = arraylist_entry_player_i81.toArray();
    java.util.List[] list_array84 = new java.util.List[ 3 ];
    @SuppressWarnings("unchecked")
    java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] list_entry_player_i_array85 = (java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[])list_array84;
    list_entry_player_i_array85[0] = arraylist_entry_player_i64;
    list_entry_player_i_array85[1] = arraylist_entry_player_i78;
    list_entry_player_i_array85[2] = arraylist_entry_player_i81;
    java.util.List<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>[] list_entry_player_i_array92 = arraylist_list_str1.toArray(list_entry_player_i_array85);
    java.util.function.UnaryOperator<java.util.List<java.lang.String>> unaryoperator_list_str93 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_list_str1.replaceAll(unaryoperator_list_str93);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type10.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_player_i67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_entry_player_i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_entry_player_i_array92);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }

    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type0 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type2 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card4 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card5 = arraylist_abstractcollection_card4.spliterator();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    boolean b13 = arraylist_card8.contains((java.lang.Object)list_card12);
    arraylist_abstractcollection_card4.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i19 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    int i28 = arraylist_card26.size();
    java.util.RandomAccess[] randomAccess_array29 = new java.util.RandomAccess[] { arraylist_card21, arraylist_card26 };
    java.util.RandomAccess[] randomAccess_array30 = arraylist_card16.toArray(randomAccess_array29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName31);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    int i37 = hashmap_serializable_str34.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str38 = hashmap_serializable_str34.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str40 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b42 = hashmap_serializable_str40.equals((java.lang.Object)1.0d);
    hashmap_serializable_str34.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str40);
    java.util.HashMap[] hashMap_array45 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array45;
    hashmap_serializable_str_array46[0] = hashmap_serializable_str40;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array49 = arraylist_card16.toArray(hashmap_serializable_str_array46);
    boolean b50 = hashmap_type_cloneable1.replace(type2, (java.lang.Cloneable)arraylist_card8, (java.lang.Cloneable)hashmap_serializable_str_array49);
    java.util.Set<org.cs362.dominion.Card.Type> set_type51 = hashmap_type_cloneable1.keySet();
    boolean b52 = linkedlist_set_type0.offer(set_type51);
    java.util.Set<org.cs362.dominion.Card.Type> set_type53 = linkedlist_set_type0.remove();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<org.cs362.dominion.Card.Type> set_type54 = linkedlist_set_type0.getLast();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type2.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type53);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    gameState90.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.pollFirst();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.Card card45 = null;
    boolean b46 = arraylist_card43.add(card45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    int i69 = hashmap_serializable_str66.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str66.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str72 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b74 = hashmap_serializable_str72.equals((java.lang.Object)1.0d);
    hashmap_serializable_str66.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str72);
    java.util.HashMap[] hashMap_array77 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array77;
    hashmap_serializable_str_array78[0] = hashmap_serializable_str72;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array81 = arraylist_card48.toArray(hashmap_serializable_str_array78);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card82 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b83 = arraylist_abstractcollection_card82.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card48);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card84 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card82);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card84.pollFirst();
    boolean b86 = arraylist_card43.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card84);
    linkedlist_abstractcollection_card39.addFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card88 = linkedlist_abstractcollection_card39.peekLast();
    org.cs362.dominion.Card[] card_array89 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card90 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b91 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card90, card_array89);
    org.cs362.dominion.Card.CardName cardName92 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i93 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card90, cardName92);
    java.util.List<org.cs362.dominion.Card> list_card94 = org.cs362.dominion.Card.createCards();
    boolean b95 = arraylist_card90.contains((java.lang.Object)list_card94);
    boolean b96 = linkedlist_abstractcollection_card39.offerFirst((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card90);
    boolean b97 = arraylist_entry_serializable_str0.contains((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card98 = linkedlist_abstractcollection_card39.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    org.junit.Assert.assertTrue("'" + cardName92 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName92.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card98);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.lang.Object[] obj_array1 = linkedlist_arraylist_entry_serializable_str0.toArray();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = linkedlist_arraylist_entry_serializable_str0.getFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }

    java.util.Map<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> map_randomness_type0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type1 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>(map_randomness_type0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }

    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type0 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    int i1 = hashmap_randomness_type0.size();
    boolean b2 = hashmap_randomness_type0.isEmpty();
    java.lang.Object obj3 = null;
    org.cs362.dominion.Card.Type type4 = hashmap_randomness_type0.remove(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type4);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    gameState90.initializeGame();
    java.lang.String str93 = gameState90.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i94 = gameState90.gameBoard;
    org.cs362.dominion.Card card95 = null;
    java.lang.Integer i97 = hashmap_card_i94.replace(card95, (java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)

    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i97);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str1 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i3 = arraylist_entry_serializable_str2.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card4 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable6 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str7 = hashmap_type_cloneable6.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable9 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b11 = hashmap_type_cloneable9.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i22 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    java.util.RandomAccess[] randomAccess_array27 = new java.util.RandomAccess[] { arraylist_card19, arraylist_card24 };
    java.util.RandomAccess[] randomAccess_array28 = arraylist_card14.toArray(randomAccess_array27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName29);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str32 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b34 = hashmap_serializable_str32.equals((java.lang.Object)1.0d);
    int i35 = hashmap_serializable_str32.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str36 = hashmap_serializable_str32.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    hashmap_serializable_str32.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str38);
    java.util.HashMap[] hashMap_array43 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array44 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array43;
    hashmap_serializable_str_array44[0] = hashmap_serializable_str38;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array47 = arraylist_card14.toArray(hashmap_serializable_str_array44);
    java.lang.Cloneable cloneable48 = hashmap_type_cloneable9.replace(type12, (java.lang.Cloneable)hashmap_serializable_str_array44);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    java.util.List<org.cs362.dominion.Card> list_card54 = org.cs362.dominion.Card.createCards();
    boolean b55 = arraylist_card50.contains((java.lang.Object)list_card54);
    int i57 = arraylist_card50.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable58 = hashmap_type_cloneable6.put(type12, (java.lang.Cloneable)arraylist_card50);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card59 = hashmap_iterable_entry_serializable_str_spliterator_card4.remove((java.lang.Object)cloneable58);
    java.lang.Object obj60 = hashmap_iterable_entry_serializable_str_spliterator_card4.clone();
    int i61 = arraylist_entry_serializable_str2.indexOf(obj60);
    boolean b62 = linkedlist_arraylist_entry_serializable_str1.offerLast(arraylist_entry_serializable_str2);
    boolean b63 = linkedlist_arraylist_entry_serializable_str0.addAll((java.util.Collection<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)linkedlist_arraylist_entry_serializable_str1);
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str64 = linkedlist_arraylist_entry_serializable_str1.pop();
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card69 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str71 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b73 = hashmap_serializable_str71.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str74 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str71);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str76 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b78 = hashmap_serializable_str76.equals((java.lang.Object)1.0d);
    int i79 = hashmap_serializable_str76.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str80 = hashmap_serializable_str76.entrySet();
    boolean b81 = hashmap_serializable_str74.equals((java.lang.Object)set_entry_serializable_str80);
    boolean b82 = arraylist_abstractcollection_card69.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str80);
    java.lang.Object[] obj_array83 = arraylist_abstractcollection_card69.toArray();
    boolean b84 = arraylist_abstractcollection_card69.isEmpty();
    org.cs362.dominion.Card[] card_array85 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card86 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b87 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card86, card_array85);
    org.cs362.dominion.Card card88 = null;
    boolean b89 = arraylist_card86.add(card88);
    boolean b90 = arraylist_abstractcollection_card69.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card86);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card92 = arraylist_card86.listIterator((int)(byte)0);
    java.util.Iterator[] iterator_array94 = new java.util.Iterator[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.Iterator<org.cs362.dominion.Card>[] iterator_card_array95 = (java.util.Iterator<org.cs362.dominion.Card>[])iterator_array94;
    iterator_card_array95[0] = listiterator_card92;
    java.util.Iterator<org.cs362.dominion.Card>[] iterator_card_array98 = arraylist_card66.toArray(iterator_card_array95);
    boolean b99 = arraylist_entry_serializable_str64.remove((java.lang.Object)iterator_card_array98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{}"+ "'", str7.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_entry_serializable_str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_card_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_card_array98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }

    java.util.HashMap<java.util.Set<org.cs362.dominion.Card.Type>,java.util.AbstractCollection<java.lang.Object>> hashmap_set_type_abstractcollection_obj1 = new java.util.HashMap<java.util.Set<org.cs362.dominion.Card.Type>,java.util.AbstractCollection<java.lang.Object>>(3);
    java.util.Collection<java.util.AbstractCollection<java.lang.Object>> collection_abstractcollection_obj2 = hashmap_set_type_abstractcollection_obj1.values();
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card card6 = null;
    boolean b7 = arraylist_card4.add(card6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card45.pollFirst();
    boolean b47 = arraylist_card4.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card45);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card48 = linkedlist_abstractcollection_card45.peek();
    java.util.AbstractCollection<java.lang.Object> abstractcollection_obj49 = hashmap_set_type_abstractcollection_obj1.remove((java.lang.Object)linkedlist_abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_abstractcollection_obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_obj49);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }

    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str0 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = null;
    boolean b2 = arraylist_arraylist_comparable_str0.add(arraylist_comparable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card18 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card19 = hashmap_iterable_entry_serializable_str_spliterator_card18.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = collection_spliterator_card19.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card21 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b22 = linkedlist_stream_spliterator_card21.add(stream_spliterator_card20);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card25 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card26 = hashmap_iterable_entry_serializable_str_spliterator_card25.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card27 = collection_spliterator_card26.stream();
    linkedlist_stream_spliterator_card21.addFirst(stream_spliterator_card27);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card29 = linkedlist_stream_spliterator_card21.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card30 = linkedlist_stream_spliterator_card21.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card31 = linkedlist_stream_spliterator_card21.peekFirst();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card31);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card35 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card36 = hashmap_iterable_entry_serializable_str_spliterator_card35.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card37 = collection_spliterator_card36.stream();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card40 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card41 = hashmap_iterable_entry_serializable_str_spliterator_card40.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card42 = collection_spliterator_card41.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card43 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b44 = linkedlist_stream_spliterator_card43.add(stream_spliterator_card42);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card47 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card48 = hashmap_iterable_entry_serializable_str_spliterator_card47.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card49 = collection_spliterator_card48.stream();
    linkedlist_stream_spliterator_card43.addFirst(stream_spliterator_card49);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card54 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card55 = hashmap_iterable_entry_serializable_str_spliterator_card54.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card56 = collection_spliterator_card55.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card57 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b58 = linkedlist_stream_spliterator_card57.add(stream_spliterator_card56);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card61 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card62 = hashmap_iterable_entry_serializable_str_spliterator_card61.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card63 = collection_spliterator_card62.stream();
    linkedlist_stream_spliterator_card57.addFirst(stream_spliterator_card63);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card65 = linkedlist_stream_spliterator_card43.set(1, stream_spliterator_card63);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card68 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card69 = hashmap_iterable_entry_serializable_str_spliterator_card68.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card70 = collection_spliterator_card69.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card71 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b72 = linkedlist_stream_spliterator_card71.add(stream_spliterator_card70);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card75 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card76 = hashmap_iterable_entry_serializable_str_spliterator_card75.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card77 = collection_spliterator_card76.stream();
    linkedlist_stream_spliterator_card71.addFirst(stream_spliterator_card77);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card82 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card83 = hashmap_iterable_entry_serializable_str_spliterator_card82.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card84 = collection_spliterator_card83.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card85 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b86 = linkedlist_stream_spliterator_card85.add(stream_spliterator_card84);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card89 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card90 = hashmap_iterable_entry_serializable_str_spliterator_card89.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card91 = collection_spliterator_card90.stream();
    linkedlist_stream_spliterator_card85.addFirst(stream_spliterator_card91);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card93 = linkedlist_stream_spliterator_card71.set(1, stream_spliterator_card91);
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card94 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b95 = linkedlist_stream_spliterator_card94.add(stream_spliterator_card31);
    boolean b96 = linkedlist_stream_spliterator_card94.add(stream_spliterator_card37);
    boolean b97 = linkedlist_stream_spliterator_card94.add(stream_spliterator_card63);
    boolean b98 = linkedlist_stream_spliterator_card94.add(stream_spliterator_card91);
    java.lang.Object[] obj_array99 = linkedlist_stream_spliterator_card94.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array99);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    java.util.List<org.cs362.dominion.Card> list_card95 = gameState90.embargo;
    org.cs362.dominion.GameState gameState96 = gameState90.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i97 = null;
    gameState90.gameBoard = hashmap_card_i97;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState99 = gameState90.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState96);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card39.toArray();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card39.get(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i10 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    java.util.RandomAccess[] randomAccess_array20 = new java.util.RandomAccess[] { arraylist_card12, arraylist_card17 };
    java.util.RandomAccess[] randomAccess_array21 = arraylist_card7.toArray(randomAccess_array20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName22);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    int i28 = hashmap_serializable_str25.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str29 = hashmap_serializable_str25.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    hashmap_serializable_str25.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str31);
    java.util.HashMap[] hashMap_array36 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array36;
    hashmap_serializable_str_array37[0] = hashmap_serializable_str31;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = arraylist_card7.toArray(hashmap_serializable_str_array37);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card41 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b42 = arraylist_abstractcollection_card41.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card7);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card43 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card41);
    java.lang.Object[] obj_array44 = linkedlist_abstractcollection_card43.toArray();
    boolean b45 = hashmap_type_cloneable5.containsKey((java.lang.Object)linkedlist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card43.pollLast();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    boolean b65 = linkedlist_abstractcollection_card43.removeLastOccurrence((java.lang.Object)cardName63);
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card66 = linkedlist_abstractcollection_card43.listIterator();
    boolean b67 = linkedlist_obj0.add((java.lang.Object)linkedlist_abstractcollection_card43);
    java.lang.Object obj68 = linkedlist_obj0.getFirst();
    java.lang.Object obj69 = linkedlist_obj0.getLast();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj71 = linkedlist_obj0.remove((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj69);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str1 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i2 = arraylist_entry_serializable_str1.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card3 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str6 = hashmap_type_cloneable5.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable8 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b10 = hashmap_type_cloneable8.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    java.util.RandomAccess[] randomAccess_array26 = new java.util.RandomAccess[] { arraylist_card18, arraylist_card23 };
    java.util.RandomAccess[] randomAccess_array27 = arraylist_card13.toArray(randomAccess_array26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName28);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    int i34 = hashmap_serializable_str31.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str35 = hashmap_serializable_str31.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b39 = hashmap_serializable_str37.equals((java.lang.Object)1.0d);
    hashmap_serializable_str31.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str37);
    java.util.HashMap[] hashMap_array42 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array42;
    hashmap_serializable_str_array43[0] = hashmap_serializable_str37;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = arraylist_card13.toArray(hashmap_serializable_str_array43);
    java.lang.Cloneable cloneable47 = hashmap_type_cloneable8.replace(type11, (java.lang.Cloneable)hashmap_serializable_str_array43);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.createCards();
    boolean b54 = arraylist_card49.contains((java.lang.Object)list_card53);
    int i56 = arraylist_card49.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable57 = hashmap_type_cloneable5.put(type11, (java.lang.Cloneable)arraylist_card49);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card58 = hashmap_iterable_entry_serializable_str_spliterator_card3.remove((java.lang.Object)cloneable57);
    java.lang.Object obj59 = hashmap_iterable_entry_serializable_str_spliterator_card3.clone();
    int i60 = arraylist_entry_serializable_str1.indexOf(obj59);
    boolean b61 = linkedlist_arraylist_entry_serializable_str0.offerLast(arraylist_entry_serializable_str1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card63 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card64 = arraylist_abstractcollection_card63.spliterator();
    org.cs362.dominion.Card[] card_array66 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card67 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card67, card_array66);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i70 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName69);
    java.util.List<org.cs362.dominion.Card> list_card71 = org.cs362.dominion.Card.createCards();
    boolean b72 = arraylist_card67.contains((java.lang.Object)list_card71);
    arraylist_abstractcollection_card63.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card67);
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i78 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName77);
    java.util.List<org.cs362.dominion.Card> list_card79 = org.cs362.dominion.Card.createCards();
    boolean b80 = arraylist_card75.contains((java.lang.Object)list_card79);
    org.cs362.dominion.Card.Type type81 = null;
    java.util.List<org.cs362.dominion.Card> list_card82 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card79, type81);
    boolean b83 = arraylist_card67.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card79);
    org.cs362.dominion.Card.CardName cardName84 = null;
    org.cs362.dominion.Card card85 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName84);
    org.cs362.dominion.Card.CardName cardName86 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card87 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName86);
    boolean b88 = linkedlist_arraylist_entry_serializable_str0.removeLastOccurrence((java.lang.Object)card87);
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str89 = null;
    boolean b90 = linkedlist_arraylist_entry_serializable_str0.offerFirst(arraylist_entry_serializable_str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{}"+ "'", str6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName86.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }

    java.util.HashMap<java.util.Collection<java.lang.Integer>,java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>> hashmap_collection_i_iterable_comparable_type1 = new java.util.HashMap<java.util.Collection<java.lang.Integer>,java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>>((int)(byte)100);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card58 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName57);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str60 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b62 = hashmap_serializable_str60.equals((java.lang.Object)1.0d);
    int i63 = hashmap_serializable_str60.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str64 = hashmap_serializable_str60.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    hashmap_serializable_str60.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str66);
    java.util.HashMap[] hashMap_array71 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array72 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array71;
    hashmap_serializable_str_array72[0] = hashmap_serializable_str66;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = arraylist_card42.toArray(hashmap_serializable_str_array72);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card76 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b77 = arraylist_abstractcollection_card76.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card78 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card76);
    java.lang.Object[] obj_array79 = linkedlist_abstractcollection_card78.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card80 = linkedlist_abstractcollection_card78.getLast();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card80);
    org.cs362.dominion.Card[] card_array82 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card83 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83, card_array82);
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i86 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card83, cardName85);
    java.util.List<org.cs362.dominion.Card> list_card87 = org.cs362.dominion.Card.createCards();
    boolean b88 = arraylist_card83.contains((java.lang.Object)list_card87);
    int i90 = arraylist_card83.indexOf((java.lang.Object)(byte)10);
    boolean b91 = abstractcollection_card80.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83);
    org.cs362.dominion.GameState gameState92 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card83);
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState92.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState92.play();
    java.util.Collection<java.lang.Integer> collection_i95 = hashmap_player_i94.values();
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type97 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((int)(short)100);
    java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>> iterable_comparable_type98 = hashmap_collection_i_iterable_comparable_type1.put(collection_i95, (java.lang.Iterable<java.lang.Comparable<org.cs362.dominion.Card.Type>>)arraylist_comparable_type97);
    java.util.stream.Stream<java.lang.Integer> stream_i99 = collection_i95.parallelStream();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iterable_comparable_type98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_i99);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.Card.CardName cardName53 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i54 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card51, cardName53);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    int i58 = arraylist_card56.size();
    java.util.RandomAccess[] randomAccess_array59 = new java.util.RandomAccess[] { arraylist_card51, arraylist_card56 };
    java.util.RandomAccess[] randomAccess_array60 = arraylist_card46.toArray(randomAccess_array59);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Ambassador;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName61);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card64 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card65 = arraylist_abstractcollection_card64.spliterator();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.Card.CardName cardName70 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i71 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card68, cardName70);
    java.util.List<org.cs362.dominion.Card> list_card72 = org.cs362.dominion.Card.createCards();
    boolean b73 = arraylist_card68.contains((java.lang.Object)list_card72);
    arraylist_abstractcollection_card64.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card68);
    arraylist_abstractcollection_card64.clear();
    org.cs362.dominion.Card[] card_array76 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card77 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card77, card_array76);
    int i79 = arraylist_card77.size();
    boolean b80 = arraylist_abstractcollection_card64.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card77);
    org.cs362.dominion.Card.CardName cardName81 = org.cs362.dominion.Card.CardName.Duchy;
    int i82 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card77, cardName81);
    org.cs362.dominion.Card card83 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName81);
    // The following exception was thrown during execution in test generation
    try {
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName53.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName70.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName81.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card83);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }

    org.cs362.dominion.Randomness.reset(1L);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }

    java.util.ArrayList<java.util.AbstractList<java.lang.Object>> arraylist_abstractlist_obj0 = new java.util.ArrayList<java.util.AbstractList<java.lang.Object>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.AbstractList<java.lang.Object>> list_abstractlist_obj3 = arraylist_abstractlist_obj0.subList(61, (int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(short)10);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type2 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type3 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness4 = new org.cs362.dominion.Randomness();
    int i5 = randomness4.main();
    int i6 = randomness4.main();
    int i7 = randomness4.main();
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type9 = hashmap_randomness_type3.put(randomness4, type8);
    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type10 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    org.cs362.dominion.Randomness randomness11 = new org.cs362.dominion.Randomness();
    int i12 = randomness11.main();
    int i13 = randomness11.main();
    int i14 = randomness11.main();
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card.Type type16 = hashmap_randomness_type10.put(randomness11, type15);
    org.cs362.dominion.Card.Type type17 = hashmap_randomness_type2.put(randomness4, type15);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card19);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState22.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState22.gameBoard;
    java.lang.String str25 = hashmap_card_i24.toString();
    java.lang.Cloneable cloneable26 = hashmap_type_cloneable1.putIfAbsent(type15, (java.lang.Cloneable)hashmap_card_i24);
    java.lang.String str27 = hashmap_type_cloneable1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type15.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(type17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "{}"+ "'", str25.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "{TREASURE={}}"+ "'", str27.equals("{TREASURE={}}"));

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }

    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card1 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    org.cs362.dominion.Randomness randomness2 = new org.cs362.dominion.Randomness();
    int i3 = randomness2.main();
    int i4 = arraylist_abstractcollection_card1.lastIndexOf((java.lang.Object)i3);
    java.util.stream.Stream<java.util.AbstractCollection<org.cs362.dominion.Card>> stream_abstractcollection_card5 = arraylist_abstractcollection_card1.stream();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card6 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card1);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card7 = linkedlist_abstractcollection_card6.peek();
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    linkedlist_abstractcollection_card6.addLast((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card6.peekLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_abstractcollection_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card44);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card40 = linkedlist_abstractcollection_card39.descendingIterator();
    java.lang.Object obj41 = linkedlist_abstractcollection_card39.clone();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable44 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(byte)100);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i49 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.Card.CardName cardName53 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i54 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card51, cardName53);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    int i58 = arraylist_card56.size();
    java.util.RandomAccess[] randomAccess_array59 = new java.util.RandomAccess[] { arraylist_card51, arraylist_card56 };
    java.util.RandomAccess[] randomAccess_array60 = arraylist_card46.toArray(randomAccess_array59);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card62 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName61);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    int i67 = hashmap_serializable_str64.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str68 = hashmap_serializable_str64.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str70 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b72 = hashmap_serializable_str70.equals((java.lang.Object)1.0d);
    hashmap_serializable_str64.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str70);
    java.util.HashMap[] hashMap_array75 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array76 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array75;
    hashmap_serializable_str_array76[0] = hashmap_serializable_str70;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array79 = arraylist_card46.toArray(hashmap_serializable_str_array76);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card80 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b81 = arraylist_abstractcollection_card80.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card46);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card82 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card80);
    java.lang.Object[] obj_array83 = linkedlist_abstractcollection_card82.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card84 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card82);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card85 = linkedlist_abstractcollection_card84.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card86 = linkedlist_abstractcollection_card84.peekFirst();
    java.lang.Cloneable cloneable87 = hashmap_type_cloneable44.get((java.lang.Object)abstractcollection_card86);
    org.cs362.dominion.Card.Type type88 = org.cs362.dominion.Card.Type.VICTORY;
    org.cs362.dominion.GameState gameState89 = null;
    org.cs362.dominion.Player player91 = new org.cs362.dominion.Player(gameState89, "hi!");
    player91.playTreasureCard();
    player91.playKingdomCard();
    java.lang.Cloneable cloneable94 = hashmap_type_cloneable44.put(type88, (java.lang.Cloneable)player91);
    java.util.List<org.cs362.dominion.Card> list_card95 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)abstractcollection_card42, type88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName53.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable87);
    org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type88.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }

    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b9 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b10 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"");
    boolean b11 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"");
    boolean b12 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"[]");
    boolean b13 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b14 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"{}");
    java.lang.Comparable<java.lang.String> comparable_str15 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str8);
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b19 = arraylist_comparable_str18.add((java.lang.Comparable<java.lang.String>)"{}");
    boolean b20 = arraylist_comparable_str18.add((java.lang.Comparable<java.lang.String>)"");
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b25 = arraylist_comparable_str24.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b26 = arraylist_comparable_str24.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b27 = arraylist_comparable_str24.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b28 = arraylist_comparable_str18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str24);
    boolean b30 = arraylist_comparable_str24.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str31 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    boolean b32 = arraylist_arraylist_comparable_str31.add(arraylist_comparable_str1);
    boolean b33 = arraylist_arraylist_comparable_str31.add(arraylist_comparable_str8);
    boolean b34 = arraylist_arraylist_comparable_str31.add(arraylist_comparable_str24);
    boolean b35 = linkedlist_arraylist_arraylist_comparable_str0.offer(arraylist_arraylist_comparable_str31);
    java.lang.Object obj36 = linkedlist_arraylist_arraylist_comparable_str0.clone();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str38 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b40 = arraylist_arraylist_comparable_str38.add(arraylist_comparable_str39);
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str41 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str42 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b43 = arraylist_arraylist_comparable_str41.add(arraylist_comparable_str42);
    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str44 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    boolean b45 = linkedlist_arraylist_arraylist_comparable_str44.add(arraylist_arraylist_comparable_str38);
    boolean b46 = linkedlist_arraylist_arraylist_comparable_str44.add(arraylist_arraylist_comparable_str41);
    java.lang.Object obj47 = linkedlist_arraylist_arraylist_comparable_str44.clone();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str48 = linkedlist_arraylist_arraylist_comparable_str44.remove();
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = linkedlist_arraylist_arraylist_comparable_str0.addAll(4, (java.util.Collection<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>)linkedlist_arraylist_arraylist_comparable_str44);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)

    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_arraylist_comparable_str48);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card1 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable3 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i8 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    int i17 = arraylist_card15.size();
    java.util.RandomAccess[] randomAccess_array18 = new java.util.RandomAccess[] { arraylist_card10, arraylist_card15 };
    java.util.RandomAccess[] randomAccess_array19 = arraylist_card5.toArray(randomAccess_array18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName20);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str23 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b25 = hashmap_serializable_str23.equals((java.lang.Object)1.0d);
    int i26 = hashmap_serializable_str23.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str27 = hashmap_serializable_str23.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str29 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b31 = hashmap_serializable_str29.equals((java.lang.Object)1.0d);
    hashmap_serializable_str23.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str29);
    java.util.HashMap[] hashMap_array34 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array35 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array34;
    hashmap_serializable_str_array35[0] = hashmap_serializable_str29;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array38 = arraylist_card5.toArray(hashmap_serializable_str_array35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b40 = arraylist_abstractcollection_card39.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card5);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card41 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card39);
    java.lang.Object[] obj_array42 = linkedlist_abstractcollection_card41.toArray();
    boolean b43 = hashmap_type_cloneable3.containsKey((java.lang.Object)linkedlist_abstractcollection_card41);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card44 = linkedlist_abstractcollection_card41.pollLast();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card45 = hashmap_iterable_entry_serializable_str_spliterator_card1.remove((java.lang.Object)linkedlist_abstractcollection_card41);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card41.pop();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card45);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card card6 = null;
    boolean b7 = arraylist_card4.add(card6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card45.pollFirst();
    boolean b47 = arraylist_card4.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card45);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card48 = arraylist_card4.listIterator();
    boolean b49 = linkedlist_obj0.equals((java.lang.Object)listiterator_card48);
    java.util.Iterator<java.lang.Object> iterator_obj50 = linkedlist_obj0.descendingIterator();
    boolean b51 = linkedlist_obj0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj53 = linkedlist_obj0.get(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card7 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card8 = hashmap_iterable_entry_serializable_str_spliterator_card7.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card9 = collection_spliterator_card8.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card10 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b11 = linkedlist_stream_spliterator_card10.add(stream_spliterator_card9);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card14 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card15 = hashmap_iterable_entry_serializable_str_spliterator_card14.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card16 = collection_spliterator_card15.stream();
    linkedlist_stream_spliterator_card10.addFirst(stream_spliterator_card16);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card18 = linkedlist_stream_spliterator_card10.removeLast();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card21 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card22 = hashmap_iterable_entry_serializable_str_spliterator_card21.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card23 = collection_spliterator_card22.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card24 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b25 = linkedlist_stream_spliterator_card24.add(stream_spliterator_card23);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card28 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card29 = hashmap_iterable_entry_serializable_str_spliterator_card28.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card30 = collection_spliterator_card29.stream();
    linkedlist_stream_spliterator_card24.addFirst(stream_spliterator_card30);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card32 = linkedlist_stream_spliterator_card24.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card33 = linkedlist_stream_spliterator_card24.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card34 = linkedlist_stream_spliterator_card24.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card37 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card38 = hashmap_iterable_entry_serializable_str_spliterator_card37.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card39 = collection_spliterator_card38.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card40 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b41 = linkedlist_stream_spliterator_card40.add(stream_spliterator_card39);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card44 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card45 = hashmap_iterable_entry_serializable_str_spliterator_card44.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card46 = collection_spliterator_card45.stream();
    linkedlist_stream_spliterator_card40.addFirst(stream_spliterator_card46);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card48 = linkedlist_stream_spliterator_card40.removeLast();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card49 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    int i50 = linkedlist_stream_spliterator_card49.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card53 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card54 = hashmap_iterable_entry_serializable_str_spliterator_card53.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card55 = collection_spliterator_card54.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card56 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b57 = linkedlist_stream_spliterator_card56.add(stream_spliterator_card55);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card60 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card61 = hashmap_iterable_entry_serializable_str_spliterator_card60.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card62 = collection_spliterator_card61.stream();
    linkedlist_stream_spliterator_card56.addFirst(stream_spliterator_card62);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card64 = linkedlist_stream_spliterator_card56.removeLast();
    java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_stream_spliterator_card65 = new java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b66 = arraylist_stream_spliterator_card65.add(stream_spliterator_card64);
    boolean b67 = linkedlist_stream_spliterator_card49.addAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_stream_spliterator_card65);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card68 = linkedlist_stream_spliterator_card49.pollLast();
    java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_stream_spliterator_card69 = new java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b70 = arraylist_stream_spliterator_card69.add(stream_spliterator_card4);
    boolean b71 = arraylist_stream_spliterator_card69.add(stream_spliterator_card18);
    boolean b72 = arraylist_stream_spliterator_card69.add(stream_spliterator_card34);
    boolean b73 = arraylist_stream_spliterator_card69.add(stream_spliterator_card48);
    boolean b74 = arraylist_stream_spliterator_card69.add(stream_spliterator_card68);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card75 = org.cs362.dominion.Randomness.randomMember((java.util.List<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_stream_spliterator_card69);
    // The following exception was thrown during execution in test generation
    try {
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card77 = arraylist_stream_spliterator_card69.get(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card75);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }

    java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_entry_randomAccess_array_set_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    int i1 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }

    java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_entry_randomAccess_array_set_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> entry_randomAccess_array_set_entry_serializable_str1 = null;
    boolean b2 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.add(entry_randomAccess_array_set_entry_serializable_str1);
    int i4 = arraylist_entry_randomAccess_array_set_entry_serializable_str0.lastIndexOf((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.peekFirst();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card18 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card19 = hashmap_iterable_entry_serializable_str_spliterator_card18.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = collection_spliterator_card19.stream();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card23 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card24 = hashmap_iterable_entry_serializable_str_spliterator_card23.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card25 = collection_spliterator_card24.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card26 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b27 = linkedlist_stream_spliterator_card26.add(stream_spliterator_card25);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card30 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card31 = hashmap_iterable_entry_serializable_str_spliterator_card30.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card32 = collection_spliterator_card31.stream();
    linkedlist_stream_spliterator_card26.addFirst(stream_spliterator_card32);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card34 = linkedlist_stream_spliterator_card26.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card35 = linkedlist_stream_spliterator_card26.getLast();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card38 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card39 = hashmap_iterable_entry_serializable_str_spliterator_card38.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card40 = collection_spliterator_card39.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card41 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b42 = linkedlist_stream_spliterator_card41.add(stream_spliterator_card40);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card45 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card46 = hashmap_iterable_entry_serializable_str_spliterator_card45.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card47 = collection_spliterator_card46.stream();
    linkedlist_stream_spliterator_card41.addFirst(stream_spliterator_card47);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card49 = linkedlist_stream_spliterator_card41.removeLast();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card50 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b51 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card15);
    boolean b52 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card20);
    boolean b53 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card35);
    boolean b54 = linkedlist_stream_spliterator_card50.add(stream_spliterator_card49);
    java.util.Iterator<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> iterator_stream_spliterator_card55 = linkedlist_stream_spliterator_card50.iterator();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card58 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card59 = hashmap_iterable_entry_serializable_str_spliterator_card58.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card60 = collection_spliterator_card59.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card61 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b62 = linkedlist_stream_spliterator_card61.add(stream_spliterator_card60);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card65 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card66 = hashmap_iterable_entry_serializable_str_spliterator_card65.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card67 = collection_spliterator_card66.stream();
    linkedlist_stream_spliterator_card61.addFirst(stream_spliterator_card67);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card69 = linkedlist_stream_spliterator_card61.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card70 = linkedlist_stream_spliterator_card61.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card71 = linkedlist_stream_spliterator_card61.peekFirst();
    boolean b72 = linkedlist_stream_spliterator_card50.offer(stream_spliterator_card71);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card73 = linkedlist_stream_spliterator_card50.element();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_stream_spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card73);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object obj2 = arraylist_entry_serializable_str0.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i3 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b4 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i3);
    java.util.Collection<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> collection_arraylist_comparable_str5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = arraylist_entry_player_i3.retainAll(collection_arraylist_comparable_str5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b4 = hashmap_serializable_str2.equals((java.lang.Object)1.0d);
    int i5 = hashmap_serializable_str2.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str6 = hashmap_serializable_str2.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str7 = hashmap_serializable_str2.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str9 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b11 = hashmap_serializable_str9.equals((java.lang.Object)1.0d);
    int i12 = hashmap_serializable_str9.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str13 = hashmap_serializable_str9.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str15 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b17 = hashmap_serializable_str15.equals((java.lang.Object)1.0d);
    hashmap_serializable_str9.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str15);
    hashmap_serializable_str2.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str9);
    boolean b20 = hashmap_serializable_str2.isEmpty();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card22 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str29 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b31 = hashmap_serializable_str29.equals((java.lang.Object)1.0d);
    int i32 = hashmap_serializable_str29.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str33 = hashmap_serializable_str29.entrySet();
    boolean b34 = hashmap_serializable_str27.equals((java.lang.Object)set_entry_serializable_str33);
    boolean b35 = arraylist_abstractcollection_card22.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str33);
    java.lang.Object[] obj_array36 = arraylist_abstractcollection_card22.toArray();
    boolean b37 = arraylist_abstractcollection_card22.isEmpty();
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.Card card41 = null;
    boolean b42 = arraylist_card39.add(card41);
    boolean b43 = arraylist_abstractcollection_card22.removeAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39);
    java.lang.String str45 = hashmap_serializable_str2.getOrDefault((java.lang.Object)b43, "hi!");
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str46 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str47 = arraylist_entry_serializable_str46.stream();
    java.lang.Object[] obj_array48 = arraylist_entry_serializable_str46.toArray();
    arraylist_entry_serializable_str46.trimToSize();
    java.lang.String str51 = hashmap_serializable_str2.replace((java.io.Serializable)arraylist_entry_serializable_str46, "");
    boolean b52 = linkedlist_arraylist_entry_serializable_str0.offerFirst(arraylist_entry_serializable_str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!"+ "'", str45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object obj2 = arraylist_entry_serializable_str0.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i3 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b4 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i3);
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str7 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    hashmap_randomAccess_array_set_entry_serializable_str7.clear();
    java.util.Collection<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> collection_set_entry_serializable_str9 = hashmap_randomAccess_array_set_entry_serializable_str7.values();
    boolean b10 = arraylist_entry_player_i3.retainAll(collection_set_entry_serializable_str9);
    java.util.ArrayList<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_set_entry_serializable_str11 = new java.util.ArrayList<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>(collection_set_entry_serializable_str9);
    java.util.function.UnaryOperator<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> unaryoperator_set_entry_serializable_str12 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_set_entry_serializable_str11.replaceAll(unaryoperator_set_entry_serializable_str12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_set_entry_serializable_str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }

    java.util.Random random0 = null;
    org.cs362.dominion.Randomness.random = random0;

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str1 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i2 = arraylist_entry_serializable_str1.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card3 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str6 = hashmap_type_cloneable5.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable8 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b10 = hashmap_type_cloneable8.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    int i25 = arraylist_card23.size();
    java.util.RandomAccess[] randomAccess_array26 = new java.util.RandomAccess[] { arraylist_card18, arraylist_card23 };
    java.util.RandomAccess[] randomAccess_array27 = arraylist_card13.toArray(randomAccess_array26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName28);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    int i34 = hashmap_serializable_str31.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str35 = hashmap_serializable_str31.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str37 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b39 = hashmap_serializable_str37.equals((java.lang.Object)1.0d);
    hashmap_serializable_str31.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str37);
    java.util.HashMap[] hashMap_array42 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array43 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array42;
    hashmap_serializable_str_array43[0] = hashmap_serializable_str37;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = arraylist_card13.toArray(hashmap_serializable_str_array43);
    java.lang.Cloneable cloneable47 = hashmap_type_cloneable8.replace(type11, (java.lang.Cloneable)hashmap_serializable_str_array43);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i52 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card49, cardName51);
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.createCards();
    boolean b54 = arraylist_card49.contains((java.lang.Object)list_card53);
    int i56 = arraylist_card49.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable57 = hashmap_type_cloneable5.put(type11, (java.lang.Cloneable)arraylist_card49);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card58 = hashmap_iterable_entry_serializable_str_spliterator_card3.remove((java.lang.Object)cloneable57);
    java.lang.Object obj59 = hashmap_iterable_entry_serializable_str_spliterator_card3.clone();
    int i60 = arraylist_entry_serializable_str1.indexOf(obj59);
    boolean b61 = linkedlist_arraylist_entry_serializable_str0.offerLast(arraylist_entry_serializable_str1);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card63 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card64 = arraylist_abstractcollection_card63.spliterator();
    org.cs362.dominion.Card[] card_array66 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card67 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card67, card_array66);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i70 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName69);
    java.util.List<org.cs362.dominion.Card> list_card71 = org.cs362.dominion.Card.createCards();
    boolean b72 = arraylist_card67.contains((java.lang.Object)list_card71);
    arraylist_abstractcollection_card63.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card67);
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i78 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName77);
    java.util.List<org.cs362.dominion.Card> list_card79 = org.cs362.dominion.Card.createCards();
    boolean b80 = arraylist_card75.contains((java.lang.Object)list_card79);
    org.cs362.dominion.Card.Type type81 = null;
    java.util.List<org.cs362.dominion.Card> list_card82 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card79, type81);
    boolean b83 = arraylist_card67.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card79);
    org.cs362.dominion.Card.CardName cardName84 = null;
    org.cs362.dominion.Card card85 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName84);
    org.cs362.dominion.Card.CardName cardName86 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card87 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card67, cardName86);
    boolean b88 = linkedlist_arraylist_entry_serializable_str0.removeLastOccurrence((java.lang.Object)card87);
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str89 = linkedlist_arraylist_entry_serializable_str0.removeFirst();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str90 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str91 = arraylist_entry_serializable_str90.parallelStream();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str92 = new java.util.HashMap<java.io.Serializable,java.lang.String>();
    int i93 = arraylist_entry_serializable_str90.indexOf((java.lang.Object)hashmap_serializable_str92);
    boolean b94 = linkedlist_arraylist_entry_serializable_str0.add(arraylist_entry_serializable_str90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{}"+ "'", str6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName86.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_entry_serializable_str89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }

    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str0 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b2 = arraylist_arraylist_comparable_str0.add(arraylist_comparable_str1);
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str3 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str4 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b5 = arraylist_arraylist_comparable_str3.add(arraylist_comparable_str4);
    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str6 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    boolean b7 = linkedlist_arraylist_arraylist_comparable_str6.add(arraylist_arraylist_comparable_str0);
    boolean b8 = linkedlist_arraylist_arraylist_comparable_str6.add(arraylist_arraylist_comparable_str3);
    java.lang.Object obj9 = linkedlist_arraylist_arraylist_comparable_str6.clone();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str10 = linkedlist_arraylist_arraylist_comparable_str6.peekFirst();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str11 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b13 = arraylist_arraylist_comparable_str11.add(arraylist_comparable_str12);
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str14 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b16 = arraylist_arraylist_comparable_str14.add(arraylist_comparable_str15);
    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str17 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    boolean b18 = linkedlist_arraylist_arraylist_comparable_str17.add(arraylist_arraylist_comparable_str11);
    boolean b19 = linkedlist_arraylist_arraylist_comparable_str17.add(arraylist_arraylist_comparable_str14);
    java.lang.Object obj20 = linkedlist_arraylist_arraylist_comparable_str17.clone();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str21 = linkedlist_arraylist_arraylist_comparable_str17.peekFirst();
    boolean b22 = arraylist_arraylist_comparable_str10.addAll((java.util.Collection<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>)arraylist_arraylist_comparable_str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_arraylist_comparable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_arraylist_comparable_str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card card3 = null;
    boolean b4 = arraylist_card1.add(card3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card40 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b41 = arraylist_abstractcollection_card40.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card42 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card40);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card43 = linkedlist_abstractcollection_card42.pollFirst();
    boolean b44 = arraylist_card1.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card42);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card45 = linkedlist_abstractcollection_card42.pollFirst();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card46 = linkedlist_abstractcollection_card42.iterator();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    int i69 = hashmap_serializable_str66.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str70 = hashmap_serializable_str66.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str72 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b74 = hashmap_serializable_str72.equals((java.lang.Object)1.0d);
    hashmap_serializable_str66.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str72);
    java.util.HashMap[] hashMap_array77 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array77;
    hashmap_serializable_str_array78[0] = hashmap_serializable_str72;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array81 = arraylist_card48.toArray(hashmap_serializable_str_array78);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card82 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b83 = arraylist_abstractcollection_card82.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card48);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card84 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card82);
    java.lang.Object[] obj_array85 = linkedlist_abstractcollection_card84.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card86 = linkedlist_abstractcollection_card84.getLast();
    boolean b87 = linkedlist_abstractcollection_card42.offerLast(abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card39 = linkedlist_abstractcollection_card37.getLast();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card41 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card42 = arraylist_abstractcollection_card41.spliterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.createCards();
    boolean b50 = arraylist_card45.contains((java.lang.Object)list_card49);
    arraylist_abstractcollection_card41.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    int i55 = arraylist_card53.size();
    boolean b57 = arraylist_card53.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    int i61 = arraylist_card59.size();
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    int i65 = arraylist_card63.size();
    boolean b67 = arraylist_card63.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i72 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card69, cardName71);
    org.cs362.dominion.Card[] card_array73 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card74 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card74, card_array73);
    org.cs362.dominion.Card.CardName cardName76 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i77 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card74, cardName76);
    org.cs362.dominion.Card[] card_array78 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card79 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card79, card_array78);
    int i81 = arraylist_card79.size();
    java.util.RandomAccess[] randomAccess_array82 = new java.util.RandomAccess[] { arraylist_card74, arraylist_card79 };
    java.util.RandomAccess[] randomAccess_array83 = arraylist_card69.toArray(randomAccess_array82);
    arraylist_card69.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card85 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b86 = linkedlist_abstractcollection_card85.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    boolean b87 = linkedlist_abstractcollection_card85.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card53);
    boolean b88 = linkedlist_abstractcollection_card85.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card59);
    boolean b89 = linkedlist_abstractcollection_card85.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card63);
    boolean b90 = linkedlist_abstractcollection_card85.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    int i92 = linkedlist_abstractcollection_card85.indexOf((java.lang.Object)(-1.0d));
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card93 = linkedlist_abstractcollection_card85.pollLast();
    boolean b94 = linkedlist_abstractcollection_card37.offerLast(abstractcollection_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName76.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    java.lang.Object obj4 = linkedlist_obj0.peekFirst();
    java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_entry_randomAccess_array_set_entry_serializable_str5 = new java.util.ArrayList<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    boolean b6 = linkedlist_obj0.addAll((java.util.Collection<java.util.Map.Entry<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>)arraylist_entry_randomAccess_array_set_entry_serializable_str5);
    java.lang.Object obj7 = linkedlist_obj0.poll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }

    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type0 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type2 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card4 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card5 = arraylist_abstractcollection_card4.spliterator();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    boolean b13 = arraylist_card8.contains((java.lang.Object)list_card12);
    arraylist_abstractcollection_card4.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i19 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    int i28 = arraylist_card26.size();
    java.util.RandomAccess[] randomAccess_array29 = new java.util.RandomAccess[] { arraylist_card21, arraylist_card26 };
    java.util.RandomAccess[] randomAccess_array30 = arraylist_card16.toArray(randomAccess_array29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName31);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    int i37 = hashmap_serializable_str34.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str38 = hashmap_serializable_str34.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str40 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b42 = hashmap_serializable_str40.equals((java.lang.Object)1.0d);
    hashmap_serializable_str34.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str40);
    java.util.HashMap[] hashMap_array45 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array45;
    hashmap_serializable_str_array46[0] = hashmap_serializable_str40;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array49 = arraylist_card16.toArray(hashmap_serializable_str_array46);
    boolean b50 = hashmap_type_cloneable1.replace(type2, (java.lang.Cloneable)arraylist_card8, (java.lang.Cloneable)hashmap_serializable_str_array49);
    java.util.Set<org.cs362.dominion.Card.Type> set_type51 = hashmap_type_cloneable1.keySet();
    boolean b52 = linkedlist_set_type0.offer(set_type51);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card54 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable56 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i61 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card58, cardName60);
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i66 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    int i70 = arraylist_card68.size();
    java.util.RandomAccess[] randomAccess_array71 = new java.util.RandomAccess[] { arraylist_card63, arraylist_card68 };
    java.util.RandomAccess[] randomAccess_array72 = arraylist_card58.toArray(randomAccess_array71);
    org.cs362.dominion.Card.CardName cardName73 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card74 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card58, cardName73);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str76 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b78 = hashmap_serializable_str76.equals((java.lang.Object)1.0d);
    int i79 = hashmap_serializable_str76.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str80 = hashmap_serializable_str76.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str82 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b84 = hashmap_serializable_str82.equals((java.lang.Object)1.0d);
    hashmap_serializable_str76.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str82);
    java.util.HashMap[] hashMap_array87 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array88 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array87;
    hashmap_serializable_str_array88[0] = hashmap_serializable_str82;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array91 = arraylist_card58.toArray(hashmap_serializable_str_array88);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card92 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b93 = arraylist_abstractcollection_card92.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card58);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card94 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card92);
    java.lang.Object[] obj_array95 = linkedlist_abstractcollection_card94.toArray();
    boolean b96 = hashmap_type_cloneable56.containsKey((java.lang.Object)linkedlist_abstractcollection_card94);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card97 = linkedlist_abstractcollection_card94.pollLast();
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card98 = hashmap_iterable_entry_serializable_str_spliterator_card54.remove((java.lang.Object)linkedlist_abstractcollection_card94);
    boolean b99 = linkedlist_set_type0.contains((java.lang.Object)spliterator_card98);
    org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type2.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array72);
    org.junit.Assert.assertTrue("'" + cardName73 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName73.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }

    java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_map_randomAccess_array_set_entry_serializable_str1 = new java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>((int)'4');
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str5 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    hashmap_randomAccess_array_set_entry_serializable_str5.clear();
    java.util.Collection<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> collection_set_entry_serializable_str7 = hashmap_randomAccess_array_set_entry_serializable_str5.values();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> map_randomAccess_array_set_entry_serializable_str8 = arraylist_map_randomAccess_array_set_entry_serializable_str1.set((int)' ', (java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_set_entry_serializable_str7);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i10 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    java.util.RandomAccess[] randomAccess_array20 = new java.util.RandomAccess[] { arraylist_card12, arraylist_card17 };
    java.util.RandomAccess[] randomAccess_array21 = arraylist_card7.toArray(randomAccess_array20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName22);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    int i28 = hashmap_serializable_str25.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str29 = hashmap_serializable_str25.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    hashmap_serializable_str25.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str31);
    java.util.HashMap[] hashMap_array36 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array36;
    hashmap_serializable_str_array37[0] = hashmap_serializable_str31;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = arraylist_card7.toArray(hashmap_serializable_str_array37);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card41 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b42 = arraylist_abstractcollection_card41.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card7);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card43 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card41);
    java.lang.Object[] obj_array44 = linkedlist_abstractcollection_card43.toArray();
    boolean b45 = hashmap_type_cloneable5.containsKey((java.lang.Object)linkedlist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card43.pollLast();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    boolean b65 = linkedlist_abstractcollection_card43.removeLastOccurrence((java.lang.Object)cardName63);
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card66 = linkedlist_abstractcollection_card43.listIterator();
    boolean b67 = linkedlist_obj0.add((java.lang.Object)linkedlist_abstractcollection_card43);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.lang.Object> listiterator_obj69 = linkedlist_obj0.listIterator(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }

    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str2 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    int i3 = hashmap_randomAccess_array_set_entry_serializable_str2.size();
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str4 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str7 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    hashmap_randomAccess_array_set_entry_serializable_str7.clear();
    java.util.Collection<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> collection_set_entry_serializable_str9 = hashmap_randomAccess_array_set_entry_serializable_str7.values();
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str10 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str13 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str14 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>> arraylist_map_randomAccess_array_set_entry_serializable_str15 = new java.util.ArrayList<java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>>();
    boolean b16 = arraylist_map_randomAccess_array_set_entry_serializable_str15.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str2);
    boolean b17 = arraylist_map_randomAccess_array_set_entry_serializable_str15.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str4);
    boolean b18 = arraylist_map_randomAccess_array_set_entry_serializable_str15.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str7);
    boolean b19 = arraylist_map_randomAccess_array_set_entry_serializable_str15.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str10);
    boolean b20 = arraylist_map_randomAccess_array_set_entry_serializable_str15.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str13);
    boolean b21 = arraylist_map_randomAccess_array_set_entry_serializable_str15.add((java.util.Map<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)hashmap_randomAccess_array_set_entry_serializable_str14);
    java.util.LinkedList<java.lang.Object> linkedlist_obj22 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = linkedlist_obj22.offerLast((java.lang.Object)arraylist_card23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card card28 = null;
    boolean b29 = arraylist_card26.add(card28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i34 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i39 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card36, cardName38);
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    int i43 = arraylist_card41.size();
    java.util.RandomAccess[] randomAccess_array44 = new java.util.RandomAccess[] { arraylist_card36, arraylist_card41 };
    java.util.RandomAccess[] randomAccess_array45 = arraylist_card31.toArray(randomAccess_array44);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card47 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName46);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str49 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b51 = hashmap_serializable_str49.equals((java.lang.Object)1.0d);
    int i52 = hashmap_serializable_str49.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str53 = hashmap_serializable_str49.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str55 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b57 = hashmap_serializable_str55.equals((java.lang.Object)1.0d);
    hashmap_serializable_str49.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str55);
    java.util.HashMap[] hashMap_array60 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array61 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array60;
    hashmap_serializable_str_array61[0] = hashmap_serializable_str55;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array64 = arraylist_card31.toArray(hashmap_serializable_str_array61);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card65 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b66 = arraylist_abstractcollection_card65.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card31);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card67 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card65);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card68 = linkedlist_abstractcollection_card67.pollFirst();
    boolean b69 = arraylist_card26.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card67);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card70 = arraylist_card26.listIterator();
    boolean b71 = linkedlist_obj22.equals((java.lang.Object)listiterator_card70);
    java.util.Iterator<java.lang.Object> iterator_obj72 = linkedlist_obj22.descendingIterator();
    int i73 = arraylist_map_randomAccess_array_set_entry_serializable_str15.indexOf((java.lang.Object)iterator_obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_set_entry_serializable_str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == (-1));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }

    java.util.HashMap<java.util.Set<org.cs362.dominion.Card.Type>,java.util.AbstractCollection<java.lang.Object>> hashmap_set_type_abstractcollection_obj1 = new java.util.HashMap<java.util.Set<org.cs362.dominion.Card.Type>,java.util.AbstractCollection<java.lang.Object>>(3);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card card5 = null;
    boolean b6 = arraylist_card3.add(card5);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str8 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b10 = hashmap_serializable_str8.equals((java.lang.Object)1.0d);
    int i11 = hashmap_serializable_str8.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str12 = hashmap_serializable_str8.entrySet();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str13 = hashmap_serializable_str8.entrySet();
    boolean b14 = arraylist_card3.containsAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str13);
    arraylist_card3.clear();
    boolean b16 = hashmap_set_type_abstractcollection_obj1.containsKey((java.lang.Object)arraylist_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card39 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str41 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b43 = hashmap_serializable_str41.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str41);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str46 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b48 = hashmap_serializable_str46.equals((java.lang.Object)1.0d);
    int i49 = hashmap_serializable_str46.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str50 = hashmap_serializable_str46.entrySet();
    boolean b51 = hashmap_serializable_str44.equals((java.lang.Object)set_entry_serializable_str50);
    boolean b52 = arraylist_abstractcollection_card39.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str50);
    java.lang.Object[] obj_array53 = arraylist_abstractcollection_card39.toArray();
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i58 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName57);
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.createCards();
    boolean b60 = arraylist_card55.contains((java.lang.Object)list_card59);
    org.cs362.dominion.Card.Type type61 = null;
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type61);
    int i63 = arraylist_abstractcollection_card39.lastIndexOf((java.lang.Object)list_card59);
    boolean b64 = linkedlist_abstractcollection_card37.contains((java.lang.Object)list_card59);
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    int i68 = arraylist_card66.size();
    boolean b70 = arraylist_card66.equals((java.lang.Object)(-1.0f));
    int i71 = linkedlist_abstractcollection_card37.lastIndexOf((java.lang.Object)arraylist_card66);
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    int i75 = arraylist_card73.size();
    org.cs362.dominion.Card card76 = null;
    boolean b77 = arraylist_card73.add(card76);
    org.cs362.dominion.Card card79 = arraylist_card73.get((int)(byte)0);
    boolean b80 = arraylist_card66.retainAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card82 = arraylist_card73.listIterator(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    org.cs362.dominion.Card card4 = null;
    player2.discard(card4);
    player2.playTreasureCard();
    java.lang.String str7 = player2.toString();
    java.lang.String str8 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    // Regression assertion (captures the current behavior of the code)

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable2 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(3, (float)'#');
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str4 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b6 = hashmap_serializable_str4.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str4);
    boolean b8 = hashmap_type_cloneable2.containsKey((java.lang.Object)hashmap_serializable_str7);
    boolean b9 = hashmap_type_cloneable2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }

    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str0 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b2 = arraylist_arraylist_comparable_str0.add(arraylist_comparable_str1);
    java.util.function.UnaryOperator<java.lang.Comparable<java.lang.String>> unaryoperator_comparable_str3 = null;
    // The following exception was thrown during execution in test generation
    try {
    arraylist_comparable_str1.replaceAll(unaryoperator_comparable_str3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card37);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card40 = linkedlist_abstractcollection_card39.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card41 = linkedlist_abstractcollection_card39.peekFirst();
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card42 = linkedlist_abstractcollection_card39.listIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    org.cs362.dominion.Card card79 = null;
    boolean b80 = arraylist_card45.add(card79);
    linkedlist_abstractcollection_card39.add((int)(byte)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card82 = linkedlist_abstractcollection_card39.removeLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card82);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }

    java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type> hashmap_randomness_type0 = new java.util.HashMap<org.cs362.dominion.Randomness,org.cs362.dominion.Card.Type>();
    int i1 = hashmap_randomness_type0.size();
    boolean b2 = hashmap_randomness_type0.isEmpty();
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i7 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    java.util.RandomAccess[] randomAccess_array17 = new java.util.RandomAccess[] { arraylist_card9, arraylist_card14 };
    java.util.RandomAccess[] randomAccess_array18 = arraylist_card4.toArray(randomAccess_array17);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName19);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str22 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b24 = hashmap_serializable_str22.equals((java.lang.Object)1.0d);
    int i25 = hashmap_serializable_str22.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str26 = hashmap_serializable_str22.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str28 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b30 = hashmap_serializable_str28.equals((java.lang.Object)1.0d);
    hashmap_serializable_str22.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str28);
    java.util.HashMap[] hashMap_array33 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array33;
    hashmap_serializable_str_array34[0] = hashmap_serializable_str28;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = arraylist_card4.toArray(hashmap_serializable_str_array34);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card38 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b39 = arraylist_abstractcollection_card38.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card4);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card40 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card38);
    java.lang.Object[] obj_array41 = linkedlist_abstractcollection_card40.toArray();
    java.lang.Object obj42 = linkedlist_abstractcollection_card40.clone();
    boolean b43 = hashmap_randomness_type0.containsValue(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }

    java.util.ArrayList<java.util.AbstractList<java.lang.Object>> arraylist_abstractlist_obj1 = new java.util.ArrayList<java.util.AbstractList<java.lang.Object>>((int)'4');
    java.util.ArrayList<java.util.AbstractList<java.lang.Object>> arraylist_abstractlist_obj3 = new java.util.ArrayList<java.util.AbstractList<java.lang.Object>>((int)'4');
    boolean b4 = arraylist_abstractlist_obj1.addAll((java.util.Collection<java.util.AbstractList<java.lang.Object>>)arraylist_abstractlist_obj3);
    java.lang.Object obj5 = arraylist_abstractlist_obj3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }

    java.util.LinkedList<java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>> linkedlist_abstractcollection_entry_player_i0 = new java.util.LinkedList<java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> abstractcollection_entry_player_i1 = linkedlist_abstractcollection_entry_player_i0.element();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    gameState90.initializeGame();
    java.lang.String str93 = gameState90.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.getWinners();
    org.cs362.dominion.Card card95 = null;
    gameState90.addEmbargo(card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
 
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    boolean b92 = gameState90.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i94 = gameState90.play();
    org.cs362.dominion.GameState gameState95 = gameState90.clone();
    java.util.List<org.cs362.dominion.Card> list_card96 = gameState95.embargo;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card96);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.lang.Object[] obj_array1 = linkedlist_obj0.toArray();
    java.lang.Object obj2 = linkedlist_obj0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj2);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }

    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type0 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type2 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card4 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card5 = arraylist_abstractcollection_card4.spliterator();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    boolean b13 = arraylist_card8.contains((java.lang.Object)list_card12);
    arraylist_abstractcollection_card4.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i19 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    int i28 = arraylist_card26.size();
    java.util.RandomAccess[] randomAccess_array29 = new java.util.RandomAccess[] { arraylist_card21, arraylist_card26 };
    java.util.RandomAccess[] randomAccess_array30 = arraylist_card16.toArray(randomAccess_array29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName31);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str34 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b36 = hashmap_serializable_str34.equals((java.lang.Object)1.0d);
    int i37 = hashmap_serializable_str34.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str38 = hashmap_serializable_str34.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str40 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b42 = hashmap_serializable_str40.equals((java.lang.Object)1.0d);
    hashmap_serializable_str34.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str40);
    java.util.HashMap[] hashMap_array45 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array46 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array45;
    hashmap_serializable_str_array46[0] = hashmap_serializable_str40;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array49 = arraylist_card16.toArray(hashmap_serializable_str_array46);
    boolean b50 = hashmap_type_cloneable1.replace(type2, (java.lang.Cloneable)arraylist_card8, (java.lang.Cloneable)hashmap_serializable_str_array49);
    java.util.Set<org.cs362.dominion.Card.Type> set_type51 = hashmap_type_cloneable1.keySet();
    boolean b52 = linkedlist_set_type0.offer(set_type51);
    java.util.Set<org.cs362.dominion.Card.Type> set_type53 = linkedlist_set_type0.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<org.cs362.dominion.Card.Type> set_type54 = linkedlist_set_type0.pop();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type2.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type53);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    gameState90.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    java.util.List<org.cs362.dominion.Card> list_card94 = gameState90.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i95 = gameState90.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i95);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    int i1 = linkedlist_stream_spliterator_card0.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card4 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card5 = hashmap_iterable_entry_serializable_str_spliterator_card4.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card6 = collection_spliterator_card5.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card7 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b8 = linkedlist_stream_spliterator_card7.add(stream_spliterator_card6);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card11 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card12 = hashmap_iterable_entry_serializable_str_spliterator_card11.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = collection_spliterator_card12.stream();
    linkedlist_stream_spliterator_card7.addFirst(stream_spliterator_card13);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card7.removeLast();
    java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_stream_spliterator_card16 = new java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b17 = arraylist_stream_spliterator_card16.add(stream_spliterator_card15);
    boolean b18 = linkedlist_stream_spliterator_card0.addAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_stream_spliterator_card16);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> list_stream_spliterator_card21 = arraylist_stream_spliterator_card16.subList((int)'4', 3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }

    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str0 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b2 = arraylist_arraylist_comparable_str0.add(arraylist_comparable_str1);
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str3 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str4 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b5 = arraylist_arraylist_comparable_str3.add(arraylist_comparable_str4);
    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str6 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    boolean b7 = linkedlist_arraylist_arraylist_comparable_str6.add(arraylist_arraylist_comparable_str0);
    boolean b8 = linkedlist_arraylist_arraylist_comparable_str6.add(arraylist_arraylist_comparable_str3);
    java.lang.Object obj9 = linkedlist_arraylist_arraylist_comparable_str6.clone();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str10 = linkedlist_arraylist_arraylist_comparable_str6.removeLast();
    java.util.Spliterator<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> spliterator_arraylist_arraylist_comparable_str11 = linkedlist_arraylist_arraylist_comparable_str6.spliterator();
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> list_arraylist_arraylist_comparable_str14 = linkedlist_arraylist_arraylist_comparable_str6.subList((int)'a', (int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_arraylist_comparable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_arraylist_arraylist_comparable_str11);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card18 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card19 = hashmap_iterable_entry_serializable_str_spliterator_card18.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = collection_spliterator_card19.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card21 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b22 = linkedlist_stream_spliterator_card21.add(stream_spliterator_card20);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card25 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card26 = hashmap_iterable_entry_serializable_str_spliterator_card25.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card27 = collection_spliterator_card26.stream();
    linkedlist_stream_spliterator_card21.addFirst(stream_spliterator_card27);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card29 = linkedlist_stream_spliterator_card21.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card30 = linkedlist_stream_spliterator_card21.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card31 = linkedlist_stream_spliterator_card21.peekFirst();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card31);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card33 = linkedlist_stream_spliterator_card5.pop();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card34 = linkedlist_stream_spliterator_card5.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(stream_spliterator_card34);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card card6 = null;
    boolean b7 = arraylist_card4.add(card6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card45.pollFirst();
    boolean b47 = arraylist_card4.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card45);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card48 = arraylist_card4.listIterator();
    boolean b49 = linkedlist_obj0.equals((java.lang.Object)listiterator_card48);
    java.lang.Object obj50 = linkedlist_obj0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.lang.Object[] obj_array1 = linkedlist_arraylist_entry_serializable_str0.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = linkedlist_arraylist_entry_serializable_str0.peekLast();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str3 = linkedlist_arraylist_entry_serializable_str0.peekLast();
    int i4 = linkedlist_arraylist_entry_serializable_str0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(arraylist_entry_serializable_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(arraylist_entry_serializable_str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState90.cards;
    gameState90.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = null;
    gameState90.gameBoard = hashmap_card_i93;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState95 = gameState90.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str1 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i3 = arraylist_entry_serializable_str2.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card4 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable6 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str7 = hashmap_type_cloneable6.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable9 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b11 = hashmap_type_cloneable9.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i22 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    java.util.RandomAccess[] randomAccess_array27 = new java.util.RandomAccess[] { arraylist_card19, arraylist_card24 };
    java.util.RandomAccess[] randomAccess_array28 = arraylist_card14.toArray(randomAccess_array27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName29);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str32 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b34 = hashmap_serializable_str32.equals((java.lang.Object)1.0d);
    int i35 = hashmap_serializable_str32.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str36 = hashmap_serializable_str32.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    hashmap_serializable_str32.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str38);
    java.util.HashMap[] hashMap_array43 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array44 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array43;
    hashmap_serializable_str_array44[0] = hashmap_serializable_str38;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array47 = arraylist_card14.toArray(hashmap_serializable_str_array44);
    java.lang.Cloneable cloneable48 = hashmap_type_cloneable9.replace(type12, (java.lang.Cloneable)hashmap_serializable_str_array44);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    java.util.List<org.cs362.dominion.Card> list_card54 = org.cs362.dominion.Card.createCards();
    boolean b55 = arraylist_card50.contains((java.lang.Object)list_card54);
    int i57 = arraylist_card50.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable58 = hashmap_type_cloneable6.put(type12, (java.lang.Cloneable)arraylist_card50);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card59 = hashmap_iterable_entry_serializable_str_spliterator_card4.remove((java.lang.Object)cloneable58);
    java.lang.Object obj60 = hashmap_iterable_entry_serializable_str_spliterator_card4.clone();
    int i61 = arraylist_entry_serializable_str2.indexOf(obj60);
    boolean b62 = linkedlist_arraylist_entry_serializable_str1.offerLast(arraylist_entry_serializable_str2);
    boolean b63 = linkedlist_arraylist_entry_serializable_str0.addAll((java.util.Collection<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>)linkedlist_arraylist_entry_serializable_str1);
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str64 = linkedlist_arraylist_entry_serializable_str1.pop();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str65 = linkedlist_arraylist_entry_serializable_str1.remove();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "{}"+ "'", str7.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_entry_serializable_str64);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str1 = new java.util.HashMap<java.io.Serializable,java.lang.String>((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b3 = hashmap_type_cloneable1.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i14 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    int i18 = arraylist_card16.size();
    java.util.RandomAccess[] randomAccess_array19 = new java.util.RandomAccess[] { arraylist_card11, arraylist_card16 };
    java.util.RandomAccess[] randomAccess_array20 = arraylist_card6.toArray(randomAccess_array19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName21);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str24 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b26 = hashmap_serializable_str24.equals((java.lang.Object)1.0d);
    int i27 = hashmap_serializable_str24.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str28 = hashmap_serializable_str24.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str30 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b32 = hashmap_serializable_str30.equals((java.lang.Object)1.0d);
    hashmap_serializable_str24.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str30);
    java.util.HashMap[] hashMap_array35 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array35;
    hashmap_serializable_str_array36[0] = hashmap_serializable_str30;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = arraylist_card6.toArray(hashmap_serializable_str_array36);
    java.lang.Cloneable cloneable40 = hashmap_type_cloneable1.replace(type4, (java.lang.Cloneable)hashmap_serializable_str_array36);
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i45 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i50 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    int i54 = arraylist_card52.size();
    java.util.RandomAccess[] randomAccess_array55 = new java.util.RandomAccess[] { arraylist_card47, arraylist_card52 };
    java.util.RandomAccess[] randomAccess_array56 = arraylist_card42.toArray(randomAccess_array55);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card58 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName57);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str60 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b62 = hashmap_serializable_str60.equals((java.lang.Object)1.0d);
    int i63 = hashmap_serializable_str60.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str64 = hashmap_serializable_str60.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str66 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b68 = hashmap_serializable_str66.equals((java.lang.Object)1.0d);
    hashmap_serializable_str60.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str66);
    java.util.HashMap[] hashMap_array71 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array72 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array71;
    hashmap_serializable_str_array72[0] = hashmap_serializable_str66;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = arraylist_card42.toArray(hashmap_serializable_str_array72);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card76 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b77 = arraylist_abstractcollection_card76.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card42);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card78 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card76);
    java.lang.Object[] obj_array79 = linkedlist_abstractcollection_card78.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card80 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card78);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card81 = linkedlist_abstractcollection_card80.remove();
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card80.toArray();
    java.lang.Object obj83 = linkedlist_abstractcollection_card80.clone();
    java.lang.Cloneable cloneable84 = hashmap_type_cloneable1.remove((java.lang.Object)linkedlist_abstractcollection_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type4.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable84);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card18 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card19 = hashmap_iterable_entry_serializable_str_spliterator_card18.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = collection_spliterator_card19.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card21 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b22 = linkedlist_stream_spliterator_card21.add(stream_spliterator_card20);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card25 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card26 = hashmap_iterable_entry_serializable_str_spliterator_card25.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card27 = collection_spliterator_card26.stream();
    linkedlist_stream_spliterator_card21.addFirst(stream_spliterator_card27);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card29 = linkedlist_stream_spliterator_card21.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card30 = linkedlist_stream_spliterator_card21.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card31 = linkedlist_stream_spliterator_card21.peekFirst();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card31);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> list_stream_spliterator_card35 = linkedlist_stream_spliterator_card5.subList((int)(byte)0, 4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card31);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }

    java.util.ArrayList<java.util.AbstractList<java.lang.Object>> arraylist_abstractlist_obj0 = new java.util.ArrayList<java.util.AbstractList<java.lang.Object>>();
    java.util.Iterator<java.util.AbstractList<java.lang.Object>> iterator_abstractlist_obj1 = arraylist_abstractlist_obj0.iterator();
    java.util.ArrayList<java.util.AbstractList<java.lang.Object>> arraylist_abstractlist_obj2 = new java.util.ArrayList<java.util.AbstractList<java.lang.Object>>((java.util.Collection<java.util.AbstractList<java.lang.Object>>)arraylist_abstractlist_obj0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractlist_obj1);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }

    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str0 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str1 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b2 = arraylist_arraylist_comparable_str0.add(arraylist_comparable_str1);
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str3 = new java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>();
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str4 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b5 = arraylist_arraylist_comparable_str3.add(arraylist_comparable_str4);
    java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>> linkedlist_arraylist_arraylist_comparable_str6 = new java.util.LinkedList<java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>>();
    boolean b7 = linkedlist_arraylist_arraylist_comparable_str6.add(arraylist_arraylist_comparable_str0);
    boolean b8 = linkedlist_arraylist_arraylist_comparable_str6.add(arraylist_arraylist_comparable_str3);
    java.lang.Object obj9 = linkedlist_arraylist_arraylist_comparable_str6.clone();
    java.util.ArrayList<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> arraylist_arraylist_comparable_str10 = linkedlist_arraylist_arraylist_comparable_str6.remove();
    java.util.LinkedList<java.lang.Object> linkedlist_obj11 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = linkedlist_obj11.offerLast((java.lang.Object)arraylist_card12);
    java.lang.Object obj14 = linkedlist_obj11.removeLast();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable16 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i26 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    int i30 = arraylist_card28.size();
    java.util.RandomAccess[] randomAccess_array31 = new java.util.RandomAccess[] { arraylist_card23, arraylist_card28 };
    java.util.RandomAccess[] randomAccess_array32 = arraylist_card18.toArray(randomAccess_array31);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName33);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str36 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b38 = hashmap_serializable_str36.equals((java.lang.Object)1.0d);
    int i39 = hashmap_serializable_str36.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str40 = hashmap_serializable_str36.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b44 = hashmap_serializable_str42.equals((java.lang.Object)1.0d);
    hashmap_serializable_str36.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str42);
    java.util.HashMap[] hashMap_array47 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array48 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array47;
    hashmap_serializable_str_array48[0] = hashmap_serializable_str42;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = arraylist_card18.toArray(hashmap_serializable_str_array48);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card52 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b53 = arraylist_abstractcollection_card52.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card18);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card54 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card52);
    java.lang.Object[] obj_array55 = linkedlist_abstractcollection_card54.toArray();
    boolean b56 = hashmap_type_cloneable16.containsKey((java.lang.Object)linkedlist_abstractcollection_card54);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card57 = linkedlist_abstractcollection_card54.pollLast();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i62 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    org.cs362.dominion.Card.CardName cardName66 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i67 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card64, cardName66);
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    int i71 = arraylist_card69.size();
    java.util.RandomAccess[] randomAccess_array72 = new java.util.RandomAccess[] { arraylist_card64, arraylist_card69 };
    java.util.RandomAccess[] randomAccess_array73 = arraylist_card59.toArray(randomAccess_array72);
    org.cs362.dominion.Card.CardName cardName74 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card75 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName74);
    boolean b76 = linkedlist_abstractcollection_card54.removeLastOccurrence((java.lang.Object)cardName74);
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card77 = linkedlist_abstractcollection_card54.listIterator();
    boolean b78 = linkedlist_obj11.add((java.lang.Object)linkedlist_abstractcollection_card54);
    java.lang.Object obj79 = linkedlist_obj11.getFirst();
    int i80 = arraylist_arraylist_comparable_str10.lastIndexOf((java.lang.Object)linkedlist_obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_arraylist_comparable_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName66.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array73);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName74.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == (-1));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    int i1 = linkedlist_stream_spliterator_card0.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card4 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card5 = hashmap_iterable_entry_serializable_str_spliterator_card4.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card6 = collection_spliterator_card5.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card7 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b8 = linkedlist_stream_spliterator_card7.add(stream_spliterator_card6);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card11 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card12 = hashmap_iterable_entry_serializable_str_spliterator_card11.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = collection_spliterator_card12.stream();
    linkedlist_stream_spliterator_card7.addFirst(stream_spliterator_card13);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card7.removeLast();
    java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_stream_spliterator_card16 = new java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b17 = arraylist_stream_spliterator_card16.add(stream_spliterator_card15);
    boolean b18 = linkedlist_stream_spliterator_card0.addAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_stream_spliterator_card16);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card19 = linkedlist_stream_spliterator_card0.pollLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = linkedlist_stream_spliterator_card0.peek();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card21 = linkedlist_stream_spliterator_card0.peekFirst();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card23 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    int i24 = linkedlist_stream_spliterator_card23.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card27 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card28 = hashmap_iterable_entry_serializable_str_spliterator_card27.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card29 = collection_spliterator_card28.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card30 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b31 = linkedlist_stream_spliterator_card30.add(stream_spliterator_card29);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card34 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card35 = hashmap_iterable_entry_serializable_str_spliterator_card34.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card36 = collection_spliterator_card35.stream();
    linkedlist_stream_spliterator_card30.addFirst(stream_spliterator_card36);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card38 = linkedlist_stream_spliterator_card30.removeLast();
    java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_stream_spliterator_card39 = new java.util.ArrayList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b40 = arraylist_stream_spliterator_card39.add(stream_spliterator_card38);
    boolean b41 = linkedlist_stream_spliterator_card23.addAll((java.util.Collection<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_stream_spliterator_card39);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card42 = linkedlist_stream_spliterator_card23.pollLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card43 = linkedlist_stream_spliterator_card23.peek();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card46 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card47 = hashmap_iterable_entry_serializable_str_spliterator_card46.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card48 = collection_spliterator_card47.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card49 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b50 = linkedlist_stream_spliterator_card49.add(stream_spliterator_card48);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card53 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card54 = hashmap_iterable_entry_serializable_str_spliterator_card53.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card55 = collection_spliterator_card54.stream();
    linkedlist_stream_spliterator_card49.addFirst(stream_spliterator_card55);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card60 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card61 = hashmap_iterable_entry_serializable_str_spliterator_card60.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card62 = collection_spliterator_card61.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card63 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b64 = linkedlist_stream_spliterator_card63.add(stream_spliterator_card62);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card67 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card68 = hashmap_iterable_entry_serializable_str_spliterator_card67.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card69 = collection_spliterator_card68.stream();
    linkedlist_stream_spliterator_card63.addFirst(stream_spliterator_card69);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card71 = linkedlist_stream_spliterator_card49.set(1, stream_spliterator_card69);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card72 = linkedlist_stream_spliterator_card49.pollFirst();
    linkedlist_stream_spliterator_card23.addFirst(stream_spliterator_card72);
    // The following exception was thrown during execution in test generation
    try {
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card74 = linkedlist_stream_spliterator_card0.set(9, stream_spliterator_card72);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(stream_spliterator_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(stream_spliterator_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card72);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }

    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str2 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b3 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"{}");
    boolean b4 = arraylist_comparable_str2.add((java.lang.Comparable<java.lang.String>)"");
    java.util.ArrayList<java.lang.Comparable<java.lang.String>> arraylist_comparable_str8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
    boolean b9 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b10 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)"hi!");
    boolean b11 = arraylist_comparable_str8.add((java.lang.Comparable<java.lang.String>)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b12 = arraylist_comparable_str2.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>)arraylist_comparable_str8);
    int i13 = arraylist_comparable_str2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.parallelStream();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str2 = new java.util.HashMap<java.io.Serializable,java.lang.String>();
    int i3 = arraylist_entry_serializable_str0.indexOf((java.lang.Object)hashmap_serializable_str2);
    boolean b4 = hashmap_serializable_str2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    gameState90.initializeGame();
    java.lang.String str93 = gameState90.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i94 = gameState90.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i95 = gameState90.gameBoard;
    org.cs362.dominion.Card card96 = null;
    gameState90.addEmbargo(card96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)

    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i95);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }

    java.util.LinkedList<java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>> linkedlist_abstractcollection_entry_player_i0 = new java.util.LinkedList<java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str3 = arraylist_entry_serializable_str2.stream();
    java.lang.Object obj4 = arraylist_entry_serializable_str2.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i5 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b6 = arraylist_entry_serializable_str2.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i5);
    // The following exception was thrown during execution in test generation
    try {
    java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> abstractcollection_entry_player_i7 = linkedlist_abstractcollection_entry_player_i0.set((int)' ', (java.util.AbstractCollection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i91 = gameState90.getWinners();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState90.gameBoard;
    org.cs362.dominion.Card card93 = null;
    java.lang.Integer i95 = hashmap_card_i92.putIfAbsent(card93, (java.lang.Integer)61);
    org.cs362.dominion.Card card96 = null;
    java.lang.Integer i98 = hashmap_card_i92.replace(card96, (java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i98 + "' != '" + 61+ "'", i98.equals(61));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }

    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type0 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>> linkedlist_set_type2 = new java.util.LinkedList<java.util.Set<org.cs362.dominion.Card.Type>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable3 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card6 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card7 = arraylist_abstractcollection_card6.spliterator();
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i13 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.createCards();
    boolean b15 = arraylist_card10.contains((java.lang.Object)list_card14);
    arraylist_abstractcollection_card6.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card10);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i21 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i26 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    int i30 = arraylist_card28.size();
    java.util.RandomAccess[] randomAccess_array31 = new java.util.RandomAccess[] { arraylist_card23, arraylist_card28 };
    java.util.RandomAccess[] randomAccess_array32 = arraylist_card18.toArray(randomAccess_array31);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName33);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str36 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b38 = hashmap_serializable_str36.equals((java.lang.Object)1.0d);
    int i39 = hashmap_serializable_str36.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str40 = hashmap_serializable_str36.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str42 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b44 = hashmap_serializable_str42.equals((java.lang.Object)1.0d);
    hashmap_serializable_str36.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str42);
    java.util.HashMap[] hashMap_array47 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array48 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array47;
    hashmap_serializable_str_array48[0] = hashmap_serializable_str42;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = arraylist_card18.toArray(hashmap_serializable_str_array48);
    boolean b52 = hashmap_type_cloneable3.replace(type4, (java.lang.Cloneable)arraylist_card10, (java.lang.Cloneable)hashmap_serializable_str_array51);
    java.util.Set<org.cs362.dominion.Card.Type> set_type53 = hashmap_type_cloneable3.keySet();
    boolean b54 = linkedlist_set_type2.offer(set_type53);
    boolean b55 = linkedlist_set_type0.addAll(0, (java.util.Collection<java.util.Set<org.cs362.dominion.Card.Type>>)linkedlist_set_type2);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<org.cs362.dominion.Card.Type> set_type57 = linkedlist_set_type2.remove((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.lang.Object[] obj_array1 = linkedlist_arraylist_entry_serializable_str0.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = linkedlist_arraylist_entry_serializable_str0.peekLast();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str3 = linkedlist_arraylist_entry_serializable_str0.peekLast();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str4 = linkedlist_arraylist_entry_serializable_str0.removeFirst();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(arraylist_entry_serializable_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(arraylist_entry_serializable_str3);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card2 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card2.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card4 = collection_spliterator_card3.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card5 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b6 = linkedlist_stream_spliterator_card5.add(stream_spliterator_card4);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card9 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card10 = hashmap_iterable_entry_serializable_str_spliterator_card9.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card11 = collection_spliterator_card10.stream();
    linkedlist_stream_spliterator_card5.addFirst(stream_spliterator_card11);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card13 = linkedlist_stream_spliterator_card5.removeLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card14 = linkedlist_stream_spliterator_card5.getLast();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card15 = linkedlist_stream_spliterator_card5.poll();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card18 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card19 = hashmap_iterable_entry_serializable_str_spliterator_card18.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card20 = collection_spliterator_card19.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card21 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b22 = linkedlist_stream_spliterator_card21.add(stream_spliterator_card20);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card25 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card26 = hashmap_iterable_entry_serializable_str_spliterator_card25.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card27 = collection_spliterator_card26.stream();
    linkedlist_stream_spliterator_card21.addFirst(stream_spliterator_card27);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card32 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card33 = hashmap_iterable_entry_serializable_str_spliterator_card32.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card34 = collection_spliterator_card33.stream();
    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card35 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    boolean b36 = linkedlist_stream_spliterator_card35.add(stream_spliterator_card34);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card39 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    java.util.Collection<java.util.Spliterator<org.cs362.dominion.Card>> collection_spliterator_card40 = hashmap_iterable_entry_serializable_str_spliterator_card39.values();
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card41 = collection_spliterator_card40.stream();
    linkedlist_stream_spliterator_card35.addFirst(stream_spliterator_card41);
    java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>> stream_spliterator_card43 = linkedlist_stream_spliterator_card21.set(1, stream_spliterator_card41);
    linkedlist_stream_spliterator_card5.addLast(stream_spliterator_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_spliterator_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_spliterator_card43);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }

    java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>> linkedlist_stream_spliterator_card0 = new java.util.LinkedList<java.util.stream.Stream<java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card2 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card3 = arraylist_abstractcollection_card2.spliterator();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.createCards();
    boolean b11 = arraylist_card6.contains((java.lang.Object)list_card10);
    arraylist_abstractcollection_card2.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    int i16 = arraylist_card14.size();
    boolean b18 = arraylist_card14.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    int i22 = arraylist_card20.size();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    int i26 = arraylist_card24.size();
    boolean b28 = arraylist_card24.equals((java.lang.Object)(-1.0f));
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i33 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i38 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    int i42 = arraylist_card40.size();
    java.util.RandomAccess[] randomAccess_array43 = new java.util.RandomAccess[] { arraylist_card35, arraylist_card40 };
    java.util.RandomAccess[] randomAccess_array44 = arraylist_card30.toArray(randomAccess_array43);
    arraylist_card30.trimToSize();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card46 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b47 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card6);
    boolean b48 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card14);
    boolean b49 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card20);
    boolean b50 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card24);
    boolean b51 = linkedlist_abstractcollection_card46.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card30);
    int i53 = linkedlist_abstractcollection_card46.indexOf((java.lang.Object)(-1.0d));
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card56 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card57 = arraylist_abstractcollection_card56.spliterator();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i63 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card60, cardName62);
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.createCards();
    boolean b65 = arraylist_card60.contains((java.lang.Object)list_card64);
    arraylist_abstractcollection_card56.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card60);
    arraylist_abstractcollection_card56.clear();
    org.cs362.dominion.Card[] card_array68 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card69, card_array68);
    int i71 = arraylist_card69.size();
    boolean b72 = arraylist_abstractcollection_card56.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card73 = linkedlist_abstractcollection_card46.set((int)(short)1, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card69);
    boolean b74 = linkedlist_stream_spliterator_card0.removeFirstOccurrence((java.lang.Object)linkedlist_abstractcollection_card46);
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card77 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)100, (float)'#');
    org.cs362.dominion.GameState gameState78 = null;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState78, "hi!");
    boolean b81 = hashmap_iterable_entry_serializable_str_spliterator_card77.containsKey((java.lang.Object)gameState78);
    boolean b82 = linkedlist_stream_spliterator_card0.removeFirstOccurrence((java.lang.Object)gameState78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable1 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i6 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i11 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    int i15 = arraylist_card13.size();
    java.util.RandomAccess[] randomAccess_array16 = new java.util.RandomAccess[] { arraylist_card8, arraylist_card13 };
    java.util.RandomAccess[] randomAccess_array17 = arraylist_card3.toArray(randomAccess_array16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card3, cardName18);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str21 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b23 = hashmap_serializable_str21.equals((java.lang.Object)1.0d);
    int i24 = hashmap_serializable_str21.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str25 = hashmap_serializable_str21.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    hashmap_serializable_str21.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str27);
    java.util.HashMap[] hashMap_array32 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array33 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array32;
    hashmap_serializable_str_array33[0] = hashmap_serializable_str27;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array36 = arraylist_card3.toArray(hashmap_serializable_str_array33);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card37 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b38 = arraylist_abstractcollection_card37.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card3);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card39 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card37);
    java.lang.Object[] obj_array40 = linkedlist_abstractcollection_card39.toArray();
    boolean b41 = hashmap_type_cloneable1.containsKey((java.lang.Object)linkedlist_abstractcollection_card39);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card42 = linkedlist_abstractcollection_card39.pollLast();
    java.util.Iterator<java.util.AbstractCollection<org.cs362.dominion.Card>> iterator_abstractcollection_card43 = linkedlist_abstractcollection_card39.descendingIterator();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i53 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    int i57 = arraylist_card55.size();
    java.util.RandomAccess[] randomAccess_array58 = new java.util.RandomAccess[] { arraylist_card50, arraylist_card55 };
    java.util.RandomAccess[] randomAccess_array59 = arraylist_card45.toArray(randomAccess_array58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName60);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str63 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b65 = hashmap_serializable_str63.equals((java.lang.Object)1.0d);
    int i66 = hashmap_serializable_str63.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str67 = hashmap_serializable_str63.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str69 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b71 = hashmap_serializable_str69.equals((java.lang.Object)1.0d);
    hashmap_serializable_str63.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str69);
    java.util.HashMap[] hashMap_array74 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array75 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array74;
    hashmap_serializable_str_array75[0] = hashmap_serializable_str69;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array78 = arraylist_card45.toArray(hashmap_serializable_str_array75);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card79 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b80 = arraylist_abstractcollection_card79.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card45);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card81 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card79);
    java.lang.Object[] obj_array82 = linkedlist_abstractcollection_card81.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card83 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card81);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card84 = linkedlist_abstractcollection_card83.remove();
    linkedlist_abstractcollection_card39.addFirst(abstractcollection_card84);
    java.lang.String[] str_array88 = new java.lang.String[] { "{}", " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n" };
    java.util.ArrayList<java.lang.String> arraylist_str89 = new java.util.ArrayList<java.lang.String>();
    boolean b90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str89, str_array88);
    boolean b91 = abstractcollection_card84.removeAll((java.util.Collection<java.lang.String>)arraylist_str89);
    java.util.Iterator<java.lang.String> iterator_str92 = arraylist_str89.iterator();
    arraylist_str89.clear();
    java.util.ListIterator<java.lang.String> listiterator_str95 = arraylist_str89.listIterator(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_abstractcollection_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_str92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_str95);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card0 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.Set<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> set_iterable_entry_serializable_str1 = hashmap_iterable_entry_serializable_str_spliterator_card0.keySet();
    java.lang.String str2 = hashmap_iterable_entry_serializable_str_spliterator_card0.toString();
    java.util.Set<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> set_entry_iterable_entry_serializable_str_spliterator_card3 = hashmap_iterable_entry_serializable_str_spliterator_card0.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_iterable_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "{}"+ "'", str2.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_iterable_entry_serializable_str_spliterator_card3);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card card6 = null;
    boolean b7 = arraylist_card4.add(card6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i12 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i17 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    int i21 = arraylist_card19.size();
    java.util.RandomAccess[] randomAccess_array22 = new java.util.RandomAccess[] { arraylist_card14, arraylist_card19 };
    java.util.RandomAccess[] randomAccess_array23 = arraylist_card9.toArray(randomAccess_array22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName24);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str27 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b29 = hashmap_serializable_str27.equals((java.lang.Object)1.0d);
    int i30 = hashmap_serializable_str27.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str31 = hashmap_serializable_str27.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    hashmap_serializable_str27.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str33);
    java.util.HashMap[] hashMap_array38 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array39 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array38;
    hashmap_serializable_str_array39[0] = hashmap_serializable_str33;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array42 = arraylist_card9.toArray(hashmap_serializable_str_array39);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card43 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b44 = arraylist_abstractcollection_card43.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card9);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card45.pollFirst();
    boolean b47 = arraylist_card4.removeAll((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card45);
    java.util.ListIterator<org.cs362.dominion.Card> listiterator_card48 = arraylist_card4.listIterator();
    boolean b49 = linkedlist_obj0.equals((java.lang.Object)listiterator_card48);
    java.util.Iterator<java.lang.Object> iterator_obj50 = linkedlist_obj0.descendingIterator();
    boolean b51 = linkedlist_obj0.isEmpty();
    java.lang.Object obj52 = null;
    int i53 = linkedlist_obj0.lastIndexOf(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }

    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable0 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type1 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card3 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card4 = arraylist_abstractcollection_card3.spliterator();
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i10 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.createCards();
    boolean b12 = arraylist_card7.contains((java.lang.Object)list_card11);
    arraylist_abstractcollection_card3.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card7);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i18 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    int i27 = arraylist_card25.size();
    java.util.RandomAccess[] randomAccess_array28 = new java.util.RandomAccess[] { arraylist_card20, arraylist_card25 };
    java.util.RandomAccess[] randomAccess_array29 = arraylist_card15.toArray(randomAccess_array28);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName30);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str33 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b35 = hashmap_serializable_str33.equals((java.lang.Object)1.0d);
    int i36 = hashmap_serializable_str33.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str37 = hashmap_serializable_str33.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    hashmap_serializable_str33.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str39);
    java.util.HashMap[] hashMap_array44 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array45 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array44;
    hashmap_serializable_str_array45[0] = hashmap_serializable_str39;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array48 = arraylist_card15.toArray(hashmap_serializable_str_array45);
    boolean b49 = hashmap_type_cloneable0.replace(type1, (java.lang.Cloneable)arraylist_card7, (java.lang.Cloneable)hashmap_serializable_str_array48);
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable50 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((java.util.Map<org.cs362.dominion.Card.Type,java.lang.Cloneable>)hashmap_type_cloneable0);
    java.util.Set<org.cs362.dominion.Card.Type> set_type51 = hashmap_type_cloneable50.keySet();
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type1.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type51);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    int i3 = arraylist_card1.size();
    org.cs362.dominion.Card card4 = null;
    boolean b5 = arraylist_card1.add(card4);
    org.cs362.dominion.Card card7 = arraylist_card1.get((int)(byte)0);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Village;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Village));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }

    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card1 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>((int)(short)1);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.pollLast();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card5 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b9 = hashmap_serializable_str7.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str7);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str12 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b14 = hashmap_serializable_str12.equals((java.lang.Object)1.0d);
    int i15 = hashmap_serializable_str12.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str16 = hashmap_serializable_str12.entrySet();
    boolean b17 = hashmap_serializable_str10.equals((java.lang.Object)set_entry_serializable_str16);
    boolean b18 = arraylist_abstractcollection_card5.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str16);
    java.lang.Object[] obj_array19 = arraylist_abstractcollection_card5.toArray();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    int i23 = arraylist_card21.size();
    boolean b25 = arraylist_card21.equals((java.lang.Object)(-1.0f));
    boolean b26 = arraylist_abstractcollection_card5.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card27 = arraylist_abstractcollection_card5.spliterator();
    boolean b28 = linkedlist_obj0.offerFirst((java.lang.Object)spliterator_abstractcollection_card27);
    java.lang.Object obj29 = linkedlist_obj0.peekFirst();
    java.lang.Object obj30 = linkedlist_obj0.element();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }

    java.lang.String[] str_array1 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array1);
    java.lang.Object obj4 = arraylist_str2.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card8 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card9 = arraylist_abstractcollection_card8.spliterator();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    boolean b17 = arraylist_card12.contains((java.lang.Object)list_card16);
    arraylist_abstractcollection_card8.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i23 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i28 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    int i32 = arraylist_card30.size();
    java.util.RandomAccess[] randomAccess_array33 = new java.util.RandomAccess[] { arraylist_card25, arraylist_card30 };
    java.util.RandomAccess[] randomAccess_array34 = arraylist_card20.toArray(randomAccess_array33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName35);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str38 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b40 = hashmap_serializable_str38.equals((java.lang.Object)1.0d);
    int i41 = hashmap_serializable_str38.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str42 = hashmap_serializable_str38.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str44 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b46 = hashmap_serializable_str44.equals((java.lang.Object)1.0d);
    hashmap_serializable_str38.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str44);
    java.util.HashMap[] hashMap_array49 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array50 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array49;
    hashmap_serializable_str_array50[0] = hashmap_serializable_str44;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array53 = arraylist_card20.toArray(hashmap_serializable_str_array50);
    boolean b54 = hashmap_type_cloneable5.replace(type6, (java.lang.Cloneable)arraylist_card12, (java.lang.Cloneable)hashmap_serializable_str_array53);
    java.util.Set<org.cs362.dominion.Card.Type> set_type55 = hashmap_type_cloneable5.keySet();
    boolean b56 = arraylist_str2.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type57 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type55);
    arraylist_comparable_type57.ensureCapacity(61);
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i60 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    java.lang.Object[] obj_array61 = arraylist_entry_player_i60.toArray();
    boolean b62 = arraylist_comparable_type57.containsAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i60);
    java.util.ListIterator<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> listiterator_entry_player_i63 = arraylist_entry_player_i60.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_entry_player_i63);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    org.cs362.dominion.Card card35 = null;
    boolean b36 = arraylist_card1.add(card35);
    java.util.stream.Stream<org.cs362.dominion.Card> stream_card37 = arraylist_card1.parallelStream();
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_card37);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i10 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    java.util.RandomAccess[] randomAccess_array20 = new java.util.RandomAccess[] { arraylist_card12, arraylist_card17 };
    java.util.RandomAccess[] randomAccess_array21 = arraylist_card7.toArray(randomAccess_array20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName22);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    int i28 = hashmap_serializable_str25.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str29 = hashmap_serializable_str25.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    hashmap_serializable_str25.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str31);
    java.util.HashMap[] hashMap_array36 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array36;
    hashmap_serializable_str_array37[0] = hashmap_serializable_str31;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = arraylist_card7.toArray(hashmap_serializable_str_array37);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card41 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b42 = arraylist_abstractcollection_card41.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card7);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card43 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card41);
    java.lang.Object[] obj_array44 = linkedlist_abstractcollection_card43.toArray();
    boolean b45 = hashmap_type_cloneable5.containsKey((java.lang.Object)linkedlist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card43.pollLast();
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i51 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i56 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    int i60 = arraylist_card58.size();
    java.util.RandomAccess[] randomAccess_array61 = new java.util.RandomAccess[] { arraylist_card53, arraylist_card58 };
    java.util.RandomAccess[] randomAccess_array62 = arraylist_card48.toArray(randomAccess_array61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName63);
    boolean b65 = linkedlist_abstractcollection_card43.removeLastOccurrence((java.lang.Object)cardName63);
    java.util.ListIterator<java.util.AbstractCollection<org.cs362.dominion.Card>> listiterator_abstractcollection_card66 = linkedlist_abstractcollection_card43.listIterator();
    boolean b67 = linkedlist_obj0.add((java.lang.Object)linkedlist_abstractcollection_card43);
    java.lang.Object obj68 = linkedlist_obj0.getFirst();
    java.lang.Object obj69 = linkedlist_obj0.remove();
    java.lang.Object obj70 = linkedlist_obj0.peekFirst();
    int i71 = linkedlist_obj0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj72 = linkedlist_obj0.pop();
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_abstractcollection_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i4 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i9 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    int i13 = arraylist_card11.size();
    java.util.RandomAccess[] randomAccess_array14 = new java.util.RandomAccess[] { arraylist_card6, arraylist_card11 };
    java.util.RandomAccess[] randomAccess_array15 = arraylist_card1.toArray(randomAccess_array14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName16);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str19 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b21 = hashmap_serializable_str19.equals((java.lang.Object)1.0d);
    int i22 = hashmap_serializable_str19.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str23 = hashmap_serializable_str19.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    hashmap_serializable_str19.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str25);
    java.util.HashMap[] hashMap_array30 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array31 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array30;
    hashmap_serializable_str_array31[0] = hashmap_serializable_str25;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array34 = arraylist_card1.toArray(hashmap_serializable_str_array31);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card35 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b36 = arraylist_abstractcollection_card35.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card1);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card37 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card35);
    java.lang.Object[] obj_array38 = linkedlist_abstractcollection_card37.toArray();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i43 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i48 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    int i52 = arraylist_card50.size();
    java.util.RandomAccess[] randomAccess_array53 = new java.util.RandomAccess[] { arraylist_card45, arraylist_card50 };
    java.util.RandomAccess[] randomAccess_array54 = arraylist_card40.toArray(randomAccess_array53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName55);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str58 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b60 = hashmap_serializable_str58.equals((java.lang.Object)1.0d);
    int i61 = hashmap_serializable_str58.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str62 = hashmap_serializable_str58.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str64 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b66 = hashmap_serializable_str64.equals((java.lang.Object)1.0d);
    hashmap_serializable_str58.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str64);
    java.util.HashMap[] hashMap_array69 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array70 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array69;
    hashmap_serializable_str_array70[0] = hashmap_serializable_str64;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array73 = arraylist_card40.toArray(hashmap_serializable_str_array70);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card74 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b75 = arraylist_abstractcollection_card74.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card40);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card76 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card74);
    java.lang.Object[] obj_array77 = linkedlist_abstractcollection_card76.toArray();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card78 = linkedlist_abstractcollection_card76.getLast();
    linkedlist_abstractcollection_card37.addFirst(abstractcollection_card78);
    org.cs362.dominion.Card[] card_array80 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card81 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81, card_array80);
    org.cs362.dominion.Card.CardName cardName83 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i84 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card81, cardName83);
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.createCards();
    boolean b86 = arraylist_card81.contains((java.lang.Object)list_card85);
    int i88 = arraylist_card81.indexOf((java.lang.Object)(byte)10);
    boolean b89 = abstractcollection_card78.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card81);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card81);
    java.util.List<org.cs362.dominion.Player> list_player91 = gameState90.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i92 = gameState90.play();
    java.util.List<org.cs362.dominion.Player> list_player93 = gameState90.players;
    org.cs362.dominion.Player player95 = new org.cs362.dominion.Player(gameState90, "{TREASURE={}}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName83.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str2 = linkedlist_arraylist_entry_serializable_str0.remove(9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }

    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str0 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.lang.Object[] obj_array1 = linkedlist_arraylist_entry_serializable_str0.toArray();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str3 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i4 = arraylist_entry_serializable_str3.size();
    int i5 = arraylist_entry_serializable_str3.size();
    arraylist_entry_serializable_str3.clear();
    arraylist_entry_serializable_str3.ensureCapacity((int)' ');
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str9 = linkedlist_arraylist_entry_serializable_str0.set((int)(byte)-1, arraylist_entry_serializable_str3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    arraylist_entry_iterable_entry_serializable_str_spliterator_card0.ensureCapacity(2);
    java.util.ListIterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_entry_iterable_entry_serializable_str_spliterator_card3 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.listIterator();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable5 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>((int)(byte)100);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i10 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i15 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    int i19 = arraylist_card17.size();
    java.util.RandomAccess[] randomAccess_array20 = new java.util.RandomAccess[] { arraylist_card12, arraylist_card17 };
    java.util.RandomAccess[] randomAccess_array21 = arraylist_card7.toArray(randomAccess_array20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName22);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str25 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b27 = hashmap_serializable_str25.equals((java.lang.Object)1.0d);
    int i28 = hashmap_serializable_str25.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str29 = hashmap_serializable_str25.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str31 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b33 = hashmap_serializable_str31.equals((java.lang.Object)1.0d);
    hashmap_serializable_str25.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str31);
    java.util.HashMap[] hashMap_array36 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array37 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array36;
    hashmap_serializable_str_array37[0] = hashmap_serializable_str31;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array40 = arraylist_card7.toArray(hashmap_serializable_str_array37);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card41 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>();
    boolean b42 = arraylist_abstractcollection_card41.add((java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card7);
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card43 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)arraylist_abstractcollection_card41);
    java.lang.Object[] obj_array44 = linkedlist_abstractcollection_card43.toArray();
    java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>> linkedlist_abstractcollection_card45 = new java.util.LinkedList<java.util.AbstractCollection<org.cs362.dominion.Card>>((java.util.Collection<java.util.AbstractCollection<org.cs362.dominion.Card>>)linkedlist_abstractcollection_card43);
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card46 = linkedlist_abstractcollection_card45.remove();
    java.util.AbstractCollection<org.cs362.dominion.Card> abstractcollection_card47 = linkedlist_abstractcollection_card45.peekFirst();
    java.lang.Cloneable cloneable48 = hashmap_type_cloneable5.get((java.lang.Object)abstractcollection_card47);
    org.cs362.dominion.Card.Type type49 = org.cs362.dominion.Card.Type.VICTORY;
    org.cs362.dominion.GameState gameState50 = null;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState50, "hi!");
    player52.playTreasureCard();
    player52.playKingdomCard();
    java.lang.Cloneable cloneable55 = hashmap_type_cloneable5.put(type49, (java.lang.Cloneable)player52);
    boolean b56 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.equals((java.lang.Object)type49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_entry_iterable_entry_serializable_str_spliterator_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(abstractcollection_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(abstractcollection_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type49.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.removeLast();
    boolean b4 = linkedlist_obj0.isEmpty();
    java.lang.Object obj5 = linkedlist_obj0.poll();
    java.util.Iterator<java.lang.Object> iterator_obj6 = linkedlist_obj0.iterator();
    int i7 = linkedlist_obj0.size();
    java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> linkedlist_arraylist_entry_serializable_str8 = new java.util.LinkedList<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>();
    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str9 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    int i10 = arraylist_entry_serializable_str9.size();
    java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>> hashmap_iterable_entry_serializable_str_spliterator_card11 = new java.util.HashMap<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable13 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    java.lang.String str14 = hashmap_type_cloneable13.toString();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable16 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>(10);
    boolean b18 = hashmap_type_cloneable16.containsValue((java.lang.Object)'#');
    org.cs362.dominion.Card.Type type19 = org.cs362.dominion.Card.Type.TREASURE;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    int i33 = arraylist_card31.size();
    java.util.RandomAccess[] randomAccess_array34 = new java.util.RandomAccess[] { arraylist_card26, arraylist_card31 };
    java.util.RandomAccess[] randomAccess_array35 = arraylist_card21.toArray(randomAccess_array34);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName36);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    int i42 = hashmap_serializable_str39.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str43 = hashmap_serializable_str39.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str45 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b47 = hashmap_serializable_str45.equals((java.lang.Object)1.0d);
    hashmap_serializable_str39.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str45);
    java.util.HashMap[] hashMap_array50 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array50;
    hashmap_serializable_str_array51[0] = hashmap_serializable_str45;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = arraylist_card21.toArray(hashmap_serializable_str_array51);
    java.lang.Cloneable cloneable55 = hashmap_type_cloneable16.replace(type19, (java.lang.Cloneable)hashmap_serializable_str_array51);
    org.cs362.dominion.Card[] card_array56 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card57, card_array56);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i60 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card57, cardName59);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    boolean b62 = arraylist_card57.contains((java.lang.Object)list_card61);
    int i64 = arraylist_card57.indexOf((java.lang.Object)(byte)10);
    java.lang.Cloneable cloneable65 = hashmap_type_cloneable13.put(type19, (java.lang.Cloneable)arraylist_card57);
    java.util.Spliterator<org.cs362.dominion.Card> spliterator_card66 = hashmap_iterable_entry_serializable_str_spliterator_card11.remove((java.lang.Object)cloneable65);
    java.lang.Object obj67 = hashmap_iterable_entry_serializable_str_spliterator_card11.clone();
    int i68 = arraylist_entry_serializable_str9.indexOf(obj67);
    boolean b69 = linkedlist_arraylist_entry_serializable_str8.offerLast(arraylist_entry_serializable_str9);
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card71 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card72 = arraylist_abstractcollection_card71.spliterator();
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i78 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName77);
    java.util.List<org.cs362.dominion.Card> list_card79 = org.cs362.dominion.Card.createCards();
    boolean b80 = arraylist_card75.contains((java.lang.Object)list_card79);
    arraylist_abstractcollection_card71.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card75);
    org.cs362.dominion.Card[] card_array82 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card83 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83, card_array82);
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i86 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card83, cardName85);
    java.util.List<org.cs362.dominion.Card> list_card87 = org.cs362.dominion.Card.createCards();
    boolean b88 = arraylist_card83.contains((java.lang.Object)list_card87);
    org.cs362.dominion.Card.Type type89 = null;
    java.util.List<org.cs362.dominion.Card> list_card90 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card87, type89);
    boolean b91 = arraylist_card75.removeAll((java.util.Collection<org.cs362.dominion.Card>)list_card87);
    org.cs362.dominion.Card.CardName cardName92 = null;
    org.cs362.dominion.Card card93 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName92);
    org.cs362.dominion.Card.CardName cardName94 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card95 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card75, cardName94);
    boolean b96 = linkedlist_arraylist_entry_serializable_str8.removeLastOccurrence((java.lang.Object)card95);
    java.util.Spliterator<java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> spliterator_arraylist_entry_serializable_str97 = linkedlist_arraylist_entry_serializable_str8.spliterator();
    linkedlist_obj0.push((java.lang.Object)spliterator_arraylist_entry_serializable_str97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "{}"+ "'", str14.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type19.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloneable65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(spliterator_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card93);
    org.junit.Assert.assertTrue("'" + cardName94 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName94.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_arraylist_entry_serializable_str97);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }

    java.util.LinkedList<java.lang.Object> linkedlist_obj0 = new java.util.LinkedList<java.lang.Object>();
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = linkedlist_obj0.offerLast((java.lang.Object)arraylist_card1);
    java.lang.Object obj3 = linkedlist_obj0.pollLast();
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card5 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str7 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b9 = hashmap_serializable_str7.equals((java.lang.Object)1.0d);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str10 = new java.util.HashMap<java.io.Serializable,java.lang.String>((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str7);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str12 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b14 = hashmap_serializable_str12.equals((java.lang.Object)1.0d);
    int i15 = hashmap_serializable_str12.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str16 = hashmap_serializable_str12.entrySet();
    boolean b17 = hashmap_serializable_str10.equals((java.lang.Object)set_entry_serializable_str16);
    boolean b18 = arraylist_abstractcollection_card5.removeAll((java.util.Collection<java.util.Map.Entry<java.io.Serializable,java.lang.String>>)set_entry_serializable_str16);
    java.lang.Object[] obj_array19 = arraylist_abstractcollection_card5.toArray();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    int i23 = arraylist_card21.size();
    boolean b25 = arraylist_card21.equals((java.lang.Object)(-1.0f));
    boolean b26 = arraylist_abstractcollection_card5.containsAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card27 = arraylist_abstractcollection_card5.spliterator();
    boolean b28 = linkedlist_obj0.offerFirst((java.lang.Object)spliterator_abstractcollection_card27);
    java.lang.Object obj29 = linkedlist_obj0.getLast();
    java.lang.Object obj30 = linkedlist_obj0.getFirst();
    java.lang.Object obj31 = linkedlist_obj0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }

    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>();
    java.lang.String[] str_array2 = new java.lang.String[] { "[]" };
    java.util.ArrayList<java.lang.String> arraylist_str3 = new java.util.ArrayList<java.lang.String>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str3, str_array2);
    java.lang.Object obj5 = arraylist_str3.clone();
    java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable> hashmap_type_cloneable6 = new java.util.HashMap<org.cs362.dominion.Card.Type,java.lang.Cloneable>();
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>> arraylist_abstractcollection_card9 = new java.util.ArrayList<java.util.AbstractCollection<org.cs362.dominion.Card>>((int)(byte)10);
    java.util.Spliterator<java.util.AbstractCollection<org.cs362.dominion.Card>> spliterator_abstractcollection_card10 = arraylist_abstractcollection_card9.spliterator();
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i16 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.createCards();
    boolean b18 = arraylist_card13.contains((java.lang.Object)list_card17);
    arraylist_abstractcollection_card9.add((int)(short)0, (java.util.AbstractCollection<org.cs362.dominion.Card>)arraylist_card13);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i24 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Great_Hall;
    int i29 = org.cs362.dominion.Card.getCardIndex((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    int i33 = arraylist_card31.size();
    java.util.RandomAccess[] randomAccess_array34 = new java.util.RandomAccess[] { arraylist_card26, arraylist_card31 };
    java.util.RandomAccess[] randomAccess_array35 = arraylist_card21.toArray(randomAccess_array34);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName36);
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str39 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b41 = hashmap_serializable_str39.equals((java.lang.Object)1.0d);
    int i42 = hashmap_serializable_str39.size();
    java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>> set_entry_serializable_str43 = hashmap_serializable_str39.entrySet();
    java.util.HashMap<java.io.Serializable,java.lang.String> hashmap_serializable_str45 = new java.util.HashMap<java.io.Serializable,java.lang.String>((int)'4');
    boolean b47 = hashmap_serializable_str45.equals((java.lang.Object)1.0d);
    hashmap_serializable_str39.putAll((java.util.Map<java.io.Serializable,java.lang.String>)hashmap_serializable_str45);
    java.util.HashMap[] hashMap_array50 = new java.util.HashMap[ 1 ];
    @SuppressWarnings("unchecked")
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array51 = (java.util.HashMap<java.io.Serializable,java.lang.String>[])hashMap_array50;
    hashmap_serializable_str_array51[0] = hashmap_serializable_str45;
    java.util.HashMap<java.io.Serializable,java.lang.String>[] hashmap_serializable_str_array54 = arraylist_card21.toArray(hashmap_serializable_str_array51);
    boolean b55 = hashmap_type_cloneable6.replace(type7, (java.lang.Cloneable)arraylist_card13, (java.lang.Cloneable)hashmap_serializable_str_array54);
    java.util.Set<org.cs362.dominion.Card.Type> set_type56 = hashmap_type_cloneable6.keySet();
    boolean b57 = arraylist_str3.removeAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>> arraylist_comparable_type58 = new java.util.ArrayList<java.lang.Comparable<org.cs362.dominion.Card.Type>>((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    boolean b59 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.retainAll((java.util.Collection<org.cs362.dominion.Card.Type>)set_type56);
    int i60 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.size();
    java.util.ListIterator<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> listiterator_entry_iterable_entry_serializable_str_spliterator_card61 = arraylist_entry_iterable_entry_serializable_str_spliterator_card0.listIterator();
    java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>> arraylist_entry_iterable_entry_serializable_str_spliterator_card62 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>((java.util.Collection<java.util.Map.Entry<java.lang.Iterable<java.util.Map.Entry<java.io.Serializable,java.lang.String>>,java.util.Spliterator<org.cs362.dominion.Card>>>)arraylist_entry_iterable_entry_serializable_str_spliterator_card0);
    arraylist_entry_iterable_entry_serializable_str_spliterator_card62.ensureCapacity(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_abstractcollection_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Great_Hall + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(randomAccess_array35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_serializable_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashMap_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_serializable_str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_type56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listiterator_entry_iterable_entry_serializable_str_spliterator_card61);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }

    java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>> arraylist_entry_serializable_str0 = new java.util.ArrayList<java.util.Map.Entry<java.io.Serializable,java.lang.String>>();
    java.util.stream.Stream<java.util.Map.Entry<java.io.Serializable,java.lang.String>> stream_entry_serializable_str1 = arraylist_entry_serializable_str0.stream();
    java.lang.Object obj2 = arraylist_entry_serializable_str0.clone();
    java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>> arraylist_entry_player_i3 = new java.util.ArrayList<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>();
    boolean b4 = arraylist_entry_serializable_str0.retainAll((java.util.Collection<java.util.Map.Entry<org.cs362.dominion.Player,java.lang.Integer>>)arraylist_entry_player_i3);
    java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> hashmap_randomAccess_array_set_entry_serializable_str7 = new java.util.HashMap<java.util.RandomAccess[],java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>((int)(byte)10, (float)(short)1);
    hashmap_randomAccess_array_set_entry_serializable_str7.clear();
    java.util.Collection<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> collection_set_entry_serializable_str9 = hashmap_randomAccess_array_set_entry_serializable_str7.values();
    boolean b10 = arraylist_entry_player_i3.retainAll(collection_set_entry_serializable_str9);
    java.util.ArrayList<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> arraylist_set_entry_serializable_str11 = new java.util.ArrayList<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>>(collection_set_entry_serializable_str9);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ListIterator<java.util.Set<java.util.Map.Entry<java.io.Serializable,java.lang.String>>> listiterator_set_entry_serializable_str13 = arraylist_set_entry_serializable_str11.listIterator((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(stream_entry_serializable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_set_entry_serializable_str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

}
