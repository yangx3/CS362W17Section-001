/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 14:16:07 PDT 2017
 */
package org.cs362.dominion;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(treeSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         assertThrownBy("java.util.Random", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      vector0.add((Card) null);
      GameState gameState0 = new GameState((List<Card>) vector0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      arrayList0.add((Card) null);
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      player0.playedCards = (List<Card>) vector0;
      gameState0.addPlayer(player0);
      vector0.add((Card) null);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertEquals(1, hashMap0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(treeSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      boolean boolean0 = gameState0.isGameOver();
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Integer integer0 = new Integer(4);
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("main.java.org.cs362.dominion.GameState", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      assertNotSame(gameState1, gameState0);
  }

  @Test
  public void test10()  throws Throwable  {
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(treeSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      assertEquals(0, list0.size());
      
      GameState gameState1 = gameState0.clone();
      assertNotSame(gameState1, gameState0);
  }

  @Test
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      String string0 = gameState0.toString();
      assertEquals("The board game is embty you need to intialize the game!!!!", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      String string0 = gameState0.toString();
      //  // Unstable assertion: assertEquals(" ---  ---  --- \n --- --------------------------- --- \nHand: [ \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tEstate,  \n\tCopper,  \n\tCopper,  \n\tEstate,  \n\tCopper,  \n\tEstate]\nDiscard: [ \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tEstate,  \n\tEstate,  \n\tEstate]\nDeck: []\nPlayed Cards: []\nnumActions: 1\ncoins: 0\nnumBuys: 1\n\n ---  ---  --- \n --- --------------------------- --- \nHand: [ \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tEstate,  \n\tCopper,  \n\tCopper,  \n\tEstate,  \n\tCopper,  \n\tEstate]\nDiscard: [ \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tCopper,  \n\tEstate,  \n\tEstate,  \n\tEstate]\nDeck: []\nPlayed Cards: []\nnumActions: 1\ncoins: 0\nnumBuys: 1\n\n --- gameBoard --- \nCards on the table: \nCard Name \t\t NumberCards: \n\t Gold\t\t 30\n\t Silver\t\t 40\n\t Copper\t\t 46\n\t Province\t\t 8\n\t Duchy\t\t 8\n\t Estate\t\t 8\n\t Curse\t\t 10\n\t Adventurer\t\t 10\n\t Council_Room\t\t 10\n\t Cutpurse\t\t 10\n\t Embargo\t\t 10\n\t Feast\t\t 10\n\t Festival\t\t 10\n\t Gardens\t\t 10\n\t Great_Hall\t\t 10\n\t Mine\t\t 10\n\t Village\t\t 10\n", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(43);
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertTrue(hashMap0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertFalse(hashMap0.isEmpty());
  }

  @Test
  public void test15()  throws Throwable  {
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(treeSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      gameState0.initializeGame();
  }

  @Test
  public void test16()  throws Throwable  {
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(treeSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }
}
