/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 15:48:32 PST 2017
 */

package main.java.org.cs362.dominion;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "DqV\"n]KaS5J");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         assertThrownBy("java.util.Random", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("main.java.org.cs362.dominion.Card", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "DqV\"n]KaS5J");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         assertThrownBy("java.util.Random", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, (String) null);
      player0.gain((Card) null);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("main.java.org.cs362.dominion.Card", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, "sn?O`$!_7l%^TTN01N");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      Player player0 = new Player((GameState) null, "sn?O`$!_7l%^TTN01N");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      Integer integer0 = new Integer(2);
      gameState0.gameBoard.put((Card) null, integer0);
      boolean boolean0 = gameState0.isGameOver();
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "sn?O`$!_7l%^TTN01N");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      Integer integer0 = new Integer(2);
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("main.java.org.cs362.dominion.GameState", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "e>yij8dc\"?K");
      gameState0.addPlayer(player0);
      GameState gameState1 = gameState0.clone();
      assertNotSame(gameState1, gameState0);
  }

  @Test
  public void test08()  throws Throwable  {
      Player player0 = new Player((GameState) null, "sn?O`$!_7l%^TTN01N");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      gameState0.players = (List<Player>) arrayList0;
      arrayList0.add(0, player0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      String string0 = gameState0.toString();
      assertEquals("The board game is embty you need to intialize the game!!!!", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      gameState0.addPlayer(player0);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertEquals(1, hashMap0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Player player0 = new Player((GameState) null, "sn?O`$!_7l%^TTN01N");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      Integer integer0 = Integer.getInteger("I", (-3094));
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ComparableTimSort", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, "sn?O`$!_7l%^TTN01N");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Integer integer0 = Integer.getInteger("I", (-3094));
      gameState0.gameBoard.put((Card) null, integer0);
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertTrue(hashMap0.isEmpty());
  }

  @Test
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.initializeGame();
  }
}
