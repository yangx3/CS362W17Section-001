/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:37:33 GMT 2017
 */

package cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominion.Card;
import cs362.dominion.GameState;
import cs362.dominion.Player;
import cs362.dominion.Randomness;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      hashMap0.remove((Object) hashMap0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      Integer integer0 = new Integer(0);
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.embargoTokens = null;
      Player player0 = new Player(gameState0, "DRAW ");
      player0.drawCard();
      vector0.add((Card) null);
      Player player1 = new Player(gameState0, " coins worth of treasure cards.");
      gameState0.addPlayer(player1);
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.getWinners();
      gameState0.initializeGame();
      gameState0.addPlayer((Player) null);
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      Integer integer0 = new Integer(0);
      stack0.add(card0);
      hashMap0.put(card0, integer0);
      gameState0.gameBoard = hashMap0;
      gameState0.play();
      Integer integer1 = new Integer(2);
      gameState0.gameBoard = hashMap0;
      Integer integer2 = hashMap0.put(card0, integer1);
      GameState gameState1 = new GameState((List<Card>) stack0);
      gameState1.initializeGame();
      gameState1.initializeGame();
      Card.Type.values();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState2 = new GameState((List<Card>) arrayList0);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.reset(1979L);
      hashMap0.put(card0, integer2);
      Card.CardName.values();
      GameState gameState3 = new GameState((List<Card>) stack0);
      gameState3.getWinners();
      HashMap<Card, Integer> hashMap1 = gameState3.embargoTokens;
      GameState gameState4 = new GameState((List<Card>) arrayList0);
      gameState0.isGameOver();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Garden;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, (-2831));
      arrayList0.add(0, card0);
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.gameBoard = null;
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.getWinners();
      gameState0.getWinners();
      gameState0.getWinners();
      gameState0.isGameOver();
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>((Map<? extends Card, ? extends Integer>) gameState0.embargoTokens);
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 2528, 2528, 2528);
      Integer integer0 = Integer.valueOf(2528);
      hashMap0.put(card0, integer0);
      player0.drawCard();
      arrayList0.remove((Object) null);
      gameState0.toString();
      Card.Type.values();
      gameState0.isGameOver();
      Card.Type.values();
      Player player1 = new Player(gameState0, "CUTPURSE ACTIVE EFFECT");
      player1.discard = (List<Card>) arrayList0;
      gameState0.addPlayer(player1);
      gameState0.play();
      gameState0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName.values();
      Player player0 = new Player((GameState) null, "");
      LinkedList<Card> linkedList0 = player0.deck;
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.TREASURE;
      int int0 = 9;
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      arrayList0.stream();
      gameState0.play();
      GameState gameState1 = new GameState((List<Card>) arrayList0);
      gameState0.getWinners();
      arrayList0.parallelStream();
      gameState0.getWinners();
      gameState0.toString();
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.getCard(arrayList0, card_CardName0);
      arrayList0.add((Card) null);
      Card.Type.values();
      gameState0.getWinners();
      Card.Type.values();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      Integer integer0 = new Integer(0);
      Integer.min(0, 3);
      stack0.add(card0);
      hashMap0.put(card0, integer0);
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      gameState0.play();
      Integer integer1 = new Integer(2);
      stack0.add((Card) null);
      hashMap0.put(card0, integer1);
      stack0.add((Card) null);
      GameState gameState1 = new GameState((List<Card>) stack0);
      gameState1.initializeGame();
      Card.Type.values();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState2 = new GameState((List<Card>) arrayList0);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.reset(1979L);
      Card.CardName.values();
      GameState gameState3 = new GameState((List<Card>) stack0);
      gameState3.getWinners();
      HashMap<Card, Integer> hashMap1 = gameState3.embargoTokens;
      GameState gameState4 = new GameState((List<Card>) arrayList0);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Stack<Card.Type> stack1 = new Stack<Card.Type>();
      stack0.containsAll(stack1);
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.embargoTokens = gameState0.gameBoard;
      gameState0.play();
      Card.Type.values();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.getWinners();
      HashMap<Card, Integer> hashMap0 = gameState0.embargoTokens;
      gameState0.gameBoard = hashMap0;
      gameState0.toString();
      Card.CardName.values();
      HashMap<Card, Integer> hashMap1 = gameState0.embargoTokens;
      Card.CardName card_CardName0 = Card.CardName.Cooper;
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName1, card_Type0, 0, 0, 0);
      Integer integer0 = new Integer(0);
      hashMap0.put(card0, integer0);
      Card.getCard(arrayList0, card_CardName0);
      Integer integer1 = new Integer((-3013));
      hashMap0.put((Card) null, integer1);
      hashMap1.entrySet();
      gameState0.embargoTokens = hashMap1;
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.getWinners();
      gameState0.isGameOver();
      gameState0.getWinners();
      gameState0.getWinners();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-2836), (-2218), (-1598));
      linkedList0.add(card0);
      gameState0.isGameOver();
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }
}
