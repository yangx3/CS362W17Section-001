/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:04:59 GMT 2017
 */

package cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominion.Card;
import cs362.dominion.GameState;
import cs362.dominion.Player;
import cs362.dominion.Randomness;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\">b%^;");
      int int0 = player0.numBuys;
      player0.discard = list0;
      player0.toString();
      player0.endTurn();
      Randomness.reset(0);
      player0.endTurn();
      player0.endTurn();
      Card.CardName card_CardName0 = Card.CardName.Garden;
      Card.getCard(player0.discard, card_CardName0);
      player0.scoreFor();
      gameState0.play();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list1 = Card.filter(list0, card_Type0);
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card.countCardName(list1, card_CardName1);
      player0.gain((Card) null, true);
      int int1 = player0.numActions;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(vector0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Estate");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      vector0.addAll((Collection<? extends Card>) player0.deck);
      player0.printStateGame();
      GameState gameState1 = new GameState((List<Card>) vector0);
      player0.buyCard();
      Player player1 = new Player(gameState1, "Estate");
      player1.scoreFor();
      player0.printStateGame();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type1 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type1, 0, 619, 619);
      linkedList0.addFirst(card0);
      player1.scoreFor();
      player0.playTtreasureCard();
      player1.buyCard();
      Card.CardName.valueOf("Estate");
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\">b%^;");
      int int0 = player0.numBuys;
      player0.discard = list0;
      player0.toString();
      player0.endTurn();
      Randomness.reset(0);
      player0.endTurn();
      player0.endTurn();
      Card.CardName card_CardName0 = Card.CardName.Garden;
      Card.getCard(player0.discard, card_CardName0);
      gameState0.play();
      player0.initializePlayerTurn();
      player0.gain((Card) null, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-290), (-290), (-290));
      vector0.add(card0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName1 = Card.CardName.Steward;
      Card.getCard(vector0, card_CardName1);
      Card.createCards();
      Card.createCards();
      vector0.add((Card) null);
      Player player0 = new Player(gameState0, "?L`xAJ:L#{PVri");
      player0.numBuys = 1064;
      player0.coins = (-796);
      player0.numBuys = (-796);
      LinkedList<Card> linkedList0 = player0.deck;
      gameState0.addPlayer(player0);
      Randomness.reset((-796));
      vector0.parallelStream();
      player0.player_username = "?L`xAJ:L#{PVri";
      player0.numActions = (-796);
      Randomness.random = null;
      Randomness.reset((-796));
      player0.buyCard();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Vs8xQ'$*VS,'\"@4P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.Type.Vs8xQ'$*VS,'\"@4P
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\">b%^;");
      int int0 = player0.numBuys;
      player0.discard = list0;
      player0.toString();
      player0.endTurn();
      player0.scoreFor();
      Randomness.reset(0);
      player0.endTurn();
      player0.endTurn();
      Card.CardName card_CardName0 = Card.CardName.Garden;
      Card.getCard(player0.discard, card_CardName0);
      List<Card> list1 = Card.createCards();
      gameState0.play();
      player0.hand = list1;
      player0.gain((Card) null, true);
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\">b%^;");
      int int0 = player0.numBuys;
      player0.discard = list0;
      player0.toString();
      player0.endTurn();
      Randomness.reset(0);
      gameState0.addPlayer(player0);
      player0.endTurn();
      player0.endTurn();
      Card.CardName card_CardName0 = Card.CardName.Garden;
      Card.getCard(player0.discard, card_CardName0);
      gameState0.play();
      player0.gain((Card) null, true);
      Card.CardName.values();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.buyCard();
      player0.buyCard();
      Card.CardName card_CardName0 = Card.CardName.Steward;
      player0.numActions = (-290);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.drawCard();
      player0.gain((Card) null, true);
      Card card0 = new Card(card_CardName0, card_Type0, 49, 49, 49);
      card0.equals("");
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      Card card1 = new Card(card_CardName0, card_Type0, (-290), (-290), 2257);
      Card.Type card_Type1 = Card.Type.TREASURE;
      card1.equals(card_Type1);
      treeSet0.add(card1);
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>((SortedSet<? extends Card>) treeSet0);
      Card card2 = treeSet0.pollLast();
      player0.revealHand();
      Card.filter(priorityQueue0, card_Type1);
      card0.compareTo(card2);
      Card.filter(priorityQueue0, card_Type0);
      ArrayList<Card> arrayList0 = new ArrayList<Card>(49);
      Card.Type card_Type2 = Card.Type.ACTION;
      Card.filter(arrayList0, card_Type2);
      player0.gain(card0, false);
      LinkedList<Card> linkedList0 = player0.deck;
      player0.playKingdomCard();
      player0.playKingdomCard();
      String string0 = player0.player_username;
      player0.playKingdomCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Embargo");
      player0.playTtreasureCard();
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Randomness.totalCallsToRandom;
      Player player0 = new Player((GameState) null, "");
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 1144, 1144, 0);
      player0.discard(card0);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.playedCards = (List<Card>) linkedList0;
      List<Card> list0 = Card.createCards();
      player0.gain(card0, true);
      player0.toString();
      player0.gain(card0, true);
      player0.player_username = "";
      player0.drawCard();
      player0.revealHand();
      player0.playedCards = list0;
      List<Card> list1 = player0.playedCards;
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(vector0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Estate");
      player0.coins = 5;
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      player0.printStateGame();
      GameState gameState1 = new GameState((List<Card>) vector0);
      player0.buyCard();
      Player player1 = new Player(gameState1, "Estate");
      player1.scoreFor();
      player0.printStateGame();
      player1.scoreFor();
      player0.playTtreasureCard();
      player1.buyCard();
      Randomness.random = null;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Estate");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.Type.Estate
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "RESHUFFLING the deck of the player ");
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 1225, 0, (-2818));
      stack0.add(card0);
      player0.coins = (-1356);
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.playTtreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.embargoTokens = hashMap0;
      Player player0 = new Player(gameState0, " --- gameBoard --- \n");
      gameState0.isGameOver();
      player0.numActions = (-971);
      player0.scoreFor();
      player0.toString();
      gameState0.getWinners();
      player0.scoreFor();
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      stack0.add((Card) null);
      Player player1 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 392, 392, 392);
      player1.gain(card0, true);
      player1.revealHand();
      player1.drawCard();
      // Undeclared exception!
      try { 
        player1.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, " r");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.numBuys = 8;
      player0.playTtreasureCard();
      Card.Type.values();
      player0.drawCard();
      linkedList0.add((Card) null);
      linkedList0.toArray();
      // Undeclared exception!
      try { 
        Randomness.nextRandomInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Cutpurse");
      player0.playTtreasureCard();
      player0.drawCard();
      Stack<Card> stack0 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(stack0, card_CardName0);
      player0.discard((Card) null);
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, (String) null);
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "");
      player0.coins = 195;
      player0.toString();
      LinkedList<Card> linkedList1 = player0.deck;
      player0.playKingdomCard();
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 195, 811);
      // Undeclared exception!
      try { 
        linkedList0.set(0, card0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Randomness.totalCallsToRandom;
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, (String) null);
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "3x2Pj");
      player0.player_username = "3x2Pj";
      player0.playTtreasureCard();
      player0.hand = list0;
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      player0.printStateGame();
      player0.toString();
      Card card0 = new Card(card_CardName0, card_Type0, 847, (-290), 847);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = gameState0.embargoTokens;
      player0.gain(card0, false);
      player0.scoreFor();
      player0.playTtreasureCard();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\">b%^;");
      int int0 = player0.numBuys;
      player0.discard = list0;
      player0.toString();
      player0.endTurn();
      Randomness.reset(0);
      player0.endTurn();
      player0.endTurn();
      Card.CardName card_CardName0 = Card.CardName.Garden;
      Card.getCard(player0.discard, card_CardName0);
      List<Card> list1 = Card.createCards();
      gameState0.play();
      player0.hand = list1;
      player0.gain((Card) null, true);
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.isGameOver();
      Player player0 = new Player(gameState0, "Oz99MA$kG!qi~9FOe");
      List<Card> list0 = player0.playedCards;
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      player0.gain((Card) null, true);
      player0.playKingdomCard();
      Player player1 = new Player(gameState0, "\"#gFq`1$a^*>={}[");
      player1.hand = (List<Card>) arrayList0;
      player1.revealHand();
      player1.numBuys = (-543);
      Card.Type[] card_TypeArray0 = Card.Type.values();
      assertNotNull(card_TypeArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.CardName.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.CardName.values();
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "8^xQ4N;OA6AwVA");
      player0.hand = (List<Card>) stack0;
      gameState0.getWinners();
      Card.CardName card_CardName0 = Card.CardName.Province;
      gameState0.play();
      Card.Type card_Type0 = Card.Type.ACTION;
      gameState0.getWinners();
      Card card0 = new Card(card_CardName0, card_Type0, 4, 1227, 4);
      stack0.add(card0);
      card0.equals(card_Type0);
      card0.play(player0, gameState0);
      card0.play(player0, gameState0);
      gameState0.play();
      player0.coins = 4;
      player0.gain(card0, false);
      player0.numActions = 4;
      Randomness.reset(0L);
      player0.playKingdomCard();
      Randomness.nextRandomInt(3871);
      stack0.add(card0);
      player0.player_username = "Player: ";
      stack0.add(card0);
      String string0 = player0.player_username;
      player0.hand = (List<Card>) stack0;
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      player0.revealHand();
      player0.buyCard();
      //  // Unstable assertion: assertEquals(3, stack0.size());
      //  // Unstable assertion: assertEquals("[ \tProvince-ACTION \t\t Cost: 4 \t\t Score: 1227 \tTreasure Value: 4,  \tProvince-ACTION \t\t Cost: 4 \t\t Score: 1227 \tTreasure Value: 4,  \tProvince-ACTION \t\t Cost: 4 \t\t Score: 1227 \tTreasure Value: 4]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(vector0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Estate");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      player0.printStateGame();
      GameState gameState1 = new GameState((List<Card>) vector0);
      player0.buyCard();
      Player player1 = new Player(gameState1, "Estate");
      player1.scoreFor();
      player0.printStateGame();
      player1.scoreFor();
      player0.playTtreasureCard();
      player1.buyCard();
      Card.CardName.valueOf("Estate");
      Card card0 = player0.drawCard();
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Randomness.reset(439L);
  }
}
