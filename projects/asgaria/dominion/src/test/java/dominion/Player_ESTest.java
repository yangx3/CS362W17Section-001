/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:43:21 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "S");
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 1773, (-1), 30);
      boolean boolean0 = player0.gain(card0);
      assertTrue(boolean0);
      
      int int0 = player0.scoreFor();
      assertEquals((-1), int0);
  }

  @Test
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "A^pE~MpRha.E+K(~");
      player0.discard = list0;
      Card card0 = player0.drawCard();
      assertEquals(0, list0.size());
      assertEquals(Card.Type.TREASURE, card0.getType());
  }

  @Test
  public void test02()  throws Throwable  {
      Player player0 = new Player((GameState) null, "%");
      player0.numActions = (-575);
      String string0 = player0.toString();
      assertEquals(" --- % ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: -575coinss: 0numBuys: 0\n", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Randomness");
      player0.coins = 13;
      String string0 = player0.toString();
      assertEquals(" --- dominion.Randomness ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 13numBuys: 0\n", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, "%");
      player0.numActions = (-575);
      player0.playKingdomCard();
  }

  @Test
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6Olq");
      player0.hand = list0;
      Random.setNextRandom(17);
      player0.endTurn();
      assertEquals(5, list0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Randomness");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Player player0 = new Player((GameState) null, "%");
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ArrayDeque<Card> arrayDeque0 = new ArrayDeque<Card>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>((Collection<? extends Card>) arrayDeque0);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "coinss: ");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.printHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Xe51Rq,nSy$L5kHys");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.playTtreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Randomness");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Gold");
      player0.discard = list0;
      int int0 = player0.scoreFor();
      assertEquals(12, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Gold");
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "A^pE~MpRha.E+K(~");
      player0.printStateGame();
  }

  @Test
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6Olq");
      player0.hand = list0;
      player0.printHand();
  }

  @Test
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Gold");
      player0.discard = list0;
      player0.initializePlayerTurn();
      player0.playTtreasureCard();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "%");
      player0.numActions = 1979;
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Player player0 = new Player((GameState) null, "%");
      player0.numActions = 1979;
      player0.playKingdomCard();
  }

  @Test
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6Olq");
      player0.playKingdomCard();
  }

  @Test
  public void test21()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "MQ>QVf)`=rh'p(L@P");
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      player0.gain(card0);
      Card card1 = player0.drawCard();
      assertEquals(0, card1.getTreasureValue());
  }

  @Test
  public void test22()  throws Throwable  {
      Player player0 = new Player((GameState) null, "The bord game is embty you need to intialize the game!!!!");
      // Undeclared exception!
      try { 
        player0.buy_to_hand((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Gold");
      player0.discard = list0;
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Gold");
      player0.buyCard();
  }

  @Test
  public void test25()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      player0.discard((Card) null);
  }
}
