/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:44:00 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "|eOZte:.&<VM('W");
  }

  @Test
  public void test01()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-3031), (-3031), 4);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "u$-s6yf!>k+");
      card0.score(player0);
  }

  @Test
  public void test02()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1), (-1), 3858);
      card0.getTreasureValue();
  }

  @Test
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 30, 1118, (-1006));
      card0.getTreasureValue();
  }

  @Test
  public void test04()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-3031), (-3031), 4);
      card0.getCost();
  }

  @Test
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, 9, 9);
      card0.getCardName();
  }

  @Test
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, (-721), 0);
      linkedList0.add(card0);
      Card.getCard(linkedList0, card_CardName0);
  }

  @Test
  public void test08()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1212), (-1212), (-120));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.offerFirst(card0);
      Player player0 = new Player(gameState0, "");
      player0.hand = (List<Card>) linkedList0;
      Card.getCard(player0.hand, card_CardName0);
  }

  @Test
  public void test09()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card card1 = new Card(card_CardName1, card_Type0, 4176, 4176, (-1662));
      card0.compareTo(card1);
  }

  @Test
  public void test10()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-2337), 0, 0);
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card card1 = new Card(card_CardName1, card_Type0, (-901), (-2854), 1903);
      card0.compareTo(card1);
  }

  @Test
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      vector0.setSize(975);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      // Undeclared exception!
      try { 
        Card.getCard(vector0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedHashSet<Card> linkedHashSet0 = new LinkedHashSet<Card>();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, 9, 9);
      linkedHashSet0.add(card0);
      assertEquals(9, card0.getCost());
      assertEquals(9, card0.getTreasureValue());
      
      Card.Type card_Type1 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(linkedHashSet0, card_Type1);
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, 9, 9);
      String string0 = card0.toString();
      assertEquals(" \tGardens-ACTION \t\t Cost: 9 \t\t Score: 9 \tTreasure Value: 9", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4523, 4523, 0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6l:4Y0v>DruSiyCo");
      int int0 = card0.score(player0);
      assertEquals(4523, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
      assertEquals(4523, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 1576, 1576, 1576);
      Player player0 = new Player((GameState) null, "TREASURE");
      card0.play(player0, (GameState) null);
      assertEquals(1576, card0.getTreasureValue());
      assertEquals(1576, card0.getCost());
  }

  @Test
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 2, 2, 2);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 975, 1685, 1685);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, " ");
      card0.play(player0, gameState0);
      assertEquals(975, card0.getCost());
      assertEquals(1685, card0.getTreasureValue());
  }

  @Test
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1212), (-1212), (-120));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "TREASURE");
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState0, "");
      // Undeclared exception!
      try { 
        card0.play(player1, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1212), (-1212), (-1212));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player((GameState) null, "TREASURE");
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "pEmbargo");
  }

  @Test
  public void test22()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Steward;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, (-1247));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "C3@[$zZ@");
      card0.play(player0, gameState0);
      assertEquals(0, card0.getCost());
      assertEquals(-1247, card0.getTreasureValue());
  }

  @Test
  public void test23()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4523, 4523, 0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6l:4Y0v>DruSiyCo");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, " \tGold-ACTION \t\t Cost: 3028 \t\t Score: 0 \tTreasure Value: 0");
      card0.play(player0, gameState0);
      assertEquals(0, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test
  public void test25()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 30, 1118, (-1006));
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "FL]h|Kxi}[R");
      card0.play(player0, gameState0);
      assertEquals(30, card0.getCost());
      assertEquals(-1006, card0.getTreasureValue());
  }

  @Test
  public void test26()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 144, 144, 144);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, ".");
      card0.play(player0, gameState0);
      assertEquals(144, card0.getCost());
      assertEquals(144, card0.getTreasureValue());
  }

  @Test
  public void test27()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "|eOZte:.&<VM('W");
      player0.drawCard();
  }

  @Test
  public void test28()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4523, 4523, 0);
      int int0 = card0.getTreasureValue();
      assertEquals(4523, card0.getCost());
      assertEquals(0, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getCost();
      assertEquals(0, int0);
      assertEquals(0, card0.getTreasureValue());
  }

  @Test
  public void test30()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1212), (-1212), (-120));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.offerFirst(card0);
      Player player0 = new Player(gameState0, "");
      player0.hand = (List<Card>) linkedList0;
      card0.play(player0, (GameState) null);
      assertEquals(-1212, card0.getCost());
      assertEquals(-120, card0.getTreasureValue());
  }

  @Test
  public void test31()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card card0 = Card.getCard(vector0, card_CardName0);
      assertNull(card0);
  }

  @Test
  public void test32()  throws Throwable  {
      LinkedHashSet<Card> linkedHashSet0 = new LinkedHashSet<Card>();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, 9, 9);
      linkedHashSet0.add(card0);
      Card.Type card_Type1 = card0.getType();
      List<Card> list0 = Card.filter(linkedHashSet0, card_Type1);
      assertEquals(9, card0.getTreasureValue());
      assertEquals(9, card0.getCost());
      assertEquals(1, list0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      vector0.addElement((Card) null);
      Card.Type card_Type0 = Card.Type.TREASURE;
      // Undeclared exception!
      try { 
        Card.filter(vector0, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 30, 1118, (-1006));
      Card.CardName card_CardName1 = Card.CardName.Feast;
      assertEquals(Card.CardName.Feast, card_CardName1);
      
      boolean boolean0 = card0.equals(card_CardName1);
      assertFalse(boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      boolean boolean0 = card0.equals(card0);
      assertTrue(boolean0);
      assertEquals(0, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test
  public void test36()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "pEmbargo");
  }

  @Test
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      card0.compareTo(card0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
  }
}
