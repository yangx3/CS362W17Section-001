/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 05:31:52 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.cs362.dominion.board;
import org.cs362.dominion.council_room;
import org.cs362.dominion.deck;
import org.cs362.dominion.discard;
import org.cs362.dominion.hand;
import org.cs362.dominion.player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class council_room_ESTest extends council_room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      council_room council_room0 = new council_room();
      player player0 = new player();
      board board0 = new board();
      board0.num_players = 6;
      player[] playerArray0 = new player[9];
      playerArray0[0] = player0;
      playerArray0[5] = player0;
      council_room0.perform_attack(playerArray0, 5, board0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      council_room council_room0 = new council_room();
      player[] playerArray0 = new player[8];
      player player0 = new player();
      playerArray0[0] = player0;
      board board0 = new board();
      board0.num_players = (-183);
      council_room0.perform_attack(playerArray0, 0, board0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      council_room council_room0 = new council_room();
      player[] playerArray0 = new player[6];
      council_room0.card = 30;
      player player0 = new player();
      playerArray0[5] = player0;
      board board0 = new board();
      board0.buy_copper(player0, board0);
      // Undeclared exception!
      try { 
        council_room0.perform_attack(playerArray0, 5, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      council_room council_room0 = new council_room();
      player player0 = new player();
      board board0 = new board();
      deck deck0 = new deck();
      player0.player_deck = deck0;
      player[] playerArray0 = new player[9];
      deck0.num_cards = (-1664);
      playerArray0[5] = player0;
      // Undeclared exception!
      try { 
        council_room0.perform_attack(playerArray0, 5, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      council_room council_room0 = new council_room();
      player[] playerArray0 = new player[0];
      board board0 = new board();
      council_room0.card = (-2039);
      // Undeclared exception!
      try { 
        council_room0.perform_attack(playerArray0, (-2039), board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2039
         //
         assertThrownBy("org.cs362.dominion.council_room", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      council_room council_room0 = new council_room();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[3] = player0;
      hand hand0 = new hand();
      hand0.num_cards = (-2783);
      player0.player_hand = hand0;
      board board0 = new board();
      // Undeclared exception!
      try { 
        council_room0.perform_attack(playerArray0, 3, board0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      council_room council_room0 = new council_room();
      player player0 = new player();
      board board0 = new board();
      board0.num_players = 19;
      player[] playerArray0 = new player[9];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      playerArray0[6] = player0;
      board0.buy_curse(player0, board0);
      // Undeclared exception!
      try { 
        council_room0.perform_attack(playerArray0, 5, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.council_room", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      council_room council_room0 = new council_room();
      player player0 = new player();
      board board0 = new board();
      board0.num_players = 1;
      player[] playerArray0 = new player[6];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      council_room0.perform_attack(playerArray0, 1, board0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      council_room council_room0 = new council_room();
      player[] playerArray0 = new player[8];
      player player0 = new player();
      playerArray0[0] = player0;
      discard discard0 = player0.player_discard;
      playerArray0[3] = player0;
      board board0 = new board();
      council_room0.perform_attack(playerArray0, 0, board0);
      discard0.num_cards = 3233;
      council_room0.perform_attack(playerArray0, 0, board0);
      // Undeclared exception!
      try { 
        council_room0.perform_attack(playerArray0, 3, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.discard", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      council_room council_room0 = new council_room();
      council_room0.description();
  }
}
