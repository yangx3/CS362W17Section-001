/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 05:24:34 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.cs362.dominion.board;
import org.cs362.dominion.card;
import org.cs362.dominion.deck;
import org.cs362.dominion.discard;
import org.cs362.dominion.embargo;
import org.cs362.dominion.gardens;
import org.cs362.dominion.gold;
import org.cs362.dominion.great_hall;
import org.cs362.dominion.hand;
import org.cs362.dominion.pile;
import org.cs362.dominion.player;
import org.cs362.dominion.smithy;
import org.cs362.dominion.village;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class board_ESTest extends board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      pile pile0 = board0.great_hall;
      player0.gold = 17;
      board0.feast = pile0;
      board board1 = new board();
      board0.buy_great_hall(player0, board1);
      board1.buy_copper(player0, board0);
      board board2 = new board();
      pile pile1 = board2.silver;
      board2.buy_embargo(player0, board0);
      board2.buy_baron(player0, board0);
      player player1 = new player();
      board0.buy_ambassador(player1, board1);
      board1.buy_embargo(player1, board0);
      board2.baron = board0.feast;
      pile0.name = "$<k{";
      pile pile2 = board0.gold;
      board1.ambassador = pile0;
      pile pile3 = board1.council_room;
      pile pile4 = board2.curse;
      board1.buy_salvager(player0, board0);
      board2.buy_gardens(player0, board0);
      board1.buy_copper(player1, board2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.smithy;
      pile0.num_tokens = 0;
      pile0.num_tokens = 3209;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.gardens;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@&&19CI-T57h";
      player player0 = new player();
      board board1 = new board();
      pile0.num_cards = 0;
      hand hand0 = new hand();
      player0.player_hand = hand0;
      player0.gold = 10;
      pile0.num_cards = 10;
      board1.buy_gold(player0, board0);
      board0.mine = pile0;
      board1.buy_smithy(player0, board0);
      player0.print_player();
      board0.smithy = pile2;
      board1.buy_village(player0, board0);
      board1.embargo = pile0;
      pile pile3 = board1.feast;
      board1.buy_gardens(player0, board0);
      pile2.num_tokens = 0;
      board0.buy_adventurer(player0, board1);
      board board2 = new board();
      pile pile4 = board2.great_hall;
      pile pile5 = board1.estate;
      board0.buy_duchy(player0, board1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      pile pile0 = board0.great_hall;
      player0.gold = 17;
      pile0.num_cards = 17;
      board board1 = new board();
      board0.buy_province(player0, board1);
      board0.feast = pile0;
      board board2 = new board();
      board board3 = new board();
      pile pile1 = board3.silver;
      board3.buy_embargo(player0, board0);
      board3.buy_baron(player0, board0);
      board0.buy_ambassador(player0, board2);
      board2.buy_embargo(player0, board0);
      pile pile2 = board2.gold;
      board3.baron = board0.feast;
      pile0.name = "$<k{";
      pile pile3 = board0.gold;
      board2.ambassador = pile0;
      pile pile4 = board2.council_room;
      pile pile5 = board3.curse;
      board2.buy_salvager(player0, board0);
      board3.buy_feast(player0, board0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.council_room;
      board0.embargo = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.curse = pile0;
      board0.curse.num_tokens = (-710);
      board0.buy_gardens(player0, board1);
      pile0.name = "N!_&{vSrlX7D";
      hand hand0 = new hand();
      player0.player_hand = hand0;
      board board2 = new board();
      board2.silver = board0.curse;
      board1.buy_salvager(player0, board2);
      int int0 = board0.num_empty;
      board1.embargo = board0.curse;
      board2.buy_curse(player0, board0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.gardens;
      board0.gold = pile0;
      pile0.num_cards = 512;
      pile0.num_tokens = 18;
      board0.council_room = pile0;
      pile pile1 = board0.gardens;
      board0.copper = pile1;
      pile1.name = "'9{<!/";
      player player0 = new player();
      pile1.num_tokens = (-599);
      player0.action = 642;
      board0.buy_copper(player0, board0);
      pile pile2 = board0.copper;
      board0.cutpurse = pile2;
      board0.buy_great_hall(player0, board0);
      board0.buy_mine(player0, board0);
      pile pile3 = board0.baron;
      board0.buy_silver(player0, board0);
      board0.buy_baron(player0, board0);
      board0.buy_copper(player0, board0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      board1.buy_ambassador(player0, board0);
      board0.buy_smithy(player0, board1);
      board board2 = new board();
      deck deck0 = new deck();
      board1.trash_pile = deck0;
      pile pile0 = board0.cutpurse;
      board2.embargo = pile0;
      board0.buy_salvager(player0, board2);
      board1.mine = pile0;
      board2.buy_copper(player0, board1);
      board1.gold = board2.embargo;
      pile pile1 = board1.mine;
      player0.gold = 3221;
      board2.buy_province(player0, board0);
      pile pile2 = board1.gold;
      great_hall great_hall0 = new great_hall();
      deck0.add_card(great_hall0);
      card[] cardArray0 = new card[6];
      cardArray0[0] = (card) great_hall0;
      cardArray0[1] = (card) great_hall0;
      smithy smithy0 = new smithy();
      cardArray0[2] = (card) smithy0;
      cardArray0[3] = (card) great_hall0;
      cardArray0[4] = (card) great_hall0;
      cardArray0[5] = (card) great_hall0;
      deck0.player_deck = cardArray0;
      int int0 = board1.num_empty;
      pile pile3 = board0.baron;
      pile0.num_cards = (-2989);
      pile0.num_tokens = (-2989);
      board2.buy_feast(player0, board1);
      pile pile4 = new pile();
      board1.buy_gold(player0, board2);
      board board3 = new board();
      board3.buy_cutpurse(player0, board0);
      pile pile5 = board2.duchy;
      pile5.num_tokens = 1003;
      board3.buy_embargo(player0, board1);
      board2.gardens = pile5;
      board3.estate = board1.mine;
      board2.buy_council_room(player0, board3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.great_hall;
      pile0.num_tokens = 0;
      pile0.name = "Please enter a number between 1 and 20.";
      pile0.num_tokens = 19;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.gardens;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@&&19CI-T57h";
      player player0 = new player();
      board board1 = new board();
      pile0.num_cards = 0;
      player0.gold = 19;
      pile0.num_cards = 10;
      board1.buy_gold(player0, board0);
      board0.mine = pile0;
      board1.buy_smithy(player0, board0);
      board1.buy_village(player0, board0);
      board1.buy_great_hall(player0, board0);
      board1.embargo = pile0;
      pile pile3 = board1.feast;
      board1.buy_gardens(player0, board0);
      board0.buy_adventurer(player0, board1);
      board board2 = new board();
      pile pile4 = board2.great_hall;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      board1.buy_ambassador(player0, board0);
      board0.buy_smithy(player0, board1);
      board board2 = new board();
      deck deck0 = new deck();
      board1.trash_pile = deck0;
      pile pile0 = board2.gold;
      board2.embargo = pile0;
      board0.buy_salvager(player0, board2);
      board1.mine = pile0;
      board2.buy_copper(player0, board1);
      board1.gold = board2.embargo;
      pile pile1 = board1.mine;
      player0.gold = 3221;
      board2.buy_province(player0, board0);
      pile pile2 = board1.gold;
      great_hall great_hall0 = new great_hall();
      deck0.add_card(great_hall0);
      int int0 = board1.num_empty;
      pile pile3 = board0.baron;
      pile0.num_cards = (-2989);
      pile0.num_tokens = 17;
      board2.buy_feast(player0, board1);
      pile pile4 = new pile();
      board1.buy_gold(player0, board2);
      board board3 = new board();
      board3.buy_cutpurse(player0, board0);
      pile pile5 = board2.duchy;
      pile5.num_tokens = 1003;
      board3.buy_embargo(player0, board1);
      board2.gardens = pile5;
      board board4 = new board();
      board3.estate = board1.mine;
      board4.buy_council_room(player0, board3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      player0.gold = 12;
      board0.buy_great_hall(player0, board0);
      board0.buy_great_hall(player0, board0);
      board0.buy_copper(player0, board0);
      board board1 = new board();
      pile pile0 = board1.silver;
      board1.buy_embargo(player0, board0);
      board1.buy_baron(player0, board0);
      player player1 = new player();
      board0.buy_ambassador(player1, board0);
      pile pile1 = board0.baron;
      board0.buy_embargo(player1, board0);
      board1.buy_gold(player0, board0);
      pile pile2 = board0.gold;
      board1.baron = board0.feast;
      pile1.num_cards = (-1183);
      pile pile3 = board0.mine;
      pile pile4 = board0.council_room;
      pile pile5 = board1.curse;
      board0.buy_salvager(player0, board0);
      board board2 = new board();
      pile pile6 = new pile();
      board2.salvager = pile6;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      pile0.num_tokens = (-23);
      board0.gardens = pile0;
      board0.salvager = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      board0.buy_province(player0, board1);
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.gardens.num_cards = (-23);
      board board2 = new board();
      board0.buy_embargo(player0, board1);
      board board3 = new board();
      board2.buy_duchy(player0, board3);
      board2.print_board();
      board2.buy_great_hall(player0, board0);
      board3.buy_gardens(player0, board2);
      board1.buy_mine(player0, board3);
      board1.buy_copper(player0, board3);
      board3.buy_silver(player0, board1);
      board2.duchy = board0.gardens;
      board3.buy_mine(player0, board2);
      board3.gold = board0.salvager;
      board board4 = new board();
      board4.ambassador = board0.gardens;
      board3.buy_council_room(player0, board1);
      board1.buy_duchy(player0, board2);
      board3.buy_cutpurse(player0, board2);
      player player1 = new player();
      board0.buy_adventurer(player1, board1);
      deck deck0 = board3.trash_pile;
      board3.buy_mine(player0, board0);
      board0.buy_ambassador(player0, board1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.great_hall;
      pile0.num_tokens = (-10);
      pile0.num_tokens = 19;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.great_hall;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@&&19CI-T57h";
      player player0 = new player();
      board board1 = new board();
      pile0.num_cards = (-10);
      hand hand0 = new hand();
      player0.player_hand = hand0;
      player0.gold = 19;
      pile0.num_cards = 10;
      board1.buy_gold(player0, board0);
      board0.mine = pile0;
      board1.buy_smithy(player0, board0);
      player0.print_player();
      board0.smithy = pile2;
      board1.buy_village(player0, board0);
      board1.embargo = pile0;
      pile pile3 = board1.feast;
      board1.buy_gardens(player0, board0);
      board0.buy_adventurer(player0, board1);
      board board2 = new board();
      pile pile4 = board2.great_hall;
      pile pile5 = board1.baron;
      board board3 = new board();
      board2.buy_estate(player0, board3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.smithy;
      board0.great_hall = pile0;
      pile pile1 = board0.salvager;
      board0.embargo = pile1;
      board board1 = new board();
      // Undeclared exception!
      try { 
        board0.buy_baron((player) null, board1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.great_hall;
      pile0.num_tokens = 0;
      pile0.num_tokens = 19;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.gardens;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@&&19CI-T57h";
      player player0 = new player();
      board board1 = new board();
      pile0.num_cards = 0;
      hand hand0 = new hand();
      player0.player_hand = hand0;
      player0.gold = 19;
      pile0.num_cards = 10;
      board1.buy_gold(player0, board0);
      board1.baron = pile0;
      board0.mine = pile0;
      board1.buy_smithy(player0, board0);
      player0.print_player();
      board0.smithy = pile2;
      board1.buy_village(player0, board0);
      board1.embargo = pile0;
      pile pile3 = board1.feast;
      board1.buy_gardens(player0, board0);
      board0.buy_adventurer(player0, board1);
      board board2 = new board();
      pile pile4 = board2.great_hall;
      board1.gardens = pile3;
      board0.buy_embargo(player0, board2);
      pile pile5 = board0.estate;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      pile0.num_tokens = 0;
      board0.gardens = pile0;
      board0.salvager = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      board0.buy_province(player0, board1);
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.gardens.num_cards = 0;
      board board2 = new board();
      board0.buy_embargo(player0, board1);
      board board3 = new board();
      board2.buy_duchy(player0, board3);
      board2.print_board();
      board2.buy_great_hall(player0, board0);
      board3.buy_gardens(player0, board2);
      board1.buy_mine(player0, board3);
      board1.buy_copper(player0, board3);
      board3.buy_silver(player0, board1);
      board2.duchy = board0.gardens;
      board3.buy_mine(player0, board2);
      board3.gold = board0.salvager;
      board board4 = new board();
      board4.ambassador = board0.gardens;
      board3.buy_council_room(player0, board1);
      board1.buy_duchy(player0, board2);
      board3.buy_cutpurse(player0, board2);
      player player1 = new player();
      board0.buy_adventurer(player1, board1);
      deck deck0 = board3.trash_pile;
      board3.buy_mine(player0, board0);
      board0.buy_ambassador(player0, board1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.great_hall;
      pile0.num_tokens = 0;
      pile0.num_tokens = 19;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.gardens;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@&&19CI-T57h";
      player player0 = new player();
      board board1 = new board();
      pile0.num_cards = 0;
      board1.ambassador = pile2;
      hand hand0 = new hand();
      player0.player_hand = hand0;
      player0.gold = 19;
      board1.buy_gold(player0, board0);
      board0.mine = pile0;
      board1.buy_smithy(player0, board0);
      player0.print_player();
      board0.smithy = pile2;
      board1.buy_village(player0, board0);
      board1.embargo = pile0;
      pile pile3 = board1.feast;
      board0.buy_adventurer(player0, board1);
      board board2 = new board();
      pile pile4 = board2.great_hall;
      board1.buy_smithy(player0, board2);
      board1.feast = pile4;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.estate;
      board board1 = new board();
      board1.cutpurse = pile0;
      board board2 = new board();
      // Undeclared exception!
      try { 
        board1.buy_adventurer((player) null, board2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      pile pile0 = board0.feast;
      player0.gold = 16;
      board0.feast = pile0;
      board board1 = new board();
      board0.buy_great_hall(player0, board1);
      board0.buy_great_hall(player0, board1);
      board1.buy_copper(player0, board0);
      board board2 = new board();
      pile pile1 = board2.silver;
      board2.buy_embargo(player0, board0);
      board2.buy_baron(player0, board0);
      player player1 = new player();
      board0.buy_ambassador(player1, board1);
      pile pile2 = board1.baron;
      board1.buy_embargo(player1, board0);
      board2.buy_gold(player0, board0);
      pile pile3 = board1.gold;
      board2.baron = board0.feast;
      pile2.num_cards = (-1183);
      pile0.name = "($>/HHTNI/";
      pile pile4 = board0.gold;
      board1.ambassador = pile2;
      pile pile5 = board1.council_room;
      pile pile6 = board2.curse;
      board1.buy_salvager(player0, board0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      board0.salvager = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      pile0.num_tokens = 3675;
      board0.buy_province(player0, board1);
      board1.num_players = 0;
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.buy_embargo(player0, board1);
      board1.buy_salvager(player0, board0);
      board board2 = new board();
      board0.buy_duchy(player0, board2);
      board0.print_board();
      board1.buy_great_hall(player0, board0);
      pile pile1 = board0.silver;
      pile0.num_tokens = 0;
      board1.buy_mine(player0, board2);
      board1.buy_copper(player0, board2);
      board2.buy_mine(player0, board0);
      board board3 = new board();
      board3.ambassador = board0.gardens;
      board1.buy_duchy(player0, board0);
      board2.buy_cutpurse(player0, board0);
      hand hand0 = player0.player_hand;
      discard discard0 = player0.player_discard;
      board3.buy_baron(player0, board2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      pile0.num_tokens = (-4);
      board0.gardens = pile0;
      board0.salvager = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      board0.buy_province(player0, board1);
      board1.num_players = 0;
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.gardens.num_cards = (-4);
      board board2 = new board();
      board0.buy_embargo(player0, board1);
      board2.buy_salvager(player0, board0);
      board board3 = new board();
      board2.buy_duchy(player0, board3);
      board2.print_board();
      board2.buy_great_hall(player0, board0);
      pile pile1 = board0.silver;
      board1.buy_mine(player0, board3);
      board1.buy_copper(player0, board3);
      board3.buy_mine(player0, board2);
      board board4 = new board();
      board4.ambassador = board0.gardens;
      board3.buy_council_room(player0, board1);
      board1.buy_duchy(player0, board2);
      board3.buy_cutpurse(player0, board2);
      board1.buy_great_hall(player0, board4);
      board3.buy_estate(player0, board0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      player0.victory_points = 1779;
      board0.buy_duchy(player0, board1);
      board board2 = new board();
      pile pile0 = board2.smithy;
      board2.adventurer = pile0;
      board1.buy_baron(player0, board2);
      board2.buy_great_hall(player0, board1);
      board2.num_players = 1000;
      pile pile1 = board2.mine;
      board board3 = new board();
      pile pile2 = board1.salvager;
      board1.embargo = pile2;
      // Undeclared exception!
      try { 
        board1.buy_salvager((player) null, board3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      pile0.num_tokens = 0;
      board0.gardens = pile0;
      board0.salvager = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      board0.great_hall = pile0;
      board0.buy_province(player0, board1);
      board1.num_players = 0;
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.gardens.num_cards = 0;
      board board2 = new board();
      board0.buy_embargo(player0, board1);
      board2.buy_salvager(player0, board0);
      board board3 = new board();
      board3.cutpurse = pile0;
      board2.buy_duchy(player0, board3);
      board2.print_board();
      board2.buy_great_hall(player0, board0);
      pile pile1 = board0.silver;
      board1.buy_mine(player0, board3);
      board1.buy_copper(player0, board3);
      board3.buy_mine(player0, board2);
      board1.buy_duchy(player0, board2);
      board3.buy_cutpurse(player0, board2);
      pile pile2 = board2.silver;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      player0.gold = 8;
      board board1 = new board();
      board board2 = new board();
      pile pile0 = board2.salvager;
      board0.duchy = pile0;
      board0.buy_baron(player0, board2);
      board0.cutpurse = null;
      board0.buy_cutpurse(player0, board1);
      board2.village = null;
      board0.buy_council_room(player0, board1);
      pile pile1 = board1.feast;
      board1.salvager = pile1;
      board1.curse = pile1;
      board1.buy_copper(player0, board2);
      board0.buy_mine(player0, board2);
      board board3 = new board();
      board3.buy_silver(player0, board2);
      board3.num_empty = 12;
      board2.mine = null;
      player player1 = new player();
      deck deck0 = player1.player_deck;
      board3.trash_pile = deck0;
      player0.print_player();
      deck deck1 = player0.player_deck;
      board1.trash_pile = deck1;
      board0.buy_gold(player0, board3);
      int int0 = board1.num_empty;
      pile pile2 = board0.feast;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      // Undeclared exception!
      try { 
        board0.buy_cutpurse((player) null, board1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.copper;
      board0.duchy = pile0;
      pile0.num_tokens = (-1141);
      board0.adventurer = pile0;
      player player0 = new player();
      player0.print_player();
      board board1 = new board();
      board1.duchy = pile0;
      player0.gold = 1017;
      board0.buy_gardens(player0, board1);
      pile0.num_tokens = (-1141);
      pile pile1 = board0.cutpurse;
      pile1.name = "7:[jU4S8-[t^3+P*";
      player player1 = new player();
      deck deck0 = player1.player_deck;
      board1.trash_pile = deck0;
      deck0.shuffle();
      board0.buy_curse(player0, board1);
      player1.player_deck = deck0;
      board1.village = pile0;
      board0.buy_province(player1, board1);
      board0.buy_council_room(player0, board1);
      board0.buy_mine(player1, board1);
      board1.buy_silver(player1, board0);
      board1.buy_adventurer(player0, board0);
      board1.province = pile1;
      deck deck1 = board1.trash_pile;
      board0.buy_salvager(player0, board1);
      board1.baron = pile0;
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.embargo;
      board0.council_room = pile0;
      deck deck0 = board0.trash_pile;
      board0.estate = pile0;
      board0.great_hall = pile0;
      pile0.num_tokens = 3134;
      player player0 = new player();
      player0.gold = 8;
      board board1 = new board();
      board0.buy_curse(player0, board1);
      board0.buy_adventurer(player0, board1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      board board0 = new board();
      // Undeclared exception!
      try { 
        board0.buy_village((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      board board0 = new board();
      board0.gold = null;
      pile pile0 = board0.duchy;
      board0.duchy = pile0;
      player player0 = new player();
      board board1 = new board();
      board1.estate = null;
      player0.print_player();
      // Undeclared exception!
      try { 
        board1.buy_estate((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      board board0 = new board();
      // Undeclared exception!
      try { 
        board0.buy_gardens((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      board board0 = new board();
      board board1 = new board();
      // Undeclared exception!
      try { 
        board0.buy_council_room((player) null, board1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      // Undeclared exception!
      try { 
        board0.buy_curse(player0, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      board board0 = new board();
      board board1 = new board();
      // Undeclared exception!
      try { 
        board0.buy_embargo((player) null, board1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      board board0 = new board();
      // Undeclared exception!
      try { 
        board0.buy_copper((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.province;
      board0.ambassador = pile0;
      board board1 = new board();
      pile0.num_tokens = 0;
      board1.smithy = pile0;
      board1.feast = pile0;
      pile0.num_tokens = 1219;
      // Undeclared exception!
      try { 
        board0.buy_province((player) null, board1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      board board0 = new board();
      board board1 = new board();
      board1.great_hall = null;
      // Undeclared exception!
      try { 
        board1.print_board();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      hand hand0 = player0.player_hand;
      board0.buy_ambassador(player0, board1);
      hand0.player_hand = null;
      player0.player_hand = hand0;
      board0.buy_curse(player0, board1);
      player0.victory_points = 11;
      board1.buy_duchy(player0, (board) null);
      pile pile0 = board1.curse;
      board1.num_players = 1790;
      pile pile1 = board0.feast;
      // Undeclared exception!
      try { 
        board1.buy_ambassador((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      deck deck0 = board0.trash_pile;
      player0.player_deck = deck0;
      board0.num_empty = 9;
      player0.gold = 9;
      pile pile0 = board0.feast;
      board0.salvager = pile0;
      board board1 = new board();
      board0.buy_ambassador(player0, board1);
      board1.buy_gold(player0, board0);
      board1.buy_estate(player0, board0);
      deck0.num_cards = 4373;
      player0.print_player();
      board0.buy_gardens(player0, board1);
      pile pile1 = board0.curse;
      pile1.num_tokens = 4373;
      great_hall great_hall0 = new great_hall();
      great_hall0.type = "gardens";
      // Undeclared exception!
      try { 
        player0.player_deck.add_card(great_hall0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         assertThrownBy("org.cs362.dominion.deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      board board0 = new board();
      // Undeclared exception!
      try { 
        board0.buy_mine((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.province;
      board0.adventurer = pile0;
      pile pile1 = board0.gold;
      board0.adventurer = pile1;
      pile pile2 = board0.salvager;
      pile pile3 = board0.baron;
      board board1 = new board();
      // Undeclared exception!
      try { 
        board0.buy_duchy((player) null, board1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.estate;
      pile0.name = "";
      pile0.num_tokens = (-1194);
      pile0.num_tokens = (-1194);
      pile0.num_tokens = (-1194);
      board0.estate = pile0;
      player player0 = new player();
      board0.buy_great_hall(player0, (board) null);
      board0.buy_adventurer(player0, (board) null);
      // Undeclared exception!
      try { 
        board0.buy_silver((player) null, (board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      board board0 = new board();
      board0.print_board();
      pile pile0 = board0.silver;
      pile pile1 = board0.adventurer;
      board board1 = new board();
      // Undeclared exception!
      try { 
        board1.buy_smithy((player) null, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      board0.buy_estate(player0, board1);
      board board2 = new board();
      pile pile0 = board1.village;
      board2.gold = pile0;
      pile0.name = "";
      pile0.num_cards = 0;
      board2.province = pile0;
      board1.buy_salvager(player0, board0);
      board0.duchy = board2.province;
      board2.gold.num_tokens = 5;
      pile0.num_tokens = 0;
      player player1 = new player();
      board0.buy_silver(player1, board1);
      board1.buy_mine(player1, board2);
      board board3 = new board();
      // Undeclared exception!
      try { 
        board2.buy_gold((player) null, board3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      deck deck0 = board0.trash_pile;
      player0.player_deck = deck0;
      player0.victory_points = 0;
      board board1 = new board();
      deck0.num_cards = 565;
      board0.buy_mine(player0, board1);
      deck deck1 = board0.trash_pile;
      board board2 = new board();
      // Undeclared exception!
      try { 
        board0.buy_great_hall((player) null, board2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.smithy;
      pile0.num_tokens = 0;
      pile0.num_tokens = 3220;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.gardens;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@&&19CI-T57h";
      player player0 = new player();
      pile0.num_cards = 0;
      hand hand0 = new hand();
      player0.player_hand = hand0;
      player0.gold = 3220;
      pile0.num_cards = 10;
      board0.buy_gold(player0, board0);
      board0.mine = pile0;
      board0.buy_smithy(player0, board0);
      player0.print_player();
      board0.smithy = pile2;
      board0.buy_village(player0, board0);
      pile pile3 = board0.feast;
      board0.buy_gardens(player0, board0);
      board board1 = new board();
      pile pile4 = board1.great_hall;
      pile pile5 = board0.estate;
      board0.buy_duchy(player0, board0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.curse;
      pile0.num_tokens = (-1381);
      pile0.num_tokens = 10;
      pile0.num_cards = 10;
      board0.ambassador = pile0;
      pile pile1 = board0.great_hall;
      player player0 = new player();
      player0.victory_points = 10;
      player0.buy = 10;
      board board1 = new board();
      board1.copper = board0.ambassador;
      board0.buy_copper(player0, board1);
      hand hand0 = player0.player_hand;
      player0.player_hand = hand0;
      int int0 = board1.num_empty;
      board1.smithy = pile0;
      board0.buy_great_hall(player0, board1);
      board1.buy_curse(player0, board0);
      board0.buy_gardens(player0, board1);
      card[] cardArray0 = new card[0];
      hand0.player_hand = cardArray0;
      deck deck0 = board0.trash_pile;
      board1.buy_ambassador(player0, board0);
      board0.trash_pile = deck0;
      board0.buy_copper(player0, board1);
      pile pile2 = board0.village;
      board0.buy_mine(player0, board1);
      board1.buy_smithy(player0, board0);
      pile pile3 = board0.mine;
      player player1 = new player();
      board0.buy_gardens(player1, board1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.gardens;
      board0.gold = pile0;
      pile0.num_cards = 512;
      pile0.num_tokens = 512;
      board0.council_room = pile0;
      pile pile1 = board0.gardens;
      board0.copper = pile1;
      pile1.name = "'9{<!/";
      player player0 = new player();
      player0.action = 642;
      board board1 = new board();
      board1.num_players = 512;
      board1.buy_gold(player0, board0);
      board0.buy_copper(player0, board1);
      board1.buy_baron(player0, board0);
      pile pile2 = board0.copper;
      board0.cutpurse = pile2;
      board1.buy_great_hall(player0, board0);
      board1.buy_mine(player0, board0);
      pile pile3 = board1.baron;
      board1.buy_silver(player0, board0);
      board1.buy_baron(player0, board0);
      board1.buy_copper(player0, board0);
      assertFalse(board1.equals((Object)board0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      pile pile0 = board1.baron;
      board0.gold = pile0;
      player0.gold = 352;
      board0.buy_ambassador(player0, board1);
      board0.buy_council_room(player0, board1);
      pile pile1 = board0.salvager;
      assertFalse(pile1.equals((Object)pile0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      pile pile0 = board0.great_hall;
      player0.gold = 17;
      board0.feast = pile0;
      board board1 = new board();
      board0.buy_great_hall(player0, board1);
      board1.buy_copper(player0, board0);
      board board2 = new board();
      board2.village = board0.feast;
      pile pile1 = board2.silver;
      board2.buy_embargo(player0, board0);
      board2.buy_baron(player0, board0);
      player player1 = new player();
      board0.buy_ambassador(player1, board1);
      board1.buy_embargo(player1, board0);
      pile pile2 = board1.gold;
      board2.baron = board0.feast;
      pile pile3 = board0.gold;
      pile pile4 = board1.council_room;
      board1.buy_gold(player1, board0);
      pile pile5 = board2.curse;
      board1.buy_salvager(player0, board0);
      board2.buy_feast(player1, board0);
      board2.buy_adventurer(player1, board1);
      pile pile6 = board2.silver;
      board2.buy_duchy(player0, board0);
      assertFalse(board0.equals((Object)board2));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      pile pile0 = board0.great_hall;
      player0.gold = 17;
      board0.feast = pile0;
      board board1 = new board();
      board0.buy_great_hall(player0, board1);
      board1.buy_copper(player0, board0);
      board board2 = new board();
      pile pile1 = board2.silver;
      board2.buy_embargo(player0, board0);
      board2.buy_baron(player0, board0);
      player player1 = new player();
      board0.buy_ambassador(player1, board1);
      board1.buy_embargo(player1, board0);
      pile pile2 = board1.gold;
      board2.baron = board0.feast;
      pile0.name = "$<k{";
      pile pile3 = board0.gold;
      board1.ambassador = pile0;
      pile pile4 = board1.council_room;
      pile pile5 = board2.curse;
      board1.buy_salvager(player0, board0);
      assertFalse(board1.equals((Object)board2));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      pile pile0 = board0.feast;
      player0.gold = 17;
      board0.feast = pile0;
      board0.buy_great_hall(player0, board0);
      board0.buy_great_hall(player0, board0);
      board0.buy_copper(player0, board0);
      board board1 = new board();
      pile pile1 = board1.silver;
      board1.buy_embargo(player0, board0);
      board1.buy_baron(player0, board0);
      player player1 = new player();
      board0.buy_ambassador(player1, board0);
      pile pile2 = board0.baron;
      board0.buy_embargo(player1, board0);
      board1.buy_gold(player0, board0);
      pile pile3 = board0.gold;
      board1.baron = board0.feast;
      pile2.num_cards = (-1183);
      pile0.name = "($>/HHTNI/";
      pile pile4 = board0.gold;
      pile pile5 = board0.council_room;
      pile pile6 = board1.curse;
      board0.buy_salvager(player0, board0);
      board board2 = new board();
      pile pile7 = new pile();
      board2.salvager = pile7;
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      pile0.num_tokens = 0;
      board0.gardens = pile0;
      board0.salvager = pile0;
      player player0 = new player();
      board0.buy_gardens(player0, board0);
      board0.buy_province(player0, board0);
      player0.gold = 3675;
      board0.buy_mine(player0, board0);
      board0.buy_gardens(player0, board0);
      board board1 = new board();
      board0.buy_embargo(player0, board0);
      board board2 = new board();
      board1.buy_duchy(player0, board2);
      board1.print_board();
      board1.buy_great_hall(player0, board0);
      board2.buy_gardens(player0, board1);
      board0.buy_mine(player0, board2);
      board0.buy_copper(player0, board2);
      board2.buy_silver(player0, board0);
      board1.duchy = board0.gardens;
      board2.buy_mine(player0, board1);
      board2.gold = board0.salvager;
      pile0.num_tokens = 67;
      board board3 = new board();
      board3.ambassador = board0.gardens;
      board2.buy_council_room(player0, board0);
      board0.buy_duchy(player0, board1);
      board2.buy_cutpurse(player0, board1);
      player player1 = new player();
      board0.buy_adventurer(player1, board0);
      deck deck0 = board2.trash_pile;
      board2.buy_mine(player0, board0);
      board0.buy_ambassador(player0, board0);
      board0.buy_province(player0, board3);
      assertFalse(board0.equals((Object)board2));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.feast;
      pile0.name = "silver";
      pile0.num_tokens = 0;
      board0.gardens = pile0;
      board0.salvager = pile0;
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      board0.buy_province(player0, board1);
      board1.num_players = 0;
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.gardens.num_cards = 0;
      board board2 = new board();
      board0.buy_embargo(player0, board1);
      board2.buy_salvager(player0, board0);
      board board3 = new board();
      board1.buy_village(player0, board0);
      board2.buy_duchy(player0, board3);
      board2.print_board();
      board2.buy_great_hall(player0, board0);
      pile pile1 = board0.silver;
      board1.buy_mine(player0, board3);
      board1.buy_copper(player0, board3);
      board3.buy_mine(player0, board2);
      board board4 = new board();
      board4.ambassador = board0.gardens;
      board1.buy_duchy(player0, board2);
      board0.estate = pile0;
      board1.buy_great_hall(player0, board4);
      board3.buy_estate(player0, board0);
      board3.buy_silver(player0, board2);
      board2.buy_adventurer(player0, board3);
      board1.buy_ambassador(player0, board4);
      assertFalse(board1.equals((Object)board0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      board0.buy_gardens(player0, board1);
      board0.buy_province(player0, board1);
      board1.num_players = 0;
      player0.gold = 3675;
      board1.buy_mine(player0, board0);
      board0.buy_gardens(player0, board1);
      board0.gardens.num_cards = 0;
      board board2 = new board();
      board0.buy_embargo(player0, board1);
      board2.buy_salvager(player0, board0);
      board board3 = new board();
      board1.buy_village(player0, board0);
      board2.buy_duchy(player0, board3);
      board2.print_board();
      board2.buy_great_hall(player0, board0);
      pile pile0 = board2.great_hall;
      board1.buy_mine(player0, board3);
      board1.buy_copper(player0, board3);
      player player1 = new player();
      board3.buy_embargo(player1, board1);
      board3.buy_mine(player0, board2);
      board board4 = new board();
      board4.ambassador = board0.gardens;
      board1.buy_duchy(player0, board2);
      board3.buy_cutpurse(player0, board2);
      board1.buy_great_hall(player0, board4);
      board3.buy_estate(player0, board0);
      board3.buy_silver(player0, board2);
      board2.buy_adventurer(player0, board3);
      board2.buy_smithy(player0, board0);
      player player2 = new player();
      board board5 = new board();
      board0.buy_ambassador(player2, board5);
      assertFalse(board5.equals((Object)board4));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.embargo;
      board0.baron = pile0;
      player player0 = new player();
      board board1 = new board();
      board1.buy_estate(player0, board0);
      board0.buy_mine(player0, board1);
      board1.print_board();
      player0.print_player();
      board board2 = new board();
      board1.gardens = pile0;
      board board3 = new board();
      pile pile1 = board3.adventurer;
      board0.cutpurse = pile1;
      board1.buy_silver(player0, board3);
      board0.buy_curse(player0, board2);
      board1.ambassador = board0.baron;
      pile pile2 = board1.village;
      board2.buy_great_hall(player0, board0);
      pile pile3 = board2.smithy;
      board3.cutpurse = board0.cutpurse;
      board1.gold = pile1;
      board board4 = new board();
      board0.buy_adventurer(player0, board4);
      board3.buy_council_room(player0, board2);
      board3.print_board();
      board1.buy_council_room(player0, board2);
      pile pile4 = board2.village;
      board3.baron = board0.cutpurse;
      pile pile5 = board3.adventurer;
      board2.buy_mine(player0, board3);
      assertFalse(board2.equals((Object)board0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      board board0 = new board();
      pile pile0 = board0.great_hall;
      pile0.num_tokens = 0;
      pile0.name = "Please enter a number between 1 and 20.";
      pile0.num_tokens = 19;
      board0.gardens = pile0;
      board0.embargo = pile0;
      pile pile1 = board0.feast;
      pile pile2 = board0.gardens;
      pile0.name = "4aZf]8@+&19CI-T57h";
      player player0 = new player();
      board board1 = new board();
      pile0.num_cards = 0;
      hand hand0 = new hand();
      player0.player_hand = hand0;
      player0.gold = 19;
      pile0.num_cards = pile0.num_cards;
      board1.buy_gold(player0, board0);
      board0.mine = pile0;
      board1.buy_smithy(player0, board0);
      player0.print_player();
      board0.smithy = pile2;
      board1.buy_village(player0, board0);
      board1.embargo = pile0;
      pile pile3 = board1.feast;
      board1.buy_gardens(player0, board0);
      board0.buy_adventurer(player0, board1);
      board0.silver = pile0;
      board board2 = new board();
      pile pile4 = board2.great_hall;
      board0.buy_mine(player0, board2);
      board1.num_empty = 1564;
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      deck deck0 = new deck();
      board0.trash_pile = deck0;
      card[] cardArray0 = new card[4];
      gold gold0 = new gold();
      cardArray0[1] = (card) gold0;
      village village0 = new village();
      cardArray0[2] = (card) village0;
      embargo embargo0 = new embargo();
      village0.gold = 5;
      cardArray0[3] = (card) embargo0;
      deck0.player_deck = cardArray0;
      board board1 = new board();
      board0.buy_duchy(player0, board1);
      board0.buy_adventurer(player0, board1);
      gardens gardens0 = new gardens();
      board0.buy_cutpurse(player0, board0);
      board0.buy_village(player0, board0);
      board0.copper = null;
      board1.buy_salvager(player0, board0);
      pile pile0 = board1.adventurer;
      assertNotNull(pile0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      player0.victory_points = (-2673);
      player0.gold = (-31);
      player0.victory_points = (-31);
      embargo embargo0 = new embargo();
      pile pile0 = board0.mine;
      pile pile1 = board0.smithy;
      board0.buy_smithy(player0, board0);
      board0.buy_mine(player0, board0);
      board0.buy_curse(player0, board0);
      board board1 = new board();
      board1.num_empty = 1;
      board0.buy_copper(player0, board1);
      board1.buy_feast(player0, board0);
      pile pile2 = board0.gardens;
      pile pile3 = board0.mine;
      // Undeclared exception!
      try { 
        board1.buy_feast((player) null, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.board", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      board board0 = new board();
      player player0 = new player();
      board board1 = new board();
      board1.buy_ambassador(player0, board0);
      board0.buy_smithy(player0, board1);
      board board2 = new board();
      deck deck0 = new deck();
      board1.trash_pile = deck0;
      pile pile0 = board0.cutpurse;
      board2.embargo = pile0;
      board0.buy_salvager(player0, board2);
      board1.mine = pile0;
      board2.buy_copper(player0, board1);
      board1.gold = board2.embargo;
      pile pile1 = board1.mine;
      player0.gold = 3221;
      board2.buy_province(player0, board0);
      pile pile2 = board1.gold;
      great_hall great_hall0 = new great_hall();
      deck0.add_card(great_hall0);
      int int0 = board1.num_empty;
      pile pile3 = board0.baron;
      pile0.num_cards = (-2989);
      pile0.num_tokens = 17;
      board2.buy_feast(player0, board1);
      pile pile4 = new pile();
      board1.buy_gold(player0, board2);
      board board3 = new board();
      board3.buy_cutpurse(player0, board0);
      pile pile5 = board2.duchy;
      pile5.num_tokens = 1003;
      board2.buy_embargo(player0, board2);
      board board4 = new board();
      board3.estate = board1.mine;
      board board5 = new board();
      board4.buy_feast(player0, board5);
      board4.buy_council_room(player0, board3);
      assertFalse(board3.equals((Object)board1));
  }
}
