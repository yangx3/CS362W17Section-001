/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 05:28:26 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.cs362.dominion.board;
import org.cs362.dominion.embargo;
import org.cs362.dominion.pile;
import org.cs362.dominion.player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class embargo_ESTest extends embargo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      embargo embargo0 = new embargo();
      board board0 = new board();
      // Undeclared exception!
      try { 
        embargo0.perform_attack((player[]) null, 16, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.embargo", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      player player1 = new player();
      playerArray0[1] = player1;
      player player2 = new player();
      playerArray0[2] = player2;
      playerArray0[3] = player2;
      player player3 = new player();
      playerArray0[4] = player3;
      playerArray0[5] = playerArray0[0];
      board board0 = new board();
      embargo embargo1 = new embargo();
      embargo1.perform_attack(playerArray0, 0, board0);
      embargo0.perform_attack(playerArray0, 0, board0);
      assertFalse(embargo0.equals((Object)embargo1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      playerArray0[2] = player0;
      player player1 = new player();
      player player2 = new player();
      board board0 = new board();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo0.perform_attack(playerArray0, 0, board0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[1];
      player player0 = new player();
      playerArray0[0] = player0;
      player0.gold = 1;
      board board0 = new board();
      embargo0.victory_points = 1;
      pile pile0 = board0.duchy;
      board0.feast = pile0;
      embargo0.perform_attack(playerArray0, 0, board0);
      board0.baron = pile0;
      board board1 = new board();
      board0.buy_baron(player0, board1);
      board0.buy_estate(player0, board1);
      embargo0.description();
      embargo embargo1 = new embargo();
      embargo0.perform_attack(playerArray0, 0, board0);
      // Undeclared exception!
      try { 
        embargo0.perform_attack(playerArray0, 1, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         assertThrownBy("org.cs362.dominion.embargo", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      player player1 = new player();
      playerArray0[1] = player1;
      player player2 = new player();
      playerArray0[2] = player2;
      player player3 = new player();
      playerArray0[4] = player3;
      player player4 = new player();
      playerArray0[5] = player4;
      board board0 = new board();
      embargo embargo1 = new embargo();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo0.description();
      board board1 = new board();
      board1.cutpurse = null;
      embargo embargo2 = new embargo();
      board board2 = new board();
      embargo embargo3 = new embargo();
      embargo3.perform_attack(playerArray0, 0, board0);
      embargo0.description();
      assertFalse(embargo0.equals((Object)embargo3));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      playerArray0[1] = playerArray0[0];
      player player1 = new player();
      playerArray0[3] = player1;
      player player2 = new player();
      board board0 = new board();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo0.perform_attack(playerArray0, 0, board0);
      board0.buy_feast(playerArray0[0], board0);
      board board1 = new board();
      assertFalse(board1.equals((Object)board0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      player player1 = new player();
      playerArray0[1] = player1;
      player player2 = new player();
      playerArray0[2] = player2;
      playerArray0[3] = player2;
      player player3 = new player();
      playerArray0[4] = player3;
      player player4 = new player();
      board board0 = new board();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo embargo1 = new embargo();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo0.description();
      embargo embargo2 = new embargo();
      board board1 = new board();
      board1.cutpurse = null;
      embargo2.gold = (-2194);
      embargo embargo3 = new embargo();
      board board2 = new board();
      board0.buy_baron(player1, board2);
      assertFalse(board0.equals((Object)board1));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      player player1 = new player();
      playerArray0[2] = player1;
      playerArray0[3] = player1;
      player player2 = new player();
      board board0 = new board();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo embargo1 = new embargo();
      embargo0.description();
      embargo embargo2 = new embargo();
      board board1 = new board();
      embargo2.gold = (-2194);
      board board2 = new board();
      board0.buy_baron(player1, board2);
      assertFalse(player1.equals((Object)player2));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      embargo embargo0 = new embargo();
      player[] playerArray0 = new player[6];
      player player0 = new player();
      playerArray0[0] = player0;
      player player1 = new player();
      playerArray0[1] = player1;
      player player2 = new player();
      playerArray0[2] = player2;
      playerArray0[3] = player2;
      player player3 = new player();
      playerArray0[5] = playerArray0[4];
      board board0 = new board();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo embargo1 = new embargo();
      embargo0.perform_attack(playerArray0, 0, board0);
      embargo0.description();
      embargo embargo2 = new embargo();
      embargo2.gold = (-2194);
      embargo2.perform_attack(playerArray0, 0, board0);
      assertFalse(embargo2.equals((Object)embargo0));
  }
}
