/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 23:55:40 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((GameState) null, "GO]JbU");
      player0.numActions = (-184);
      Player player1 = player0.clone();
      player1.player_username = null;
      player1.playKingdomCard();
      Player player2 = player1.clone();
      Player player3 = player0.clone();
      player2.buyCard((GameState) null);
      player3.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList0;
      gameState0.players = (List<Player>) linkedList0;
      Player player1 = player0.clone();
      stack0.add((Card) null);
      player1.numBuys = (-4389);
      stack0.add((Card) null);
      player1.endTurn();
      player0.playTreasureCard();
      player1.playTreasureCard();
      player1.scoreFor();
      player0.playTreasureCard();
      Player player2 = new Player(gameState0, "");
      player2.playedCards = (List<Card>) stack0;
      player1.buyCard(gameState0);
      player0.endTurn();
      player2.endTurn();
      player2.drawCard();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.drawCard();
      linkedList0.add((Card) null);
      player0.numActions = 1942;
      player0.hand = list0;
      player0.playTreasureCard();
      player0.toString();
      int int0 = player0.numActions;
      player0.discard = list0;
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      player0.numActions = 1942;
      player0.hand = list0;
      player0.playTreasureCard();
      player0.toString();
      player0.scoreFor();
      player0.discard = list0;
      player0.scoreFor();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      player0.playKingdomCard();
      player0.scoreFor();
      Card.CardName.values();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      player0.playTreasureCard();
      player0.toString();
      player0.scoreFor();
      player0.discard = list0;
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      Player player1 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      player1.drawCard();
      linkedList0.add((Card) null);
      player0.numBuys = 45;
      player0.coins = 486;
      // Undeclared exception!
      try { 
        player0.buyCard(gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      player0.numActions = 1942;
      player0.hand = list0;
      player0.playTreasureCard();
      player0.toString();
      player0.scoreFor();
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((GameState) null, "@<q");
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = player0.deck;
      player1.deck = linkedList0;
      List<Card> list0 = player0.hand;
      linkedList0.add((Card) null);
      player1.playedCards = list0;
      List<Card> list1 = player1.discard;
      player0.hand = player1.playedCards;
      // Undeclared exception!
      try { 
        player1.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((GameState) null, "org.apache.oro.io.AwkFilenameFilter");
      Player player1 = player0.clone();
      player1.buyCard((GameState) null);
      player1.endTurn();
      player1.endTurn();
      Card.Type.values();
      player1.discard = null;
      Card.Type.values();
      // Undeclared exception!
      try { 
        player1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      player0.numActions = 1942;
      player0.hand = list0;
      player0.playTreasureCard();
      player0.toString();
      player0.scoreFor();
      player0.discard = list0;
      player0.scoreFor();
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      player0.gain(card0);
      player0.scoreFor();
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, (String) null);
      player0.hand = (List<Card>) linkedList0;
      player0.playKingdomCard();
      player0.numActions = (-608);
      gameState0.play();
      GameState gameState1 = gameState0.clone();
      gameState1.toString();
      Player player1 = new Player(gameState1, "org.apache.oro.io.AwkFilenameFilter");
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(gameState1.cards, card_CardName0);
      linkedList0.add((Card) null);
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(106, 106);
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.getWinners();
      Player player0 = new Player(gameState1, (String) null);
      Player player1 = player0.clone();
      gameState0.getWinners();
      player1.playedCards = list0;
      player1.toString();
      Card.CardName.values();
      gameState0.gameBoard = gameState1.gameBoard;
      player1.endTurn();
      List<Card> list1 = player0.playedCards;
      Card.CardName.values();
      Card.CardName.values();
      player0.scoreFor();
      player0.playTreasureCard();
      player0.clone();
      player1.playKingdomCard();
      player0.drawCard();
      player1.discard((Card) null);
      player0.buyCard(gameState1);
      List<Card> list2 = player1.discard;
      Card.Type.values();
      gameState0.gameBoard = gameState1.gameBoard;
      LinkedList<Card> linkedList0 = player1.deck;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "5Co1YB!%?\"bhdh/ps");
      player0.endTurn();
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player0.clone();
      player1.scoreFor();
      player0.drawCard();
      player0.endTurn();
      List<Card> list1 = player1.playedCards;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("1696-09-01T00:00:00Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.1696-09-01T00:00:00Z
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.toString();
      Player player0 = new Player(gameState1, "ih");
      gameState1.players = gameState0.players;
      player0.discard = gameState1.cards;
      Player player1 = player0.clone();
      player1.drawCard();
      player0.endTurn();
      player0.endTurn();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Month");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.Month
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      player0.numBuys = 45;
      player0.coins = 486;
      player0.buyCard(gameState0);
      Player player1 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "~nfaR>");
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState0, "~nfaR>");
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      player1.hand = null;
      player1.toString();
      // Undeclared exception!
      try { 
        player1.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      player0.clone();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.addPlayer((Player) null);
      Player player0 = new Player(gameState0, "Ay#CR");
      player0.numActions = 104;
      player0.player_username = "Ay#CR";
      player0.gain((Card) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.playTreasureCard();
      player0.toString();
      player0.discard = list0;
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = Card.createCards();
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.numActions = 1942;
      player0.hand = list0;
      player0.playTreasureCard();
      player0.toString();
      int int0 = player0.numActions;
      player0.discard = list0;
      player0.scoreFor();
      player0.playKingdomCard();
      player0.scoreFor();
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "2:9 %r)vyS!~F@8");
      player0.endTurn();
      player0.playTreasureCard();
      player0.playedCards = (List<Card>) stack0;
      List<Card> list0 = player0.hand;
      player0.drawCard();
      player0.discard((Card) null);
      player0.buyCard(gameState0);
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("2:9 %r)vyS!~F@8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.CardName.2:9 %r)vyS!~F@8
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.CardName.values();
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      TreeSet<Card> treeSet1 = new TreeSet<Card>((SortedSet<Card>) treeSet0);
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      treeSet1.iterator();
      Player player0 = new Player(gameState0, "");
      player0.playKingdomCard();
      player0.endTurn();
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player1.player_username = "";
      player0.scoreFor();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(stack0, card_CardName0);
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      player0.numBuys = 45;
      player0.coins = 45;
      player0.buyCard(gameState0);
      List<Card> list0 = player0.hand;
      player0.scoreFor();
      player0.buyCard(gameState0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Card.CardName.valueOf(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }
}
