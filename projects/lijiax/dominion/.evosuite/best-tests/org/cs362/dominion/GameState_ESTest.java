/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 23:56:20 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      gameState1.players = gameState0.players;
      gameState1.getWinners();
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState1.isGameOver();
      GameState gameState2 = gameState1.clone();
      gameState1.initializeGame();
      vector0.retainAll(gameState0.players);
      gameState1.addPlayer(player0);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState2.play();
      gameState0.addPlayer(player0);
      List<Card> list0 = gameState1.cards;
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(0);
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      HashMap<Card, Integer> hashMap0 = gameState1.gameBoard;
      gameState0.gameBoard = gameState1.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.getCard(gameState1.cards, card_CardName0);
      Integer integer0 = new Integer(714);
      hashMap0.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState0.players = null;
      gameState0.cards = list0;
      // Undeclared exception!
      try { 
        gameState1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      HashMap<Card, Integer> hashMap0 = gameState1.gameBoard;
      gameState0.gameBoard = gameState1.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(gameState1.cards, card_CardName0);
      gameState0.toString();
      Integer integer0 = new Integer((-86));
      Card.CardName card_CardName1 = Card.CardName.Feast;
      Card.getCard(gameState1.cards, card_CardName1);
      hashMap0.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState1.play();
      gameState0.players = null;
      Player player0 = new Player(gameState0, "7C[)!{V");
      // Undeclared exception!
      try { 
        gameState0.addPlayer(player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "Spk-@b");
      gameState0.addPlayer(player0);
      GameState gameState1 = gameState0.clone();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(gameState0.cards, card_CardName0);
      gameState1.isGameOver();
      gameState0.isGameOver();
      gameState1.toString();
      Randomness.reset(61L);
      gameState0.getWinners();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      gameState1.initializeGame();
      gameState1.getWinners();
      GameState.addEmbargo((Card) null);
      gameState0.addPlayer(player0);
      vector0.add((Card) null);
      gameState1.isGameOver();
      gameState1.isGameOver();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      GameState gameState2 = gameState0.clone();
      gameState0.initializeGame();
      gameState0.toString();
      gameState0.gameBoard = gameState1.gameBoard;
      gameState2.initializeGame();
      GameState.addEmbargo((Card) null);
      Player player0 = new Player(gameState1, "The board game is embty you need to intialize the game!!!!");
      Player player1 = player0.clone();
      gameState1.addPlayer(player1);
      gameState2.play();
      gameState0.isGameOver();
      gameState2.cards = (List<Card>) arrayList0;
      gameState2.players = gameState0.players;
      arrayList0.add((Card) null);
      // Undeclared exception!
      try { 
        gameState2.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(0);
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(gameState1.cards, card_CardName0);
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState0.players = null;
      gameState0.cards = list0;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.play();
      gameState0.initializeGame();
      gameState0.players = gameState1.players;
      gameState1.addPlayer((Player) null);
      gameState1.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState1.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Player player0 = new Player(gameState0, "Great_Hall");
      gameState0.addPlayer(player0);
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName.values();
      GameState gameState0 = new GameState((List<Card>) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      Stack<Player> stack0 = new Stack<Player>();
      stack0.setSize(267);
      gameState0.players = (List<Player>) stack0;
      gameState0.initializeGame();
      HashMap<Player, Integer> hashMap1 = new HashMap<Player, Integer>();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(0);
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      HashMap<Card, Integer> hashMap0 = gameState1.gameBoard;
      gameState0.gameBoard = gameState1.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      List<Card> list1 = Card.createCards();
      Card.CardName card_CardName1 = Card.CardName.Copper;
      Card card0 = Card.getCard(list1, card_CardName1);
      Integer integer0 = new Integer(0);
      hashMap0.put(card0, integer0);
      hashMap0.clone();
      Card.getCard(gameState1.cards, card_CardName0);
      Integer integer1 = new Integer((-33));
      Integer.getInteger("\t\t ", (-33));
      hashMap0.put((Card) null, integer1);
      gameState0.isGameOver();
      gameState0.cards = list0;
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(gameState0.cards, card_CardName0);
      gameState0.toString();
      Integer integer0 = new Integer((-86));
      Card.CardName card_CardName1 = Card.CardName.Feast;
      Card.getCard(gameState0.cards, card_CardName1);
      hashMap0.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState0.play();
      gameState0.players = null;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(18);
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      HashMap<Card, Integer> hashMap0 = gameState1.gameBoard;
      gameState0.gameBoard = gameState1.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.getCard(list0, card_CardName0);
      gameState1.play();
      Integer integer0 = new Integer((-63));
      hashMap0.put((Card) null, integer0);
      Card.getCard(gameState1.cards, card_CardName0);
      Integer integer1 = new Integer((-33));
      hashMap0.put((Card) null, integer1);
      gameState0.isGameOver();
      gameState0.players = null;
      gameState0.cards = list0;
      // Undeclared exception!
      try { 
        gameState1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      gameState1.players = gameState0.players;
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState1.initializeGame();
      gameState1.isGameOver();
      GameState gameState2 = gameState1.clone();
      gameState1.initializeGame();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState2.play();
      gameState0.addPlayer(player0);
      List<Card> list0 = gameState0.cards;
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.random = (Random) mockRandom0;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.CardName.values();
      Randomness.reset(19L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.cards = list0;
      List<Player> list1 = gameState0.players;
      gameState0.cards = list0;
      gameState0.clone();
      String string0 = "";
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      player0.playKingdomCard();
      player0.clone();
      Player player1 = player0.clone();
      player1.clone();
      gameState0.addPlayer(player1);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      ArrayList<Card> arrayList0 = new ArrayList<Card>(0);
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.getWinners();
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.getCard(arrayList0, card_CardName0);
      arrayList0.sort((Comparator<? super Card>) null);
      GameState.addEmbargo((Card) null);
      gameState0.cards = (List<Card>) arrayList0;
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(0);
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
