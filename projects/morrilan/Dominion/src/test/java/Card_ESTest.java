/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 22:48:31 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreasureCard treasureCard0 = new TreasureCard("", 0, "#`x`A{3worG", 0);
      int int0 = treasureCard0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CurseCard curseCard0 = new CurseCard("w(d", 2630, "I}l]>qyM%,");
      curseCard0.curseValue = 2630;
      int int0 = curseCard0.getValue();
      assertEquals(2630, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CurseCard curseCard0 = new CurseCard("", 1, "");
      int int0 = curseCard0.getValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreasureCard treasureCard0 = new TreasureCard("GrZU", (-882), "", (-1));
      String string0 = treasureCard0.getName();
      assertNotNull(string0);
      assertEquals("GrZU", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreasureCard treasureCard0 = new TreasureCard("", 1, "0 E~vZd<H]j", 1);
      String string0 = treasureCard0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CurseCard curseCard0 = new CurseCard(".:q&[vLx#K", 0, (String) null);
      String string0 = curseCard0.getImg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VictoryCard victoryCard0 = new VictoryCard("6g3V~j.jjau\"F", 0, "g*G!lE", 0);
      victoryCard0.cardImg = "";
      String string0 = victoryCard0.getImg();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CurseCard curseCard0 = new CurseCard("", 1, "");
      int int0 = curseCard0.getCost();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VictoryCard victoryCard0 = new VictoryCard("G<o", (-6), "G<o", (-6));
      int int0 = victoryCard0.getCost();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard((String) null, (-1157), "ra$3$PClFr{d>p)t}`", "ra$3$PClFr{d>p)t}`");
      kingdomCard0.cardAction = null;
      String string0 = kingdomCard0.getAction();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard("1im9Y8", 1, "1im9Y8", "Error from KingdomCard, no valid Value to get.");
      String string0 = kingdomCard0.getAction();
      assertEquals("Error from KingdomCard, no valid Value to get.", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VictoryCard victoryCard0 = new VictoryCard("d", 0, "d", 0);
      String string0 = victoryCard0.getAction();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VictoryCard victoryCard0 = new VictoryCard("", 0, "{", 0);
      int int0 = victoryCard0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard((String) null, 0, (String) null, (String) null);
      String string0 = kingdomCard0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VictoryCard victoryCard0 = new VictoryCard((String) null, (-1916), (String) null, (-1));
      String string0 = victoryCard0.getImg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard(" aF6FhE{9ATN<JX^'Q", (-1), " aF6FhE{9ATN<JX^'Q", " aF6FhE{9ATN<JX^'Q");
      int int0 = kingdomCard0.getCost();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreasureCard treasureCard0 = new TreasureCard("Error from CurseCard, no valid Action to get.", 0, "Error from CurseCard, no valid Action to get.", 0);
      String string0 = treasureCard0.getAction();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard((String) null, (-1157), "ra$3$PClFr{d>p)t}`", "ra$3$PClFr{d>p)t}`");
      String string0 = kingdomCard0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard("Xp/fC=,ly\"", 0, "Xp/fC=,ly\"", "Xp/fC=,ly\"");
      int int0 = kingdomCard0.getCost();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KingdomCard kingdomCard0 = new KingdomCard((String) null, (-1157), "ra$3$PClFr{d>p)t}`", "ra$3$PClFr{d>p)t}`");
      String string0 = kingdomCard0.getImg();
      assertEquals("ra$3$PClFr{d>p)t}`", string0);
  }
}
