/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 22:46:49 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscardPile_ESTest extends DiscardPile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      Card[] cardArray0 = discardPile0.shuffle();
      discardPile0.discard(cardArray0);
      int int0 = discardPile0.getNumDiscard();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      // Undeclared exception!
      try { 
        discardPile0.increaseDiscardSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("DiscardPile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedImage bufferedImage0 = (BufferedImage)DiscardPile.getScaledImage((Image) null, 2448, 2448);
      // Undeclared exception!
      try { 
        DiscardPile.getScaledImage(bufferedImage0, 2448, 2125020300);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiscardPile.getScaledImage((Image) null, 1605, 2014753075);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      // Undeclared exception!
      try { 
        discardPile0.discard((Card[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("DiscardPile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      Card[] cardArray0 = discardPile0.shuffle();
      discardPile0.discard(cardArray0);
      discardPile0.increaseDiscardSize();
      assertEquals(8, discardPile0.getNumDiscard());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      VictoryCard victoryCard0 = new VictoryCard("O[]k!", 0, "]Tj", 0);
      discardPile0.discard((Card) victoryCard0);
      assertEquals(1, discardPile0.getNumDiscard());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiscardPile.getScaledImage((Image) null, (-307), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-307) and height (0) cannot be <= 0
         //
         assertThrownBy("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      discardPile0.draw();
      assertEquals(0, discardPile0.getNumDiscard());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      Card[] cardArray0 = discardPile0.shuffle();
      KingdomCard kingdomCard0 = new KingdomCard("V#2?@9KHj", 0, "V#2?@9KHj", "Name: ");
      discardPile0.discard(cardArray0);
      discardPile0.discard((Card) kingdomCard0);
      assertEquals(9, discardPile0.getNumDiscard());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      Card[] cardArray0 = discardPile0.shuffle();
      discardPile0.discard(cardArray0);
      assertEquals(8, discardPile0.getNumDiscard());
      
      discardPile0.shuffle();
      assertEquals(0, discardPile0.getNumDiscard());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      discardPile0.getLabel();
      assertEquals(0, discardPile0.getNumDiscard());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiscardPile discardPile0 = new DiscardPile();
      int int0 = discardPile0.getNumDiscard();
      assertEquals(0, int0);
  }
}
