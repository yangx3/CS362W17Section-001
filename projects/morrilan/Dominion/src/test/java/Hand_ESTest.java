/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 22:43:46 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Hand_ESTest extends Hand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hand hand0 = new Hand();
      TreasureCard treasureCard0 = new TreasureCard("`W9+(:b:7", 0, "ACTION DOES NOT EXIST", 5);
      hand0.addCard(treasureCard0);
      Card[] cardArray0 = new Card[7];
      hand0.addCards(cardArray0);
      hand0.removeCard(0);
      assertEquals(5, hand0.getCoins());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.removeHandIndex(2);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
      assertEquals(0, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.removeHandIndex(2729);
      assertEquals(5, hand0.getLength());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.getHandIndex(2);
      assertEquals(5, hand0.getLength());
      assertEquals(0, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.getHandIndex(2162);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
      assertEquals(0, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.increaseHandSize();
      hand0.scroll(true);
      // Undeclared exception!
      try { 
        hand0.getSelected(1032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1037
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.changeImg(0);
      assertEquals(5, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.gethandLabel(4);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(0, hand0.getNumCards());
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedImage bufferedImage0 = (BufferedImage)Hand.getScaledImage((Image) null, 1124, 1124);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1124, bufferedImage0.getHeight());
      assertEquals(1124, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.setCoins((-25));
      int int0 = hand0.getCoins();
      assertEquals((-25), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hand hand0 = new Hand();
      TreasureCard treasureCard0 = new TreasureCard("`W9+(:b:7", 0, "ACTION DOES NOT EXIST", 5);
      hand0.addCard(treasureCard0);
      TreasureCard treasureCard1 = (TreasureCard)hand0.getRandomAction();
      int int0 = hand0.getCardIndex(treasureCard1);
      assertEquals(1, hand0.getNumCards());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      // Undeclared exception!
      try { 
        hand0.removeSelectedCard((-2076));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2076
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hand hand0 = new Hand();
      // Undeclared exception!
      try { 
        hand0.removeCard((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hand.getScaledImage((Image) null, 83589031, 373);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hand.getScaledImage((Image) null, (-25), (-700));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-25) and height (-700) cannot be <= 0
         //
         assertThrownBy("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hand hand0 = new Hand();
      // Undeclared exception!
      try { 
        hand0.addCards((Card[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("", 0, "(I|;xPKs");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.drawAgain();
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
      assertEquals(5, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hand hand0 = new Hand();
      // Undeclared exception!
      try { 
        hand0.gethandLabel(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hand.getScaledImage((Image) null, 6467, 2125020300);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.getrightLabel();
      assertEquals(5, hand0.getNumCards());
      assertEquals(5, hand0.getLength());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.getleftLabel();
      assertEquals(0, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hand hand0 = new Hand();
      TreasureCard treasureCard0 = new TreasureCard("`W9+(:b:7", 5, "`W9+(:b:7", 5);
      hand0.addCard(treasureCard0);
      hand0.draw();
      assertEquals(5, hand0.getCoins());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.increaseHandSize();
      hand0.scroll(true);
      hand0.scroll(false);
      assertEquals(10, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.increaseHandSize();
      hand0.scroll(false);
      assertEquals(10, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.scroll(true);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.scroll(false);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hand hand0 = new Hand();
      KingdomCard kingdomCard0 = new KingdomCard("<KtCsSk7qU^X3iS3", 1, "<KtCsSk7qU^X3iS3", "<KtCsSk7qU^X3iS3");
      Card[] cardArray0 = new Card[6];
      cardArray0[2] = (Card) kingdomCard0;
      hand0.addCards(cardArray0);
      hand0.getRandomAction();
      assertEquals(6, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      boolean boolean0 = hand0.contains((Card) null);
      assertTrue(boolean0);
      assertEquals(5, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hand hand0 = new Hand();
      KingdomCard kingdomCard0 = new KingdomCard("", 0, "", "nJmf2'uG.B");
      boolean boolean0 = hand0.contains(kingdomCard0);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
      assertEquals(0, hand0.getNumCards());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      int int0 = hand0.getCardIndex((Card) null);
      assertEquals(5, hand0.getLength());
      assertEquals(5, hand0.getNumCards());
      assertEquals(0, int0);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hand hand0 = new Hand();
      TreasureCard treasureCard0 = new TreasureCard("`W5I(:b:7", 0, "`W5I(:b:7", 5);
      int int0 = hand0.getCardIndex(treasureCard0);
      assertEquals(0, hand0.getNumCards());
      assertEquals((-1), int0);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.removeCard(0);
      assertEquals(0, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      KingdomCard kingdomCard0 = new KingdomCard("^bNuN%)oL~4]Evw", (-709), "", "^bNuN%)oL~4]Evw");
      hand0.addCard(kingdomCard0);
      hand0.scroll(true);
      hand0.removeSelectedCard(0);
      assertEquals(5, hand0.getNumCards());
      assertEquals(10, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.removeSelectedCard(0);
      assertEquals(5, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.removeHandIndex((-1267));
      assertEquals(5, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.removeHandIndex(0);
      assertEquals(5, hand0.getLength());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.removeHandIndex(5);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(0, hand0.getNumCards());
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.getHandIndex((-1234));
      assertEquals(0, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.getHandIndex(0);
      assertEquals(5, hand0.getNumCards());
      assertEquals(5, hand0.getLength());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.getHandIndex(5);
      assertEquals(0, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      Hand.SelectListener hand_SelectListener0 = hand0.new SelectListener();
      hand_SelectListener0.actionPerformed((ActionEvent) null);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
      assertEquals(5, hand0.getNumCards());
      assertEquals(5, player0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hand hand0 = new Hand();
      int int0 = hand0.getCoins();
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, hand0.getNumCards());
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      // Undeclared exception!
      try { 
        hand0.changeImg(364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 364
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      hand0.getSelected(1);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
      assertEquals(5, hand0.getNumCards());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hand hand0 = new Hand();
      int int0 = hand0.getLength();
      assertEquals(0, hand0.getNumCards());
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hand hand0 = new Hand();
      hand0.setCoins(1769);
      int int0 = hand0.getCoins();
      assertEquals(1769, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hand hand0 = new Hand();
      double double0 = hand0.getImageScale();
      assertEquals(0.75, double0, 0.01);
      assertEquals(0, hand0.getNumCards());
      assertEquals(5, hand0.getLength());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      assertEquals(5, hand0.getNumCards());
      
      hand0.cleanup();
      int int0 = hand0.getNumCards();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      Hand hand0 = player0.getHand();
      int int0 = hand0.getNumCards();
      assertEquals(5, int0);
      assertEquals(0.75, hand0.getImageScale(), 0.01);
      assertEquals(5, hand0.getLength());
  }
}
