/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 22:46:32 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost ", 0, "'!W=V*{50%", "Cost ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      Random.setNextRandom(1098);
      player0.discardRandom();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card[] cardArray0 = new Card[3];
      TreasureCard treasureCard0 = new TreasureCard("Draw Piles: ", (-715), "Draw Piles: ", (-715));
      cardArray0[0] = (Card) treasureCard0;
      CurseCard curseCard0 = new CurseCard("Estate", (-715), "Draw Piles: ");
      cardArray0[1] = (Card) curseCard0;
      cardArray0[2] = (Card) treasureCard0;
      Player player0 = new Player(cardArray0);
      player0.removeHandCard(cardArray0[1]);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Value: ", 12, "Value: ");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.drawCard((-1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost: ", 0, "'!W=V*{50%", "Cost: ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.removeBuyCount();
      player0.addBuyCount(3672);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Value: ", 12, "Value: ");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.addBuyCount(12);
      player0.addBuyCount();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card[] cardArray0 = new Card[2];
      CurseCard curseCard0 = new CurseCard("", 0, "");
      cardArray0[0] = (Card) curseCard0;
      cardArray0[1] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.addBuyCount();
      player0.removeBuyCount();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.removeActionCount();
      player0.addActionCount(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Card 4", 1738, "Card 4");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.addActionCount((-1));
      player0.addActionCount();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Value: ", 12, "Value: ");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.addActionCount();
      player0.removeActionCount();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card[] cardArray0 = new Card[3];
      Player player0 = null;
      try {
        player0 = new Player(cardArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost ", 0, "'!W=V*{50%", "Cost ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.removeHandCard(cardArray0[0]);
      player0.hasCard(cardArray0[0]);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card[] cardArray0 = new Card[2];
      VictoryCard victoryCard0 = new VictoryCard("", (-359), "", 9);
      cardArray0[0] = (Card) victoryCard0;
      TreasureCard treasureCard0 = new TreasureCard("", (-359), "", 9);
      cardArray0[1] = (Card) treasureCard0;
      Player player0 = new Player(cardArray0);
      player0.getHand();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card[] cardArray0 = new Card[3];
      TreasureCard treasureCard0 = new TreasureCard("Draw Piles: ", (-715), "Draw Piles: ", (-715));
      cardArray0[0] = (Card) treasureCard0;
      CurseCard curseCard0 = new CurseCard("Estate", (-715), "Draw Piles: ");
      cardArray0[1] = (Card) curseCard0;
      cardArray0[2] = (Card) treasureCard0;
      Player player0 = new Player(cardArray0);
      player0.getHand();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Card 4", 1738, "Card 4");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.setCoins(17);
      player0.getCoins();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost: ", (-22), "Cost: ", "Cost: ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.removeBuyCount();
      player0.getBuyCount();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Card 4", 1738, "Card 4");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.addActionCount((-861));
      player0.getActionCount();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card[] cardArray0 = new Card[3];
      KingdomCard kingdomCard0 = new KingdomCard("9", 24, "9", "9");
      cardArray0[0] = (Card) kingdomCard0;
      cardArray0[1] = (Card) kingdomCard0;
      CurseCard curseCard0 = new CurseCard("East", (-866), "|T:_P_h47^ZM");
      cardArray0[2] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      // Undeclared exception!
      try { 
        player0.discard((Card[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.selectCard((-810));
      // Undeclared exception!
      try { 
        player0.discard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -810
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.draw();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("", (-207), "", "g'r*5-.nkK|(");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.discard(cardArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      TreasureCard treasureCard0 = new TreasureCard("\n Estate: ", (-910), "\n Estate: ", 0);
      cardArray0[0] = (Card) treasureCard0;
      Player player0 = new Player(cardArray0);
      player0.discard(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.discard((Card) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      // Undeclared exception!
      try { 
        player0.drawCard(1843);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost: ", 0, "Cost: ", "Cost: ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.removeHandCard(cardArray0[0]);
      player0.swapDeck();
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.addListeners();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player.sop("8v:+){`eHmhU");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.discard((-3519));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("", 60, "");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.discard();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost ", 0, "'!W=V*{50%", "Cost ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.removeHandCard(cardArray0[0]);
      player0.discard();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Card 4", 1738, "Card 4");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      VictoryCard victoryCard0 = new VictoryCard("Card 3", 1738, "0gmrwF]@zA34=%", (-1));
      player0.discard((Card) victoryCard0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost ", 0, "'!W=V*{50%", "Cost ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.getHand();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.getCoins();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.getSelected();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost ", 0, "'!W=V*{50%", "Cost ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.hasCard(cardArray0[0]);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.getNumCards();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost: ", (-22), "Cost: ", "Cost: ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      // Undeclared exception!
      try { 
        player0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      VictoryCard victoryCard0 = new VictoryCard("", (-4233), "", (-4233));
      cardArray0[0] = (Card) victoryCard0;
      Player player0 = new Player(cardArray0);
      player0.trash(victoryCard0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.removeActionCount();
      player0.getActionCount();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.cleanup();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.selectHandIndex(3433);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Value: ", 12, "Value: ");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.discardRandom();
      player0.removeHandCard(cardArray0[0]);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      KingdomCard kingdomCard0 = new KingdomCard("Cost: ", 0, "Cost: ", "Cost: ");
      cardArray0[0] = (Card) kingdomCard0;
      Player player0 = new Player(cardArray0);
      player0.getActionCount();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.selectCard(2489);
      // Undeclared exception!
      try { 
        player0.getSelected();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2489
         //
         assertThrownBy("Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      player0.addCard((Card) null);
      assertEquals(5, player0.getNumCards());
      assertEquals(1, player0.getActionCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Card[] cardArray0 = new Card[1];
      CurseCard curseCard0 = new CurseCard("Card 4", 1738, "Card 4");
      cardArray0[0] = (Card) curseCard0;
      Player player0 = new Player(cardArray0);
      player0.setCoins((-1));
      int int0 = player0.getCoins();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Card[] cardArray0 = new Card[0];
      Player player0 = new Player(cardArray0);
      int int0 = player0.getBuyCount();
      assertEquals(1, int0);
      assertEquals(5, player0.getNumCards());
  }
}
