
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    Card card0 = Card.copper;
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.copper + "'", card0.equals(Card.copper));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    Card card0 = Card.village;
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.village + "'", card0.equals(Card.village));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    DominionBoard dominionBoard2 = null;
    // The following exception was thrown during execution in test generation
    try {
    Player player3 = new Player("hi!", 100, dominionBoard2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    DominionBoard dominionBoard2 = null;
    // The following exception was thrown during execution in test generation
    try {
    Player player3 = new Player("hi!", (int)(short)-1, dominionBoard2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    Card card0 = Card.curse;
    int i1 = card0.getVictory();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.curse + "'", card0.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == (-1));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    java.util.List<java.lang.Integer> list_i6 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i6);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard7 = null;
    // The following exception was thrown during execution in test generation
    try {
    Card card8 = player5.buyRandomCard(dominionBoard7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    Card card0 = Card.curse;
    card0.addEmbargoToCard();
    int i2 = card0.getEmbargo();
    java.util.List<java.lang.String> list_str3 = card0.getTypes();
    card0.setVictory(15);
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.curse + "'", card0.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str3);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    java.util.List<java.lang.String> list_str36 = card33.getTypes();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str36);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    int i14 = player5.getTotalVictoryPoints();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(100, dominionBoard18);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    Card card15 = Card.smithy;
    int i16 = card15.getCost();
    dominionBoard11.trashCard(card15);
    boolean b18 = dominionBoard2.availableCards(card15);
    int i19 = card15.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.smithy + "'", card15.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player41 = new Player("hi!", (int)' ', dominionBoard40);
    boolean b42 = player41.actionsLeft();
    Card card43 = Card.mine;
    int i44 = card43.getCoins();
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card48 = Card.adventurer;
    int i49 = card48.getCost();
    boolean b50 = dominionBoard47.availableCards(card48);
    player41.buyCard(card43, dominionBoard47);
    java.util.LinkedList<Card> linkedlist_card52 = player41.getDeck();
    player41.addActions((int)(byte)-1);
    Card card55 = Card.cutpurse;
    int i56 = card55.getEmbargo();
    boolean b57 = player41.hasCard(card55);
    boolean b58 = dominionBoard26.availableCards(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.mine + "'", card43.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.adventurer + "'", card48.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card52);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.cutpurse + "'", card55.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    boolean b7 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i13 = dominionBoard12.play();
    Card card14 = Card.great_hall;
    card14.addEmbargoToCard();
    card14.addEmbargoToCard();
    dominionBoard12.takeCard(card14);
    dominionBoard12.finalScores();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    player25.treasureInHand();
    Card card27 = Card.duchy;
    boolean b28 = player25.hasCard(card27);
    dominionBoard12.ambassadorHelper((int)(byte)10, card27);
    boolean b30 = dominionBoard2.availableCards(card27);
    java.util.List<java.lang.String> list_str31 = card27.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.great_hall + "'", card14.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.duchy + "'", card27.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str31);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    player5.addActions((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player21 = new Player("hi!", (int)' ', dominionBoard20);
    boolean b22 = player21.actionsLeft();
    Card card23 = Card.mine;
    int i24 = card23.getCoins();
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card28 = Card.adventurer;
    int i29 = card28.getCost();
    boolean b30 = dominionBoard27.availableCards(card28);
    player21.buyCard(card23, dominionBoard27);
    dominionBoard27.councilRoomHelper(100);
    // The following exception was thrown during execution in test generation
    try {
    Card card34 = player5.buyRandomCard(dominionBoard27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.mine + "'", card23.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.adventurer + "'", card28.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    player5.discardCardsEndTurn();
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player32 = dominionBoard31.getPlayers();
    Card card33 = player5.buyRandomCard(dominionBoard31);
    java.util.List<Card> list_card34 = player5.getDiscard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    Card card22 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominionBoard11.ambassadorHelper(18, card22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    java.util.List<Card> list_card25 = player5.getHand();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    Card card0 = Card.province;
    card0.addEmbargoToCard();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.province + "'", card0.equals(Card.province));

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    int i47 = card40.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i13 = dominionBoard12.play();
    Card card14 = Card.great_hall;
    card14.addEmbargoToCard();
    card14.addEmbargoToCard();
    dominionBoard12.takeCard(card14);
    dominionBoard12.finalScores();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    player25.treasureInHand();
    Card card27 = Card.duchy;
    boolean b28 = player25.hasCard(card27);
    dominionBoard12.ambassadorHelper((int)(byte)10, card27);
    boolean b30 = dominionBoard2.availableCards(card27);
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player36 = new Player("hi!", (int)' ', dominionBoard35);
    boolean b37 = player36.actionsLeft();
    int i38 = player36.getCoins();
    java.util.List<java.lang.Integer> list_i39 = player36.actionCardIndices();
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card56 = dominionBoard51.allKC();
    Card card57 = player36.buyRandomCard(dominionBoard51);
    player36.treasureInHand();
    player36.discardCardsEndTurn();
    java.util.List<Card> list_card60 = player36.getHand();
    dominionBoard2.setUpGame(list_card60, (int)'#');
    java.util.List<Card> list_card63 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.great_hall + "'", card14.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.duchy + "'", card27.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.copper + "'", card57.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    card28.addEmbargoToCard();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    card26.setVictory((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    int i14 = player5.getCoins();
    player5.discardCardsEndTurn();
    java.util.List<Card> list_card16 = player5.getCardsPlayed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    dominionBoard2.trashCard(card6);
    int i9 = card6.getCost();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<Card> list_card32 = player5.getHand();
    Card card33 = null;
    DominionBoard dominionBoard38 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player39 = new Player("hi!", (int)' ', dominionBoard38);
    boolean b40 = player39.actionsLeft();
    int i41 = player39.getCoins();
    java.util.List<java.lang.Integer> list_i42 = player39.actionCardIndices();
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player48 = new Player("hi!", (int)' ', dominionBoard47);
    boolean b49 = player48.actionsLeft();
    Card card50 = Card.mine;
    int i51 = card50.getCoins();
    DominionBoard dominionBoard54 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card55 = Card.adventurer;
    int i56 = card55.getCost();
    boolean b57 = dominionBoard54.availableCards(card55);
    player48.buyCard(card50, dominionBoard54);
    java.util.List<Card> list_card59 = dominionBoard54.allKC();
    Card card60 = player39.buyRandomCard(dominionBoard54);
    dominionBoard54.councilRoomHelper(3);
    int i63 = dominionBoard54.play();
    // The following exception was thrown during execution in test generation
    try {
    player5.buyCard(card33, dominionBoard54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.mine + "'", card50.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.adventurer + "'", card55.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.copper + "'", card60.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    Card card25 = null;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player31 = new Player("hi!", (int)' ', dominionBoard30);
    boolean b32 = player31.actionsLeft();
    Card card33 = Card.curse;
    DominionBoard dominionBoard36 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card38 = dominionBoard36.getHighestValueCards(2);
    player31.gainCard(card33, dominionBoard36);
    boolean b40 = player31.currentBuys();
    DominionBoard dominionBoard45 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player46 = new Player("hi!", (int)' ', dominionBoard45);
    boolean b47 = player46.actionsLeft();
    Card card48 = Card.mine;
    int i49 = card48.getCoins();
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card53 = Card.adventurer;
    int i54 = card53.getCost();
    boolean b55 = dominionBoard52.availableCards(card53);
    player46.buyCard(card48, dominionBoard52);
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player60 = dominionBoard59.getPlayers();
    Card card62 = Card.great_hall;
    java.util.List<java.lang.String> list_str63 = card62.getTypes();
    dominionBoard59.ambassadorHelper((-1), card62);
    dominionBoard52.returnCard(card62);
    DominionBoard dominionBoard70 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player71 = new Player("hi!", (int)' ', dominionBoard70);
    boolean b72 = player71.actionsLeft();
    Card card73 = Card.mine;
    int i74 = card73.getCoins();
    DominionBoard dominionBoard77 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card78 = Card.adventurer;
    int i79 = card78.getCost();
    boolean b80 = dominionBoard77.availableCards(card78);
    player71.buyCard(card73, dominionBoard77);
    java.util.List<Card> list_card83 = dominionBoard77.kingdomCards(1);
    java.util.List<Player> list_player84 = dominionBoard77.players;
    player31.gainCardToTopOfDeck(card62, dominionBoard77);
    // The following exception was thrown during execution in test generation
    try {
    player5.gainCard(card25, dominionBoard77);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.curse + "'", card33.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.mine + "'", card48.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.adventurer + "'", card53.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player60);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.great_hall + "'", card62.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.mine + "'", card73.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    org.junit.Assert.assertTrue("'" + card78 + "' != '" + Card.adventurer + "'", card78.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player84);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.baron;
    Card card39 = Card.estate;
    Card card40 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    Card card66 = Card.cutpurse;
    Card card67 = Card.gardens;
    Card card68 = Card.silver;
    Card card69 = Card.curse;
    java.util.List<Card> list_card70 = dominionBoard37.kingdomCards(card38, card39, card40, card44, card47, card63, card66, card67, card68, card69);
    boolean b71 = player33.hasCard(card67);
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player75 = dominionBoard74.getPlayers();
    dominionBoard74.councilRoomHelper((int)'a');
    player5.gainCardToTopOfDeck(card67, dominionBoard74);
    dominionBoard74.cutpurseHelper((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.estate + "'", card39.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.baron + "'", card40.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.gardens + "'", card67.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.silver + "'", card68.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.curse + "'", card69.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    int i16 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    Card card0 = Card.council_room;
    int i1 = card0.getCoins();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.council_room + "'", card0.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    boolean b27 = player5.actionsLeft();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player34 = new Player("hi!", (int)' ', dominionBoard33);
    Card card35 = Card.smithy;
    int i36 = card35.getCost();
    DominionBoard dominionBoard41 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player42 = new Player("hi!", (int)' ', dominionBoard41);
    boolean b43 = player42.actionsLeft();
    Card card44 = Card.mine;
    int i45 = card44.getCoins();
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card49 = Card.adventurer;
    int i50 = card49.getCost();
    boolean b51 = dominionBoard48.availableCards(card49);
    player42.buyCard(card44, dominionBoard48);
    player34.gainCardToHand(card35, dominionBoard48);
    java.util.List<Card> list_card55 = dominionBoard48.kingdomCards(15);
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(1, dominionBoard48);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.smithy + "'", card35.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.mine + "'", card44.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.adventurer + "'", card49.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    Card card0 = Card.curse;
    card0.addEmbargoToCard();
    int i2 = card0.getEmbargo();
    int i3 = card0.getCoins();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.curse + "'", card0.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player41 = new Player("hi!", (int)' ', dominionBoard40);
    boolean b42 = player41.actionsLeft();
    Card card43 = Card.curse;
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card48 = dominionBoard46.getHighestValueCards(2);
    player41.gainCard(card43, dominionBoard46);
    java.util.List<Player> list_player50 = dominionBoard46.players;
    dominionBoard2.players = list_player50;
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.curse + "'", card43.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player50);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    Card card0 = Card.seahag;
    int i1 = card0.getCoins();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.seahag + "'", card0.equals(Card.seahag));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.treasureInHand();
    boolean b37 = player5.actionsLeft();
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player44 = new Player("hi!", (int)' ', dominionBoard43);
    boolean b45 = player44.actionsLeft();
    Card card46 = Card.mine;
    int i47 = card46.getCoins();
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card51 = Card.adventurer;
    int i52 = card51.getCost();
    boolean b53 = dominionBoard50.availableCards(card51);
    player44.buyCard(card46, dominionBoard50);
    java.util.LinkedList<Card> linkedlist_card55 = player44.getDeck();
    player44.addActions((int)(byte)-1);
    Card card58 = Card.cutpurse;
    int i59 = card58.getEmbargo();
    boolean b60 = player44.hasCard(card58);
    player44.treasureInHand();
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card65 = Card.adventurer;
    int i66 = card65.getCost();
    boolean b67 = dominionBoard64.availableCards(card65);
    Card card68 = Card.smithy;
    int i69 = card68.getCost();
    dominionBoard64.trashCard(card68);
    DominionBoard dominionBoard73 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i74 = dominionBoard73.play();
    java.util.List<Player> list_player75 = dominionBoard73.getPlayers();
    dominionBoard73.finalScores();
    java.util.List<Card> list_card78 = dominionBoard73.getHighestValueCards((int)'a');
    dominionBoard73.seaHagHelper((int)(short)0);
    dominionBoard73.seaHagHelper(0);
    player44.gainCard(card68, dominionBoard73);
    dominionBoard73.finalScores();
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard((int)(short)0, dominionBoard73);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.mine + "'", card46.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.adventurer + "'", card51.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card55);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.cutpurse + "'", card58.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.adventurer + "'", card65.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.smithy + "'", card68.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<Card> list_card32 = player5.getHand();
    int i33 = player5.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    java.util.List<Player> list_player18 = dominionBoard11.players;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player24 = new Player("hi!", (int)' ', dominionBoard23);
    Card card25 = Card.cutpurse;
    card25.setVictory((-1));
    player24.discard(card25);
    boolean b29 = dominionBoard11.availableCards(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.cutpurse + "'", card25.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player34 = new Player("hi!", (int)' ', dominionBoard33);
    boolean b35 = player34.actionsLeft();
    java.lang.String str36 = player34.getName();
    DominionBoard dominionBoard41 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player42 = new Player("hi!", (int)' ', dominionBoard41);
    boolean b43 = player42.actionsLeft();
    Card card44 = Card.mine;
    int i45 = card44.getCoins();
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card49 = Card.adventurer;
    int i50 = card49.getCost();
    boolean b51 = dominionBoard48.availableCards(card49);
    player42.buyCard(card44, dominionBoard48);
    DominionBoard dominionBoard55 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card56 = Card.adventurer;
    int i57 = card56.getCost();
    boolean b58 = dominionBoard55.availableCards(card56);
    Card card59 = Card.smithy;
    int i60 = card59.getCost();
    dominionBoard55.trashCard(card59);
    dominionBoard55.cutpurseHelper((int)(byte)10);
    player34.gainCardToTopOfDeck(card44, dominionBoard55);
    Card card65 = Card.council_room;
    card65.setVictory((int)(byte)100);
    player34.discard(card65);
    Card card69 = Card.feast;
    java.util.List<java.lang.String> list_str70 = card69.getTypes();
    DominionBoard dominionBoard73 = new DominionBoard((-1), (int)(short)0);
    boolean b74 = dominionBoard73.gameOver();
    player34.gainCardToTopOfDeck(card69, dominionBoard73);
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(2, dominionBoard73);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!"+ "'", str36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.mine + "'", card44.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.adventurer + "'", card49.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.adventurer + "'", card56.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.smithy + "'", card59.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 4);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.council_room + "'", card65.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.feast + "'", card69.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    java.lang.String str9 = player7.getName();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    boolean b16 = player15.actionsLeft();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card22 = Card.adventurer;
    int i23 = card22.getCost();
    boolean b24 = dominionBoard21.availableCards(card22);
    player15.buyCard(card17, dominionBoard21);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card29 = Card.adventurer;
    int i30 = card29.getCost();
    boolean b31 = dominionBoard28.availableCards(card29);
    Card card32 = Card.smithy;
    int i33 = card32.getCost();
    dominionBoard28.trashCard(card32);
    dominionBoard28.cutpurseHelper((int)(byte)10);
    player7.gainCardToTopOfDeck(card17, dominionBoard28);
    Card card38 = Card.council_room;
    card38.setVictory((int)(byte)100);
    player7.discard(card38);
    Card card42 = Card.feast;
    java.util.List<java.lang.String> list_str43 = card42.getTypes();
    DominionBoard dominionBoard46 = new DominionBoard((-1), (int)(short)0);
    boolean b47 = dominionBoard46.gameOver();
    player7.gainCardToTopOfDeck(card42, dominionBoard46);
    Player player49 = new Player("", 0, dominionBoard46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!"+ "'", str9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.adventurer + "'", card22.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.adventurer + "'", card29.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.smithy + "'", card32.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.council_room + "'", card38.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.feast + "'", card42.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player34 = dominionBoard33.getPlayers();
    Card card36 = Card.great_hall;
    java.util.List<java.lang.String> list_str37 = card36.getTypes();
    dominionBoard33.ambassadorHelper((-1), card36);
    dominionBoard26.returnCard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card57 = dominionBoard51.kingdomCards(1);
    java.util.List<Player> list_player58 = dominionBoard51.players;
    player5.gainCardToTopOfDeck(card36, dominionBoard51);
    int i60 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    int i6 = player5.getBuys();
    int i7 = player5.getCoins();
    boolean b8 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    Card card15 = Card.curse;
    card15.addEmbargoToCard();
    dominionBoard10.takeCard(card15);
    int i18 = dominionBoard10.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.curse + "'", card15.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    boolean b48 = player5.actionsLeft();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    java.util.List<Card> list_card15 = player5.getCardsPlayed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player34 = dominionBoard33.getPlayers();
    Card card36 = Card.great_hall;
    java.util.List<java.lang.String> list_str37 = card36.getTypes();
    dominionBoard33.ambassadorHelper((-1), card36);
    dominionBoard26.returnCard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card57 = dominionBoard51.kingdomCards(1);
    java.util.List<Player> list_player58 = dominionBoard51.players;
    player5.gainCardToTopOfDeck(card36, dominionBoard51);
    int i60 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    int i23 = player5.getPlayerNumber();
    player5.treasureInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 32);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    DominionBoard dominionBoard5 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i6 = dominionBoard5.play();
    Card card7 = Card.great_hall;
    card7.addEmbargoToCard();
    card7.addEmbargoToCard();
    dominionBoard5.takeCard(card7);
    dominionBoard5.finalScores();
    boolean b12 = dominionBoard5.gameOver();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i16 = dominionBoard15.play();
    Card card17 = Card.great_hall;
    card17.addEmbargoToCard();
    card17.addEmbargoToCard();
    dominionBoard15.takeCard(card17);
    dominionBoard15.finalScores();
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    player28.treasureInHand();
    Card card30 = Card.duchy;
    boolean b31 = player28.hasCard(card30);
    dominionBoard15.ambassadorHelper((int)(byte)10, card30);
    boolean b33 = dominionBoard5.availableCards(card30);
    java.util.List<Player> list_player34 = dominionBoard5.players;
    dominionBoard2.players = list_player34;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.great_hall + "'", card7.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.great_hall + "'", card17.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.duchy + "'", card30.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    DominionBoard dominionBoard17 = null;
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(248, dominionBoard17);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player16 = new Player("hi!", (int)' ', dominionBoard15);
    boolean b17 = player16.actionsLeft();
    Card card18 = Card.curse;
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card23 = dominionBoard21.getHighestValueCards(2);
    player16.gainCard(card18, dominionBoard21);
    dominionBoard2.ambassadorHelper((int)(byte)0, card18);
    java.util.List<Player> list_player26 = dominionBoard2.getPlayers();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.curse + "'", card18.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    Card card0 = Card.cutpurse;
    int i1 = card0.getVictory();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.cutpurse + "'", card0.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == (-1));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.util.List<Card> list_card56 = dominionBoard47.kingdomCards(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    player5.treasureInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    player5.discardCardsEndTurn();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card40 = Card.adventurer;
    int i41 = card40.getCost();
    boolean b42 = dominionBoard39.availableCards(card40);
    Card card43 = Card.smithy;
    int i44 = card43.getCost();
    dominionBoard39.trashCard(card43);
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player51 = new Player("hi!", (int)' ', dominionBoard50);
    boolean b52 = player51.actionsLeft();
    Card card53 = Card.curse;
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card58 = dominionBoard56.getHighestValueCards(2);
    player51.gainCard(card53, dominionBoard56);
    java.util.List<Player> list_player60 = dominionBoard56.players;
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player66 = new Player("hi!", (int)' ', dominionBoard65);
    boolean b67 = player66.actionsLeft();
    Card card68 = Card.mine;
    int i69 = card68.getCoins();
    DominionBoard dominionBoard72 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card73 = Card.adventurer;
    int i74 = card73.getCost();
    boolean b75 = dominionBoard72.availableCards(card73);
    player66.buyCard(card68, dominionBoard72);
    java.util.LinkedList<Card> linkedlist_card77 = player66.getDeck();
    player66.addActions((int)(byte)-1);
    Card card80 = Card.cutpurse;
    int i81 = card80.getEmbargo();
    boolean b82 = player66.hasCard(card80);
    card80.addEmbargoToCard();
    dominionBoard56.returnCard(card80);
    player5.gainCard(card43, dominionBoard56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.adventurer + "'", card40.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.smithy + "'", card43.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.curse + "'", card53.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.mine + "'", card68.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.adventurer + "'", card73.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card77);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.cutpurse + "'", card80.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Player> list_player5 = dominionBoard2.players;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    int i13 = player11.getCoins();
    java.util.List<java.lang.Integer> list_i14 = player11.actionCardIndices();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    java.util.List<Card> list_card31 = dominionBoard26.allKC();
    Card card32 = player11.buyRandomCard(dominionBoard26);
    player11.treasureInHand();
    player11.discardCardsEndTurn();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player38 = dominionBoard37.getPlayers();
    Card card39 = player11.buyRandomCard(dominionBoard37);
    dominionBoard2.takeCard(card39);
    int i41 = dominionBoard2.play();
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player48 = new Player("hi!", (int)' ', dominionBoard47);
    boolean b49 = player48.actionsLeft();
    int i50 = player48.getCoins();
    java.util.List<java.lang.Integer> list_i51 = player48.actionCardIndices();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player57 = new Player("hi!", (int)' ', dominionBoard56);
    boolean b58 = player57.actionsLeft();
    Card card59 = Card.mine;
    int i60 = card59.getCoins();
    DominionBoard dominionBoard63 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card64 = Card.adventurer;
    int i65 = card64.getCost();
    boolean b66 = dominionBoard63.availableCards(card64);
    player57.buyCard(card59, dominionBoard63);
    java.util.List<Card> list_card68 = dominionBoard63.allKC();
    Card card69 = player48.buyRandomCard(dominionBoard63);
    java.util.List<java.lang.Integer> list_i70 = player48.actionCardIndices();
    Card card71 = Card.cutpurse;
    card71.setVictory((-1));
    boolean b74 = player48.hasCard(card71);
    dominionBoard2.ambassadorHelper((int)(byte)0, card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.mine + "'", card59.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.adventurer + "'", card64.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.copper + "'", card69.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i70);
    org.junit.Assert.assertTrue("'" + card71 + "' != '" + Card.cutpurse + "'", card71.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    boolean b36 = dominionBoard2.gameOver();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    player5.discardCardsEndTurn();
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player32 = dominionBoard31.getPlayers();
    Card card33 = player5.buyRandomCard(dominionBoard31);
    int i34 = dominionBoard31.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    DominionBoard dominionBoard2 = new DominionBoard(2, 10);
    java.util.List<Card> list_card4 = dominionBoard2.kingdomCards((int)'4');
    dominionBoard2.cutpurseHelper(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    int i32 = player5.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    Card card0 = Card.adventurer;
    int i1 = card0.getCost();
    int i2 = card0.getCost();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.adventurer + "'", card0.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    DominionBoard dominionBoard2 = new DominionBoard(2, 10);
    dominionBoard2.finalScores();

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    player5.discardCardsEndTurn();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player34 = new Player("hi!", (int)' ', dominionBoard33);
    boolean b35 = player34.actionsLeft();
    Card card36 = Card.curse;
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card41 = dominionBoard39.getHighestValueCards(2);
    player34.gainCard(card36, dominionBoard39);
    java.util.List<Player> list_player43 = dominionBoard39.players;
    Card card44 = Card.curse;
    card44.addEmbargoToCard();
    dominionBoard39.takeCard(card44);
    int i47 = card44.getCost();
    DominionBoard dominionBoard48 = null;
    // The following exception was thrown during execution in test generation
    try {
    player5.gainCardToHand(card44, dominionBoard48);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.curse + "'", card44.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    Card card0 = Card.mine;
    int i1 = card0.getCoins();
    int i2 = card0.getCost();
    int i3 = card0.getCost();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.mine + "'", card0.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<java.lang.String> list_str45 = card29.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str45);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Player> list_player5 = dominionBoard2.players;
    java.util.List<Card> list_card6 = dominionBoard2.getNonEmptySupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    DominionBoard dominionBoard20 = null;
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(263, dominionBoard20);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    java.util.List<Card> list_card26 = dominionBoard19.kingdomCards(15);
    java.util.List<Card> list_card28 = dominionBoard19.kingdomCards((int)(short)-1);
    Card card29 = Card.great_hall;
    card29.addEmbargoToCard();
    card29.addEmbargoToCard();
    dominionBoard19.trashCard(card29);
    java.util.List<Card> list_card34 = dominionBoard19.kingdomCards((int)(short)100);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.great_hall + "'", card29.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionInHand();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card26 = dominionBoard20.kingdomCards(1);
    Card card27 = Card.mine;
    java.util.List<java.lang.String> list_str28 = card27.getTypes();
    boolean b29 = dominionBoard20.availableCards(card27);
    java.util.List<Player> list_player30 = dominionBoard20.players;
    Card card31 = Card.silver;
    dominionBoard20.takeCard(card31);
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard((-2), dominionBoard20);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.mine + "'", card27.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.silver + "'", card31.equals(Card.silver));

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.councilRoomHelper((int)(short)0);
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i13 = dominionBoard12.play();
    Card card14 = Card.great_hall;
    card14.addEmbargoToCard();
    card14.addEmbargoToCard();
    dominionBoard12.takeCard(card14);
    dominionBoard12.finalScores();
    boolean b19 = dominionBoard12.gameOver();
    boolean b20 = dominionBoard12.gameOver();
    java.util.List<Player> list_player21 = dominionBoard12.getPlayers();
    dominionBoard2.players = list_player21;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.great_hall + "'", card14.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    Card card36 = Card.gardens;
    int i37 = card36.getCoins();
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i41 = dominionBoard40.play();
    Card card42 = Card.great_hall;
    card42.addEmbargoToCard();
    card42.addEmbargoToCard();
    dominionBoard40.takeCard(card42);
    dominionBoard40.finalScores();
    player5.gainCardToTopOfDeck(card36, dominionBoard40);
    java.util.List<Card> list_card48 = player5.getHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.great_hall + "'", card42.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    player5.addActions(2);
    Card card38 = player5.drawCardFromDeck();
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.LinkedList<Card> linkedlist_card56 = player45.getDeck();
    DominionBoard dominionBoard61 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player62 = new Player("hi!", (int)' ', dominionBoard61);
    boolean b63 = player62.actionsLeft();
    Card card64 = Card.curse;
    DominionBoard dominionBoard67 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card69 = dominionBoard67.getHighestValueCards(2);
    player62.gainCard(card64, dominionBoard67);
    java.util.List<Player> list_player71 = dominionBoard67.players;
    Card card72 = Card.curse;
    card72.addEmbargoToCard();
    dominionBoard67.takeCard(card72);
    boolean b75 = player45.hasCard(card72);
    Card card76 = Card.gardens;
    int i77 = card76.getCoins();
    DominionBoard dominionBoard80 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i81 = dominionBoard80.play();
    Card card82 = Card.great_hall;
    card82.addEmbargoToCard();
    card82.addEmbargoToCard();
    dominionBoard80.takeCard(card82);
    dominionBoard80.finalScores();
    player45.gainCardToTopOfDeck(card76, dominionBoard80);
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard((int)' ', dominionBoard80);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.mine + "'", card38.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.curse + "'", card64.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player71);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.curse + "'", card72.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.gardens + "'", card76.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.great_hall + "'", card82.equals(Card.great_hall));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player60 = new Player("hi!", (int)' ', dominionBoard59);
    boolean b61 = player60.actionsLeft();
    int i62 = player60.getCoins();
    java.util.List<java.lang.Integer> list_i63 = player60.actionCardIndices();
    DominionBoard dominionBoard68 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player69 = new Player("hi!", (int)' ', dominionBoard68);
    boolean b70 = player69.actionsLeft();
    Card card71 = Card.mine;
    int i72 = card71.getCoins();
    DominionBoard dominionBoard75 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card76 = Card.adventurer;
    int i77 = card76.getCost();
    boolean b78 = dominionBoard75.availableCards(card76);
    player69.buyCard(card71, dominionBoard75);
    java.util.List<Card> list_card80 = dominionBoard75.allKC();
    Card card81 = player60.buyRandomCard(dominionBoard75);
    java.util.List<java.lang.Integer> list_i82 = player60.actionCardIndices();
    Card card83 = Card.cutpurse;
    card83.setVictory((-1));
    boolean b86 = player60.hasCard(card83);
    DominionBoard dominionBoard89 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i90 = dominionBoard89.play();
    Card card91 = Card.great_hall;
    card91.addEmbargoToCard();
    card91.addEmbargoToCard();
    dominionBoard89.takeCard(card91);
    dominionBoard89.finalScores();
    boolean b96 = dominionBoard89.gameOver();
    boolean b97 = dominionBoard89.gameOver();
    java.util.List<Player> list_player98 = dominionBoard89.getPlayers();
    player5.gainCardToHand(card83, dominionBoard89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + card71 + "' != '" + Card.mine + "'", card71.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.adventurer + "'", card76.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    org.junit.Assert.assertTrue("'" + card81 + "' != '" + Card.copper + "'", card81.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i82);
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.cutpurse + "'", card83.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    org.junit.Assert.assertTrue("'" + card91 + "' != '" + Card.great_hall + "'", card91.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player98);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i22 = dominionBoard21.play();
    Card card23 = Card.great_hall;
    card23.addEmbargoToCard();
    card23.addEmbargoToCard();
    dominionBoard21.takeCard(card23);
    dominionBoard21.councilRoomHelper((int)(short)0);
    player5.buyCard(card17, dominionBoard21);
    dominionBoard21.seaHagHelper((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    dominionBoard2.trashCard(card6);
    dominionBoard2.cutpurseHelper((int)(byte)10);
    dominionBoard2.councilRoomHelper((-1));
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.cutpurse;
    card6.setVictory((-1));
    player5.discard(card6);
    int i10 = card6.getEmbargo();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.cutpurse + "'", card6.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    int i8 = card4.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getHand();
    int i45 = player5.getPlayerNumber();
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card49 = Card.adventurer;
    int i50 = card49.getCost();
    boolean b51 = dominionBoard48.availableCards(card49);
    Card card52 = Card.smithy;
    int i53 = card52.getCost();
    dominionBoard48.trashCard(card52);
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player60 = new Player("hi!", (int)' ', dominionBoard59);
    boolean b61 = player60.actionsLeft();
    Card card62 = Card.curse;
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card67 = dominionBoard65.getHighestValueCards(2);
    player60.gainCard(card62, dominionBoard65);
    boolean b69 = dominionBoard48.availableCards(card62);
    Card card70 = player5.buyRandomCard(dominionBoard48);
    int i71 = card70.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 32);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.adventurer + "'", card49.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.smithy + "'", card52.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.curse + "'", card62.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.copper + "'", card70.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    java.util.LinkedList<Card> linkedlist_card28 = player5.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card28);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getDiscard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.treasureInHand();
    Card card37 = Card.adventurer;
    java.util.List<java.lang.String> list_str38 = card37.getTypes();
    int i39 = card37.getCoins();
    boolean b40 = player5.hasCard(card37);
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i44 = dominionBoard43.play();
    Card card45 = Card.great_hall;
    card45.addEmbargoToCard();
    card45.addEmbargoToCard();
    dominionBoard43.takeCard(card45);
    dominionBoard43.finalScores();
    java.util.List<Player> list_player50 = dominionBoard43.players;
    // The following exception was thrown during execution in test generation
    try {
    Card card51 = player5.buyRandomCard(dominionBoard43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.great_hall + "'", card45.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player50);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    player5.treasureInHand();
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card53 = Card.adventurer;
    int i54 = card53.getCost();
    boolean b55 = dominionBoard52.availableCards(card53);
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard((int)' ', dominionBoard52);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.adventurer + "'", card53.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Player> list_player5 = dominionBoard2.players;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    int i13 = player11.getCoins();
    java.util.List<java.lang.Integer> list_i14 = player11.actionCardIndices();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    java.util.List<Card> list_card31 = dominionBoard26.allKC();
    Card card32 = player11.buyRandomCard(dominionBoard26);
    player11.treasureInHand();
    player11.discardCardsEndTurn();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player38 = dominionBoard37.getPlayers();
    Card card39 = player11.buyRandomCard(dominionBoard37);
    dominionBoard2.takeCard(card39);
    int i41 = card39.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 50);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    java.util.List<Card> list_card25 = dominionBoard19.allKC();
    Card card26 = Card.smithy;
    int i27 = card26.getCost();
    dominionBoard19.trashCard(card26);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.smithy + "'", card26.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    Card card15 = Card.curse;
    card15.addEmbargoToCard();
    dominionBoard10.takeCard(card15);
    card15.setVictory((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.curse + "'", card15.equals(Card.curse));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    int i47 = card40.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    card7.setVictory((int)(short)100);
    int i18 = card7.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    Card card36 = Card.gardens;
    int i37 = card36.getCoins();
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i41 = dominionBoard40.play();
    Card card42 = Card.great_hall;
    card42.addEmbargoToCard();
    card42.addEmbargoToCard();
    dominionBoard40.takeCard(card42);
    dominionBoard40.finalScores();
    player5.gainCardToTopOfDeck(card36, dominionBoard40);
    int i48 = player5.getCoins();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    Card card56 = Card.mine;
    int i57 = card56.getCoins();
    DominionBoard dominionBoard60 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card61 = Card.adventurer;
    int i62 = card61.getCost();
    boolean b63 = dominionBoard60.availableCards(card61);
    player54.buyCard(card56, dominionBoard60);
    Card card65 = Card.gold;
    DominionBoard dominionBoard68 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i69 = dominionBoard68.play();
    dominionBoard68.councilRoomHelper(100);
    java.util.List<Card> list_card72 = dominionBoard68.getNonEmptySupplyPiles();
    player54.gainCardToTopOfDeck(card65, dominionBoard68);
    java.util.List<Player> list_player74 = dominionBoard68.players;
    java.util.List<Player> list_player75 = dominionBoard68.getPlayers();
    java.util.List<Card> list_card76 = dominionBoard68.allKC();
    // The following exception was thrown during execution in test generation
    try {
    Card card77 = player5.buyRandomCard(dominionBoard68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.great_hall + "'", card42.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-5));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.mine + "'", card56.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.adventurer + "'", card61.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.gold + "'", card65.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    player5.discardCardsEndTurn();
    Card card10 = Card.great_hall;
    java.util.List<java.lang.String> list_str11 = card10.getTypes();
    int i12 = card10.getEmbargo();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i16 = dominionBoard15.play();
    dominionBoard15.councilRoomHelper(100);
    java.util.List<Card> list_card19 = dominionBoard15.getNonEmptySupplyPiles();
    dominionBoard15.cutpurseHelper((int)'a');
    player5.gainCardToTopOfDeck(card10, dominionBoard15);
    Card card23 = Card.great_hall;
    java.util.List<java.lang.String> list_str24 = card23.getTypes();
    int i25 = card23.getEmbargo();
    dominionBoard15.returnCard(card23);
    java.util.List<Card> list_card27 = dominionBoard15.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.great_hall + "'", card10.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 152);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 152);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    dominionBoard20.councilRoomHelper(3);
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card32 = Card.adventurer;
    int i33 = card32.getCost();
    boolean b34 = dominionBoard31.availableCards(card32);
    Card card35 = Card.smithy;
    int i36 = card35.getCost();
    dominionBoard31.trashCard(card35);
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player43 = new Player("hi!", (int)' ', dominionBoard42);
    boolean b44 = player43.actionsLeft();
    Card card45 = Card.curse;
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card50 = dominionBoard48.getHighestValueCards(2);
    player43.gainCard(card45, dominionBoard48);
    boolean b52 = dominionBoard31.availableCards(card45);
    dominionBoard20.takeCard(card45);
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card57 = Card.adventurer;
    int i58 = card57.getCost();
    boolean b59 = dominionBoard56.availableCards(card57);
    Card card60 = Card.smithy;
    int i61 = card60.getCost();
    dominionBoard56.trashCard(card60);
    boolean b63 = dominionBoard20.availableCards(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.adventurer + "'", card32.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.smithy + "'", card35.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.curse + "'", card45.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.adventurer + "'", card57.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.smithy + "'", card60.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    Card card36 = Card.gardens;
    int i37 = card36.getCoins();
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i41 = dominionBoard40.play();
    Card card42 = Card.great_hall;
    card42.addEmbargoToCard();
    card42.addEmbargoToCard();
    dominionBoard40.takeCard(card42);
    dominionBoard40.finalScores();
    player5.gainCardToTopOfDeck(card36, dominionBoard40);
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("", (int)(short)-1, dominionBoard52);
    // The following exception was thrown during execution in test generation
    try {
    Card card54 = player5.buyRandomCard(dominionBoard52);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.great_hall + "'", card42.equals(Card.great_hall));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    java.util.List<Player> list_player21 = dominionBoard11.players;
    Card card22 = Card.silver;
    dominionBoard11.takeCard(card22);
    dominionBoard11.cutpurseHelper(1);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i29 = dominionBoard28.play();
    Card card30 = Card.great_hall;
    card30.addEmbargoToCard();
    card30.addEmbargoToCard();
    dominionBoard28.takeCard(card30);
    dominionBoard28.finalScores();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player40 = new Player("hi!", (int)' ', dominionBoard39);
    boolean b41 = player40.actionsLeft();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card47 = Card.adventurer;
    int i48 = card47.getCost();
    boolean b49 = dominionBoard46.availableCards(card47);
    player40.buyCard(card42, dominionBoard46);
    java.util.LinkedList<Card> linkedlist_card51 = player40.getDeck();
    dominionBoard28.setUpGame((java.util.List<Card>)linkedlist_card51, (int)(byte)10);
    dominionBoard11.setUpGame((java.util.List<Card>)linkedlist_card51, (int)(byte)10);
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i59 = dominionBoard58.play();
    Card card60 = Card.great_hall;
    card60.addEmbargoToCard();
    card60.addEmbargoToCard();
    dominionBoard58.takeCard(card60);
    dominionBoard58.finalScores();
    java.util.List<Player> list_player65 = dominionBoard58.players;
    DominionBoard dominionBoard70 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player71 = new Player("hi!", (int)' ', dominionBoard70);
    boolean b72 = player71.actionsLeft();
    int i73 = player71.getCoins();
    java.util.List<java.lang.Integer> list_i74 = player71.actionCardIndices();
    DominionBoard dominionBoard79 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player80 = new Player("hi!", (int)' ', dominionBoard79);
    boolean b81 = player80.actionsLeft();
    Card card82 = Card.mine;
    int i83 = card82.getCoins();
    DominionBoard dominionBoard86 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card87 = Card.adventurer;
    int i88 = card87.getCost();
    boolean b89 = dominionBoard86.availableCards(card87);
    player80.buyCard(card82, dominionBoard86);
    java.util.List<Card> list_card91 = dominionBoard86.allKC();
    Card card92 = player71.buyRandomCard(dominionBoard86);
    dominionBoard86.councilRoomHelper(3);
    java.util.List<Player> list_player95 = dominionBoard86.getPlayers();
    dominionBoard58.players = list_player95;
    dominionBoard11.players = list_player95;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.silver + "'", card22.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.great_hall + "'", card30.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.adventurer + "'", card47.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.great_hall + "'", card60.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.mine + "'", card82.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    org.junit.Assert.assertTrue("'" + card87 + "' != '" + Card.adventurer + "'", card87.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    org.junit.Assert.assertTrue("'" + card92 + "' != '" + Card.copper + "'", card92.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player95);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(byte)1);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.smithy;
    int i22 = card21.getCost();
    dominionBoard17.trashCard(card21);
    player5.discard(card21);
    int i25 = player5.getCoins();
    int i26 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.smithy + "'", card21.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 32);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(short)0);
    boolean b3 = dominionBoard2.gameOver();
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player9 = new Player("hi!", (int)' ', dominionBoard8);
    Card card10 = Card.cutpurse;
    card10.setVictory((-1));
    player9.discard(card10);
    java.util.List<Card> list_card14 = player9.getHand();
    dominionBoard2.setUpGame(list_card14, 5);
    java.util.List<Card> list_card17 = dominionBoard2.getNonEmptySupplyPiles();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card20 = dominionBoard2.getHighestValueCards((-1));
    java.util.List<Card> list_card21 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.cutpurse + "'", card10.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    int i25 = player5.getTotalVictoryPoints();
    java.util.List<Card> list_card26 = player5.getHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.LinkedList<Card> linkedlist_card25 = player14.getDeck();
    dominionBoard2.setUpGame((java.util.List<Card>)linkedlist_card25, (int)(byte)10);
    java.util.List<Card> list_card29 = dominionBoard2.getHighestValueCards(0);
    java.util.List<Player> list_player30 = dominionBoard2.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    Card card35 = Card.mine;
    int i36 = card35.getCoins();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card40 = Card.adventurer;
    int i41 = card40.getCost();
    boolean b42 = dominionBoard39.availableCards(card40);
    player33.buyCard(card35, dominionBoard39);
    java.util.LinkedList<Card> linkedlist_card44 = player33.getDeck();
    player33.addActions((int)(byte)-1);
    Card card47 = Card.cutpurse;
    int i48 = card47.getEmbargo();
    boolean b49 = player33.hasCard(card47);
    DominionBoard dominionBoard52 = new DominionBoard((-1), (int)(short)0);
    boolean b53 = dominionBoard52.gameOver();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player59 = new Player("hi!", (int)' ', dominionBoard58);
    Card card60 = Card.cutpurse;
    card60.setVictory((-1));
    player59.discard(card60);
    java.util.List<Card> list_card64 = player59.getHand();
    dominionBoard52.setUpGame(list_card64, 5);
    java.util.List<Card> list_card67 = dominionBoard52.getNonEmptySupplyPiles();
    int i68 = dominionBoard52.play();
    player5.gainCardToTopOfDeck(card47, dominionBoard52);
    dominionBoard52.finalScores();
    dominionBoard52.cutpurseHelper(134);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.mine + "'", card35.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.adventurer + "'", card40.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card44);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.cutpurse + "'", card60.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i22 = dominionBoard21.play();
    Card card23 = Card.great_hall;
    card23.addEmbargoToCard();
    card23.addEmbargoToCard();
    dominionBoard21.takeCard(card23);
    dominionBoard21.councilRoomHelper((int)(short)0);
    player5.buyCard(card17, dominionBoard21);
    java.util.List<Card> list_card30 = dominionBoard21.getNonEmptySupplyPiles();
    dominionBoard21.seaHagHelper((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    dominionBoard4.ambassadorHelper(15, card7);
    java.util.List<Card> list_card11 = dominionBoard4.kingdomCards(18);
    Player player12 = new Player("", (int)(short)10, dominionBoard4);
    java.util.List<Card> list_card13 = player12.getHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<Card> list_card32 = player5.getHand();
    boolean b33 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    player5.discardCardsEndTurn();
    Card card10 = Card.great_hall;
    java.util.List<java.lang.String> list_str11 = card10.getTypes();
    int i12 = card10.getEmbargo();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i16 = dominionBoard15.play();
    dominionBoard15.councilRoomHelper(100);
    java.util.List<Card> list_card19 = dominionBoard15.getNonEmptySupplyPiles();
    dominionBoard15.cutpurseHelper((int)'a');
    player5.gainCardToTopOfDeck(card10, dominionBoard15);
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    boolean b29 = player28.actionsLeft();
    java.lang.String str30 = player28.getName();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player36 = new Player("hi!", (int)' ', dominionBoard35);
    boolean b37 = player36.actionsLeft();
    Card card38 = Card.mine;
    int i39 = card38.getCoins();
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card43 = Card.adventurer;
    int i44 = card43.getCost();
    boolean b45 = dominionBoard42.availableCards(card43);
    player36.buyCard(card38, dominionBoard42);
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card50 = Card.adventurer;
    int i51 = card50.getCost();
    boolean b52 = dominionBoard49.availableCards(card50);
    Card card53 = Card.smithy;
    int i54 = card53.getCost();
    dominionBoard49.trashCard(card53);
    dominionBoard49.cutpurseHelper((int)(byte)10);
    player28.gainCardToTopOfDeck(card38, dominionBoard49);
    Card card59 = player28.drawCardFromDeck();
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i63 = dominionBoard62.play();
    Card card64 = Card.great_hall;
    card64.addEmbargoToCard();
    card64.addEmbargoToCard();
    dominionBoard62.takeCard(card64);
    DominionBoard dominionBoard70 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i71 = dominionBoard70.play();
    dominionBoard70.cutpurseHelper(10);
    Card card75 = Card.embargo;
    dominionBoard70.ambassadorHelper((int)(byte)10, card75);
    player28.gainCardToHand(card64, dominionBoard70);
    java.lang.String str78 = player28.getName();
    player28.addActions((int)(short)0);
    player28.addActions((int)(short)-1);
    Card card83 = player28.drawCardFromDeck();
    dominionBoard15.returnCard(card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.great_hall + "'", card10.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 188);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!"+ "'", str30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.mine + "'", card38.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.adventurer + "'", card43.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.adventurer + "'", card50.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.smithy + "'", card53.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 4);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.mine + "'", card59.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.great_hall + "'", card64.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.embargo + "'", card75.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "hi!"+ "'", str78.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.copper + "'", card83.equals(Card.copper));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    player5.treasureInHand();
    java.util.List<java.lang.Integer> list_i49 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i49);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    boolean b48 = player5.currentBuys();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    int i56 = player54.getCoins();
    java.util.List<java.lang.Integer> list_i57 = player54.actionCardIndices();
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player63 = new Player("hi!", (int)' ', dominionBoard62);
    boolean b64 = player63.actionsLeft();
    Card card65 = Card.mine;
    int i66 = card65.getCoins();
    DominionBoard dominionBoard69 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card70 = Card.adventurer;
    int i71 = card70.getCost();
    boolean b72 = dominionBoard69.availableCards(card70);
    player63.buyCard(card65, dominionBoard69);
    java.util.List<Card> list_card74 = dominionBoard69.allKC();
    Card card75 = player54.buyRandomCard(dominionBoard69);
    player54.treasureInHand();
    player54.discardCardsEndTurn();
    DominionBoard dominionBoard80 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player81 = dominionBoard80.getPlayers();
    Card card82 = player54.buyRandomCard(dominionBoard80);
    Card card83 = player5.buyRandomCard(dominionBoard80);
    player5.newTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.mine + "'", card65.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.adventurer + "'", card70.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.copper + "'", card75.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player81);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.copper + "'", card82.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.copper + "'", card83.equals(Card.copper));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card28 = Card.adventurer;
    int i29 = card28.getCost();
    boolean b30 = dominionBoard27.availableCards(card28);
    Card card31 = Card.smithy;
    int i32 = card31.getCost();
    dominionBoard27.trashCard(card31);
    dominionBoard27.cutpurseHelper((int)(byte)10);
    boolean b36 = dominionBoard27.gameOver();
    Card card37 = player5.buyRandomCard(dominionBoard27);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.adventurer + "'", card28.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.smithy + "'", card31.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.copper + "'", card37.equals(Card.copper));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    Card card0 = Card.duchy;
    card0.addEmbargoToCard();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.duchy + "'", card0.equals(Card.duchy));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    java.util.List<Player> list_player21 = dominionBoard11.players;
    Card card22 = Card.silver;
    dominionBoard11.takeCard(card22);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    Card card40 = Card.gold;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i44 = dominionBoard43.play();
    dominionBoard43.councilRoomHelper(100);
    java.util.List<Card> list_card47 = dominionBoard43.getNonEmptySupplyPiles();
    player29.gainCardToTopOfDeck(card40, dominionBoard43);
    java.util.List<Player> list_player49 = dominionBoard43.players;
    dominionBoard11.players = list_player49;
    Card card51 = Card.mine;
    java.util.List<java.lang.String> list_str52 = card51.getTypes();
    dominionBoard11.takeCard(card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.silver + "'", card22.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.gold + "'", card40.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.mine + "'", card51.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str52);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.baron;
    Card card39 = Card.estate;
    Card card40 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    Card card66 = Card.cutpurse;
    Card card67 = Card.gardens;
    Card card68 = Card.silver;
    Card card69 = Card.curse;
    java.util.List<Card> list_card70 = dominionBoard37.kingdomCards(card38, card39, card40, card44, card47, card63, card66, card67, card68, card69);
    boolean b71 = player33.hasCard(card67);
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player75 = dominionBoard74.getPlayers();
    dominionBoard74.councilRoomHelper((int)'a');
    player5.gainCardToTopOfDeck(card67, dominionBoard74);
    Card card79 = Card.adventurer;
    dominionBoard74.trashCard(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.estate + "'", card39.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.baron + "'", card40.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.gardens + "'", card67.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.silver + "'", card68.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.curse + "'", card69.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.adventurer + "'", card79.equals(Card.adventurer));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    java.util.LinkedList<Card> linkedlist_card31 = player20.getDeck();
    player20.addActions((int)(byte)-1);
    Card card34 = Card.cutpurse;
    int i35 = card34.getEmbargo();
    boolean b36 = player20.hasCard(card34);
    card34.addEmbargoToCard();
    dominionBoard10.returnCard(card34);
    java.util.List<Player> list_player39 = dominionBoard10.players;
    java.util.List<Card> list_card40 = dominionBoard10.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card31);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.smithy;
    int i22 = card21.getCost();
    dominionBoard17.trashCard(card21);
    player5.discard(card21);
    int i25 = player5.getCoins();
    int i26 = player5.getCoins();
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player32 = new Player("hi!", (int)' ', dominionBoard31);
    boolean b33 = player32.actionsLeft();
    java.lang.String str34 = player32.getName();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player40 = new Player("hi!", (int)' ', dominionBoard39);
    boolean b41 = player40.actionsLeft();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card47 = Card.adventurer;
    int i48 = card47.getCost();
    boolean b49 = dominionBoard46.availableCards(card47);
    player40.buyCard(card42, dominionBoard46);
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card54 = Card.adventurer;
    int i55 = card54.getCost();
    boolean b56 = dominionBoard53.availableCards(card54);
    Card card57 = Card.smithy;
    int i58 = card57.getCost();
    dominionBoard53.trashCard(card57);
    dominionBoard53.cutpurseHelper((int)(byte)10);
    player32.gainCardToTopOfDeck(card42, dominionBoard53);
    Card card63 = player32.drawCardFromDeck();
    DominionBoard dominionBoard66 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i67 = dominionBoard66.play();
    Card card68 = Card.great_hall;
    card68.addEmbargoToCard();
    card68.addEmbargoToCard();
    dominionBoard66.takeCard(card68);
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i75 = dominionBoard74.play();
    dominionBoard74.cutpurseHelper(10);
    Card card79 = Card.embargo;
    dominionBoard74.ambassadorHelper((int)(byte)10, card79);
    player32.gainCardToHand(card68, dominionBoard74);
    Card card82 = Card.province;
    DominionBoard dominionBoard85 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i86 = dominionBoard85.play();
    java.util.List<Player> list_player87 = dominionBoard85.getPlayers();
    dominionBoard85.finalScores();
    java.util.List<Card> list_card90 = dominionBoard85.getHighestValueCards((int)'a');
    dominionBoard85.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player93 = dominionBoard85.getPlayers();
    Card card94 = Card.adventurer;
    int i95 = card94.getCost();
    dominionBoard85.returnCard(card94);
    player32.gainCard(card82, dominionBoard85);
    Card card98 = player32.drawCardFromDeck();
    boolean b99 = player5.hasCard(card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.smithy + "'", card21.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!"+ "'", str34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.adventurer + "'", card47.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.adventurer + "'", card54.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.smithy + "'", card57.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 4);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.mine + "'", card63.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.great_hall + "'", card68.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.embargo + "'", card79.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.province + "'", card82.equals(Card.province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    org.junit.Assert.assertTrue("'" + card94 + "' != '" + Card.adventurer + "'", card94.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 6);
    org.junit.Assert.assertTrue("'" + card98 + "' != '" + Card.province + "'", card98.equals(Card.province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i7 = dominionBoard6.play();
    Card card8 = Card.great_hall;
    card8.addEmbargoToCard();
    card8.addEmbargoToCard();
    dominionBoard6.takeCard(card8);
    dominionBoard6.finalScores();
    boolean b13 = dominionBoard6.gameOver();
    DominionBoard dominionBoard16 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i17 = dominionBoard16.play();
    Card card18 = Card.great_hall;
    card18.addEmbargoToCard();
    card18.addEmbargoToCard();
    dominionBoard16.takeCard(card18);
    dominionBoard16.finalScores();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    player29.treasureInHand();
    Card card31 = Card.duchy;
    boolean b32 = player29.hasCard(card31);
    dominionBoard16.ambassadorHelper((int)(byte)10, card31);
    boolean b34 = dominionBoard6.availableCards(card31);
    dominionBoard2.ambassadorHelper((int)(short)1, card31);
    java.util.List<java.lang.String> list_str36 = card31.getTypes();
    int i37 = card31.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.great_hall + "'", card8.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.great_hall + "'", card18.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.duchy + "'", card31.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    java.util.List<Card> list_card10 = dominionBoard2.kingdomCards((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player26 = dominionBoard25.getPlayers();
    // The following exception was thrown during execution in test generation
    try {
    Card card27 = player5.buyRandomCard(dominionBoard25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<Card> list_card32 = player5.getHand();
    Card card33 = Card.adventurer;
    java.util.List<java.lang.String> list_str34 = card33.getTypes();
    boolean b35 = player5.hasCard(card33);
    player5.addActions((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.adventurer + "'", card33.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i22 = dominionBoard21.play();
    Card card23 = Card.great_hall;
    card23.addEmbargoToCard();
    card23.addEmbargoToCard();
    dominionBoard21.takeCard(card23);
    dominionBoard21.councilRoomHelper((int)(short)0);
    player5.buyCard(card17, dominionBoard21);
    int i30 = player5.getBuys();
    boolean b31 = player5.actionsLeft();
    java.util.List<Card> list_card32 = player5.getCardsPlayed();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.baron;
    Card card37 = Card.estate;
    Card card38 = Card.baron;
    DominionBoard dominionBoard41 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card42 = Card.adventurer;
    int i43 = card42.getCost();
    boolean b44 = dominionBoard41.availableCards(card42);
    Card card45 = Card.baron;
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player51 = new Player("hi!", (int)' ', dominionBoard50);
    boolean b52 = player51.actionsLeft();
    Card card53 = Card.curse;
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card58 = dominionBoard56.getHighestValueCards(2);
    player51.gainCard(card53, dominionBoard56);
    java.util.List<Player> list_player60 = dominionBoard56.players;
    Card card61 = Card.curse;
    card61.addEmbargoToCard();
    dominionBoard56.takeCard(card61);
    Card card64 = Card.cutpurse;
    Card card65 = Card.gardens;
    Card card66 = Card.silver;
    Card card67 = Card.curse;
    java.util.List<Card> list_card68 = dominionBoard35.kingdomCards(card36, card37, card38, card42, card45, card61, card64, card65, card66, card67);
    card65.setVictory((int)(short)100);
    DominionBoard dominionBoard73 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i74 = dominionBoard73.play();
    Card card75 = Card.great_hall;
    card75.addEmbargoToCard();
    card75.addEmbargoToCard();
    dominionBoard73.takeCard(card75);
    dominionBoard73.finalScores();
    DominionBoard dominionBoard85 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player86 = new Player("hi!", (int)' ', dominionBoard85);
    player86.treasureInHand();
    Card card88 = Card.duchy;
    boolean b89 = player86.hasCard(card88);
    dominionBoard73.ambassadorHelper((int)(byte)10, card88);
    player5.buyCard(card65, dominionBoard73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.baron + "'", card36.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.estate + "'", card37.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.adventurer + "'", card42.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.baron + "'", card45.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.curse + "'", card53.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player60);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.curse + "'", card61.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.cutpurse + "'", card64.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.gardens + "'", card65.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.silver + "'", card66.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.curse + "'", card67.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.great_hall + "'", card75.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card88 + "' != '" + Card.duchy + "'", card88.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    dominionBoard2.trashCard(card6);
    java.util.List<Card> list_card9 = dominionBoard2.getNonEmptySupplyPiles();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    Card card0 = Card.mine;
    int i1 = card0.getCoins();
    int i2 = card0.getCoins();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.mine + "'", card0.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.smithy;
    int i22 = card21.getCost();
    dominionBoard17.trashCard(card21);
    player5.discard(card21);
    java.util.LinkedList<Card> linkedlist_card25 = player5.getDeck();
    Card card26 = player5.drawCardFromDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.smithy + "'", card21.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    int i14 = player5.getCoins();
    player5.discardCardsEndTurn();
    int i16 = player5.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    java.util.List<Card> list_card19 = dominionBoard13.kingdomCards(1);
    Card card20 = Card.mine;
    java.util.List<java.lang.String> list_str21 = card20.getTypes();
    boolean b22 = dominionBoard13.availableCards(card20);
    Player player23 = new Player("", 152, dominionBoard13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.mine + "'", card20.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    int i22 = player5.getCoins();
    java.lang.String str23 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-5));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!"+ "'", str23.equals("hi!"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<Card> list_card45 = dominionBoard34.getNonEmptySupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    boolean b16 = player5.actionInHand();
    boolean b17 = player5.actionInHand();
    Card card18 = null;
    player5.discard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    int i28 = player5.getPlayerNumber();
    int i29 = player5.getBuys();
    java.lang.String str30 = player5.getName();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i34 = dominionBoard33.play();
    Card card35 = Card.great_hall;
    card35.addEmbargoToCard();
    card35.addEmbargoToCard();
    dominionBoard33.takeCard(card35);
    dominionBoard33.councilRoomHelper((int)(short)0);
    Card card41 = player5.buyRandomCard(dominionBoard33);
    int i42 = player5.getTotalVictoryPoints();
    boolean b43 = player5.actionsLeft();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!"+ "'", str30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.great_hall + "'", card35.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    player5.discardCardsEndTurn();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    DominionBoard dominionBoard2 = new DominionBoard(2, 10);
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player10 = new Player("hi!", (int)' ', dominionBoard9);
    boolean b11 = player10.actionsLeft();
    Card card12 = Card.mine;
    int i13 = card12.getCoins();
    DominionBoard dominionBoard16 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card17 = Card.adventurer;
    int i18 = card17.getCost();
    boolean b19 = dominionBoard16.availableCards(card17);
    player10.buyCard(card12, dominionBoard16);
    dominionBoard16.councilRoomHelper(100);
    Player player23 = new Player("", (int)(byte)0, dominionBoard16);
    Card card24 = player23.drawCardFromDeck();
    int i25 = card24.getCost();
    dominionBoard2.returnCard(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.mine + "'", card12.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.adventurer + "'", card17.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.util.List<java.lang.Integer> list_i7 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i7);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card5 = Card.baron;
    Card card6 = Card.estate;
    Card card7 = Card.baron;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card11 = Card.adventurer;
    int i12 = card11.getCost();
    boolean b13 = dominionBoard10.availableCards(card11);
    Card card14 = Card.baron;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.curse;
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card27 = dominionBoard25.getHighestValueCards(2);
    player20.gainCard(card22, dominionBoard25);
    java.util.List<Player> list_player29 = dominionBoard25.players;
    Card card30 = Card.curse;
    card30.addEmbargoToCard();
    dominionBoard25.takeCard(card30);
    Card card33 = Card.cutpurse;
    Card card34 = Card.gardens;
    Card card35 = Card.silver;
    Card card36 = Card.curse;
    java.util.List<Card> list_card37 = dominionBoard4.kingdomCards(card5, card6, card7, card11, card14, card30, card33, card34, card35, card36);
    DominionBoard dominionBoard40 = new DominionBoard((-1), (int)(short)0);
    java.util.List<Card> list_card42 = dominionBoard40.getHighestValueCards(6);
    dominionBoard4.setUpGame(list_card42, (int)(byte)-1);
    java.util.List<Card> list_card45 = dominionBoard4.allKC();
    Player player46 = new Player("", (int)(byte)0, dominionBoard4);
    java.util.LinkedList<Card> linkedlist_card47 = player46.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.baron + "'", card7.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.adventurer + "'", card11.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.baron + "'", card14.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.curse + "'", card22.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.curse + "'", card30.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.cutpurse + "'", card33.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.gardens + "'", card34.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.silver + "'", card35.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card47);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    java.util.List<Card> list_card25 = dominionBoard19.allKC();
    Card card26 = Card.mine;
    int i27 = card26.getCoins();
    boolean b28 = dominionBoard19.availableCards(card26);
    int i29 = card26.getCost();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.mine + "'", card26.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 5);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.councilRoomHelper(100);
    java.util.List<Card> list_card6 = dominionBoard2.getNonEmptySupplyPiles();
    java.util.List<Card> list_card8 = dominionBoard2.kingdomCards((-2));
    java.util.List<Card> list_card10 = dominionBoard2.kingdomCards(28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    int i6 = player5.getBuys();
    int i7 = player5.getCoins();
    int i8 = player5.getActions();
    java.lang.String str9 = player5.getName();
    int i10 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!"+ "'", str9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    Card card31 = Card.gold;
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    dominionBoard34.councilRoomHelper(100);
    java.util.List<Card> list_card38 = dominionBoard34.getNonEmptySupplyPiles();
    player20.gainCardToTopOfDeck(card31, dominionBoard34);
    card31.addEmbargoToCard();
    boolean b41 = dominionBoard10.availableCards(card31);
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player51 = new Player("hi!", (int)' ', dominionBoard50);
    Card card52 = Card.cutpurse;
    card52.setVictory((-1));
    player51.discard(card52);
    java.util.List<Card> list_card56 = player51.getHand();
    dominionBoard44.setUpGame(list_card56, 5);
    dominionBoard10.setUpGame(list_card56, 0);
    java.util.List<Card> list_card61 = dominionBoard10.allKC();
    java.util.List<Card> list_card63 = dominionBoard10.kingdomCards((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.gold + "'", card31.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.cutpurse + "'", card52.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    java.util.List<Card> list_card19 = dominionBoard11.getHighestValueCards((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    int i45 = card29.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player21 = new Player("hi!", (int)' ', dominionBoard20);
    Card card22 = Card.smithy;
    int i23 = card22.getCost();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    player21.gainCardToHand(card22, dominionBoard35);
    java.util.List<Card> list_card41 = dominionBoard35.allKC();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    boolean b44 = dominionBoard35.availableCards(card42);
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player50 = new Player("hi!", (int)' ', dominionBoard49);
    player15.buyCard(card42, dominionBoard49);
    int i52 = card42.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.smithy + "'", card22.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 100);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Player> list_player5 = dominionBoard2.players;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    int i13 = player11.getCoins();
    java.util.List<java.lang.Integer> list_i14 = player11.actionCardIndices();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    java.util.List<Card> list_card31 = dominionBoard26.allKC();
    Card card32 = player11.buyRandomCard(dominionBoard26);
    player11.treasureInHand();
    player11.discardCardsEndTurn();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player38 = dominionBoard37.getPlayers();
    Card card39 = player11.buyRandomCard(dominionBoard37);
    dominionBoard2.takeCard(card39);
    int i41 = dominionBoard2.play();
    boolean b42 = dominionBoard2.gameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    boolean b7 = player5.actionInHand();
    int i8 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    Card card0 = Card.silver;
    card0.setVictory((-5));
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.silver + "'", card0.equals(Card.silver));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    dominionBoard2.seaHagHelper((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    boolean b17 = player5.actionInHand();
    int i18 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<Card> list_card45 = player5.getHand();
    int i46 = player5.getCoins();
    player5.addActions(219);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-5));

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    java.lang.String str36 = player5.getName();
    int i37 = player5.getCoins();
    java.util.List<Card> list_card38 = player5.getHand();
    boolean b39 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!"+ "'", str36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    int i16 = player5.getPlayerNumber();
    java.util.List<Card> list_card17 = player5.getDiscard();
    java.util.List<Card> list_card18 = player5.getCardsPlayed();
    boolean b19 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    boolean b16 = player5.actionInHand();
    boolean b17 = player5.actionsLeft();
    player5.treasureInHand();
    java.util.List<Card> list_card19 = player5.getHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(short)0);
    boolean b3 = dominionBoard2.gameOver();
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player9 = new Player("hi!", (int)' ', dominionBoard8);
    Card card10 = Card.cutpurse;
    card10.setVictory((-1));
    player9.discard(card10);
    java.util.List<Card> list_card14 = player9.getHand();
    dominionBoard2.setUpGame(list_card14, 5);
    java.util.List<Card> list_card17 = dominionBoard2.getNonEmptySupplyPiles();
    int i18 = dominionBoard2.play();
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player24 = new Player("hi!", (int)' ', dominionBoard23);
    boolean b25 = player24.actionsLeft();
    Card card26 = Card.mine;
    int i27 = card26.getCoins();
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card31 = Card.adventurer;
    int i32 = card31.getCost();
    boolean b33 = dominionBoard30.availableCards(card31);
    player24.buyCard(card26, dominionBoard30);
    boolean b35 = player24.actionInHand();
    boolean b36 = player24.actionsLeft();
    DominionBoard dominionBoard41 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player42 = new Player("hi!", (int)' ', dominionBoard41);
    player42.treasureInHand();
    Card card44 = Card.duchy;
    boolean b45 = player42.hasCard(card44);
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player51 = new Player("hi!", (int)' ', dominionBoard50);
    boolean b52 = player51.actionsLeft();
    java.lang.String str53 = player51.getName();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player59 = new Player("hi!", (int)' ', dominionBoard58);
    boolean b60 = player59.actionsLeft();
    Card card61 = Card.mine;
    int i62 = card61.getCoins();
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card66 = Card.adventurer;
    int i67 = card66.getCost();
    boolean b68 = dominionBoard65.availableCards(card66);
    player59.buyCard(card61, dominionBoard65);
    DominionBoard dominionBoard72 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card73 = Card.adventurer;
    int i74 = card73.getCost();
    boolean b75 = dominionBoard72.availableCards(card73);
    Card card76 = Card.smithy;
    int i77 = card76.getCost();
    dominionBoard72.trashCard(card76);
    dominionBoard72.cutpurseHelper((int)(byte)10);
    player51.gainCardToTopOfDeck(card61, dominionBoard72);
    player24.gainCard(card44, dominionBoard72);
    dominionBoard2.trashCard(card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.cutpurse + "'", card10.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.mine + "'", card26.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.adventurer + "'", card31.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.duchy + "'", card44.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!"+ "'", str53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.mine + "'", card61.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.adventurer + "'", card66.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.adventurer + "'", card73.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.smithy + "'", card76.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 4);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    dominionBoard4.ambassadorHelper(6, card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    java.util.List<Card> list_card28 = player5.getHand();
    Card card29 = Card.mine;
    java.util.List<java.lang.String> list_str30 = card29.getTypes();
    boolean b31 = player5.hasCard(card29);
    boolean b32 = player5.actionInHand();
    DominionBoard dominionBoard34 = null;
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(38, dominionBoard34);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.mine + "'", card29.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i22 = dominionBoard21.play();
    Card card23 = Card.great_hall;
    card23.addEmbargoToCard();
    card23.addEmbargoToCard();
    dominionBoard21.takeCard(card23);
    dominionBoard21.councilRoomHelper((int)(short)0);
    player5.buyCard(card17, dominionBoard21);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player35 = new Player("hi!", (int)' ', dominionBoard34);
    boolean b36 = player35.actionsLeft();
    Card card37 = Card.curse;
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card42 = dominionBoard40.getHighestValueCards(2);
    player35.gainCard(card37, dominionBoard40);
    boolean b44 = player35.currentBuys();
    Card card45 = player35.drawCardFromDeck();
    int i46 = player35.getPlayerNumber();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player52 = new Player("hi!", (int)' ', dominionBoard51);
    boolean b53 = player52.actionsLeft();
    Card card54 = Card.mine;
    int i55 = card54.getCoins();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card59 = Card.adventurer;
    int i60 = card59.getCost();
    boolean b61 = dominionBoard58.availableCards(card59);
    player52.buyCard(card54, dominionBoard58);
    Card card63 = Card.gold;
    DominionBoard dominionBoard66 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i67 = dominionBoard66.play();
    dominionBoard66.councilRoomHelper(100);
    java.util.List<Card> list_card70 = dominionBoard66.getNonEmptySupplyPiles();
    player52.gainCardToTopOfDeck(card63, dominionBoard66);
    boolean b72 = player35.hasCard(card63);
    boolean b73 = dominionBoard21.availableCards(card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.curse + "'", card37.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.mine + "'", card54.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.adventurer + "'", card59.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.gold + "'", card63.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    Card card31 = Card.gold;
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    dominionBoard34.councilRoomHelper(100);
    java.util.List<Card> list_card38 = dominionBoard34.getNonEmptySupplyPiles();
    player20.gainCardToTopOfDeck(card31, dominionBoard34);
    card31.addEmbargoToCard();
    boolean b41 = dominionBoard10.availableCards(card31);
    java.util.List<Player> list_player42 = dominionBoard10.getPlayers();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.gold + "'", card31.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    java.util.List<Card> list_card19 = player5.getCardsPlayed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    int i25 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.baron;
    Card card39 = Card.estate;
    Card card40 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    Card card66 = Card.cutpurse;
    Card card67 = Card.gardens;
    Card card68 = Card.silver;
    Card card69 = Card.curse;
    java.util.List<Card> list_card70 = dominionBoard37.kingdomCards(card38, card39, card40, card44, card47, card63, card66, card67, card68, card69);
    boolean b71 = player33.hasCard(card67);
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player75 = dominionBoard74.getPlayers();
    dominionBoard74.councilRoomHelper((int)'a');
    player5.gainCardToTopOfDeck(card67, dominionBoard74);
    Card card79 = player5.drawCardFromDeck();
    int i80 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.estate + "'", card39.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.baron + "'", card40.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.gardens + "'", card67.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.silver + "'", card68.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.curse + "'", card69.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.gardens + "'", card79.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 32);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<Card> list_card45 = player5.getHand();
    Card card46 = Card.council_room;
    int i47 = card46.getEmbargo();
    boolean b48 = player5.hasCard(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.council_room + "'", card46.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    Card card15 = Card.smithy;
    int i16 = card15.getCost();
    dominionBoard11.trashCard(card15);
    boolean b18 = dominionBoard2.availableCards(card15);
    dominionBoard2.cutpurseHelper(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.smithy + "'", card15.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getBuys();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    dominionBoard18.players = list_player29;
    java.util.List<Card> list_card32 = dominionBoard18.getHighestValueCards((int)(byte)10);
    Card card33 = player5.buyRandomCard(dominionBoard18);
    int i34 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i35 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i35);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    java.lang.String str35 = player33.getName();
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player41 = new Player("hi!", (int)' ', dominionBoard40);
    boolean b42 = player41.actionsLeft();
    Card card43 = Card.mine;
    int i44 = card43.getCoins();
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card48 = Card.adventurer;
    int i49 = card48.getCost();
    boolean b50 = dominionBoard47.availableCards(card48);
    player41.buyCard(card43, dominionBoard47);
    DominionBoard dominionBoard54 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card55 = Card.adventurer;
    int i56 = card55.getCost();
    boolean b57 = dominionBoard54.availableCards(card55);
    Card card58 = Card.smithy;
    int i59 = card58.getCost();
    dominionBoard54.trashCard(card58);
    dominionBoard54.cutpurseHelper((int)(byte)10);
    player33.gainCardToTopOfDeck(card43, dominionBoard54);
    player33.addActions(2);
    Card card66 = player33.drawCardFromDeck();
    boolean b67 = player5.hasCard(card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "hi!"+ "'", str35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.mine + "'", card43.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.adventurer + "'", card48.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.adventurer + "'", card55.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.smithy + "'", card58.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 4);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.mine + "'", card66.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    java.util.List<Card> list_card16 = player15.getHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.cutpurseHelper(10);
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    Card card13 = Card.mine;
    int i14 = card13.getCoins();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    player11.buyCard(card13, dominionBoard17);
    java.util.List<Card> list_card23 = dominionBoard17.kingdomCards(1);
    dominionBoard2.setUpGame(list_card23, (int)(byte)1);
    dominionBoard2.finalScores();
    java.util.List<Card> list_card27 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.mine + "'", card13.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    int i28 = player5.getPlayerNumber();
    player5.treasureInHand();
    java.util.List<java.lang.Integer> list_i30 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i30);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player21 = new Player("hi!", (int)' ', dominionBoard20);
    Card card22 = Card.smithy;
    int i23 = card22.getCost();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    player21.gainCardToHand(card22, dominionBoard35);
    java.util.List<Card> list_card41 = dominionBoard35.allKC();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    boolean b44 = dominionBoard35.availableCards(card42);
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player50 = new Player("hi!", (int)' ', dominionBoard49);
    player15.buyCard(card42, dominionBoard49);
    player15.addActions(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.smithy + "'", card22.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    int i16 = player5.getPlayerNumber();
    java.util.List<Card> list_card17 = player5.getDiscard();
    java.util.LinkedList<Card> linkedlist_card18 = player5.getDeck();
    java.lang.String str19 = player5.getName();
    DominionBoard dominionBoard20 = null;
    // The following exception was thrown during execution in test generation
    try {
    Card card21 = player5.buyRandomCard(dominionBoard20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!"+ "'", str19.equals("hi!"));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(short)0);
    boolean b3 = dominionBoard2.gameOver();
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player9 = new Player("hi!", (int)' ', dominionBoard8);
    Card card10 = Card.cutpurse;
    card10.setVictory((-1));
    player9.discard(card10);
    java.util.List<Card> list_card14 = player9.getHand();
    dominionBoard2.setUpGame(list_card14, 5);
    java.util.List<Card> list_card17 = dominionBoard2.getNonEmptySupplyPiles();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card20 = dominionBoard2.getHighestValueCards((-1));
    java.util.List<Card> list_card22 = dominionBoard2.kingdomCards(45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.cutpurse + "'", card10.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    DominionBoard dominionBoard2 = new DominionBoard(3, 15);
    Card card3 = Card.silver;
    int i4 = card3.getCost();
    int i5 = card3.getEmbargo();
    dominionBoard2.trashCard(card3);
    java.util.List<Card> list_card7 = dominionBoard2.allKC();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.silver + "'", card3.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.curse;
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card14 = dominionBoard12.getHighestValueCards(2);
    player7.gainCard(card9, dominionBoard12);
    java.util.List<Card> list_card16 = player7.getDiscard();
    int i17 = player7.getBuys();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player21 = dominionBoard20.getPlayers();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i25 = dominionBoard24.play();
    Card card26 = Card.great_hall;
    card26.addEmbargoToCard();
    card26.addEmbargoToCard();
    dominionBoard24.takeCard(card26);
    dominionBoard24.finalScores();
    java.util.List<Player> list_player31 = dominionBoard24.players;
    dominionBoard20.players = list_player31;
    java.util.List<Card> list_card34 = dominionBoard20.getHighestValueCards((int)(byte)10);
    Card card35 = player7.buyRandomCard(dominionBoard20);
    Player player36 = new Player("", 38, dominionBoard20);
    dominionBoard20.councilRoomHelper(18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.curse + "'", card9.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.great_hall + "'", card26.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.copper + "'", card35.equals(Card.copper));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    boolean b48 = player5.currentBuys();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    int i56 = player54.getCoins();
    java.util.List<java.lang.Integer> list_i57 = player54.actionCardIndices();
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player63 = new Player("hi!", (int)' ', dominionBoard62);
    boolean b64 = player63.actionsLeft();
    Card card65 = Card.mine;
    int i66 = card65.getCoins();
    DominionBoard dominionBoard69 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card70 = Card.adventurer;
    int i71 = card70.getCost();
    boolean b72 = dominionBoard69.availableCards(card70);
    player63.buyCard(card65, dominionBoard69);
    java.util.List<Card> list_card74 = dominionBoard69.allKC();
    Card card75 = player54.buyRandomCard(dominionBoard69);
    player54.treasureInHand();
    player54.discardCardsEndTurn();
    DominionBoard dominionBoard80 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player81 = dominionBoard80.getPlayers();
    Card card82 = player54.buyRandomCard(dominionBoard80);
    Card card83 = player5.buyRandomCard(dominionBoard80);
    dominionBoard80.seaHagHelper(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.mine + "'", card65.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.adventurer + "'", card70.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.copper + "'", card75.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player81);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.copper + "'", card82.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.copper + "'", card83.equals(Card.copper));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.duchy;
    boolean b8 = player5.hasCard(card7);
    int i9 = player5.getCoins();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    Card card16 = Card.cutpurse;
    card16.setVictory((-1));
    player15.discard(card16);
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    player5.gainCard(card16, dominionBoard22);
    dominionBoard22.seaHagHelper(100);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.duchy + "'", card7.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    int i14 = player5.getCoins();
    player5.discardCardsEndTurn();
    int i16 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    card26.addEmbargoToCard();
    card26.setVictory(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.smithy;
    int i22 = card21.getCost();
    dominionBoard17.trashCard(card21);
    player5.discard(card21);
    int i25 = player5.getCoins();
    int i26 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.smithy + "'", card21.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    int i15 = player5.getCoins();
    java.util.List<Card> list_card16 = player5.getCardsPlayed();
    java.util.List<Card> list_card17 = player5.getDiscard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    java.lang.String str36 = player5.getName();
    DominionBoard dominionBoard41 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player42 = new Player("hi!", (int)' ', dominionBoard41);
    boolean b43 = player42.actionsLeft();
    int i44 = player42.getCoins();
    java.util.List<java.lang.Integer> list_i45 = player42.actionCardIndices();
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player51 = new Player("hi!", (int)' ', dominionBoard50);
    boolean b52 = player51.actionsLeft();
    Card card53 = Card.mine;
    int i54 = card53.getCoins();
    DominionBoard dominionBoard57 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card58 = Card.adventurer;
    int i59 = card58.getCost();
    boolean b60 = dominionBoard57.availableCards(card58);
    player51.buyCard(card53, dominionBoard57);
    java.util.List<Card> list_card62 = dominionBoard57.allKC();
    Card card63 = player42.buyRandomCard(dominionBoard57);
    dominionBoard57.councilRoomHelper(3);
    DominionBoard dominionBoard68 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card69 = Card.adventurer;
    int i70 = card69.getCost();
    boolean b71 = dominionBoard68.availableCards(card69);
    Card card72 = Card.smithy;
    int i73 = card72.getCost();
    dominionBoard68.trashCard(card72);
    DominionBoard dominionBoard79 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player80 = new Player("hi!", (int)' ', dominionBoard79);
    boolean b81 = player80.actionsLeft();
    Card card82 = Card.curse;
    DominionBoard dominionBoard85 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card87 = dominionBoard85.getHighestValueCards(2);
    player80.gainCard(card82, dominionBoard85);
    boolean b89 = dominionBoard68.availableCards(card82);
    dominionBoard57.takeCard(card82);
    boolean b91 = player5.hasCard(card82);
    boolean b92 = player5.actionInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!"+ "'", str36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.mine + "'", card53.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.adventurer + "'", card58.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.copper + "'", card63.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.adventurer + "'", card69.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.smithy + "'", card72.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.curse + "'", card82.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getBuys();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    dominionBoard18.players = list_player29;
    java.util.List<Card> list_card32 = dominionBoard18.getHighestValueCards((int)(byte)10);
    Card card33 = player5.buyRandomCard(dominionBoard18);
    java.util.List<Card> list_card34 = dominionBoard18.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    boolean b16 = player5.actionInHand();
    player5.newTurn();
    int i18 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    int i37 = player5.getTotalVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 124);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i7 = dominionBoard6.play();
    Card card8 = Card.great_hall;
    card8.addEmbargoToCard();
    card8.addEmbargoToCard();
    dominionBoard6.takeCard(card8);
    dominionBoard6.finalScores();
    boolean b13 = dominionBoard6.gameOver();
    DominionBoard dominionBoard16 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i17 = dominionBoard16.play();
    Card card18 = Card.great_hall;
    card18.addEmbargoToCard();
    card18.addEmbargoToCard();
    dominionBoard16.takeCard(card18);
    dominionBoard16.finalScores();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    player29.treasureInHand();
    Card card31 = Card.duchy;
    boolean b32 = player29.hasCard(card31);
    dominionBoard16.ambassadorHelper((int)(byte)10, card31);
    boolean b34 = dominionBoard6.availableCards(card31);
    dominionBoard2.ambassadorHelper((int)(short)1, card31);
    int i36 = card31.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.great_hall + "'", card8.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.great_hall + "'", card18.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.duchy + "'", card31.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 22);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.duchy;
    boolean b8 = player5.hasCard(card7);
    int i9 = player5.getCoins();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    Card card16 = Card.cutpurse;
    card16.setVictory((-1));
    player15.discard(card16);
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    player5.gainCard(card16, dominionBoard22);
    int i31 = player5.getCoins();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.duchy + "'", card7.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<java.lang.Integer> list_i32 = player5.actionCardIndices();
    java.util.LinkedList<Card> linkedlist_card33 = player5.getDeck();
    player5.newTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card33);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    dominionBoard4.ambassadorHelper(15, card7);
    java.util.List<Card> list_card11 = dominionBoard4.kingdomCards(18);
    Player player12 = new Player("", (int)(short)10, dominionBoard4);
    int i13 = player12.getBuys();
    Card card14 = Card.cutpurse;
    int i15 = card14.getCoins();
    boolean b16 = player12.hasCard(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.cutpurse + "'", card14.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    int i36 = card12.getVictory();
    int i37 = card12.getEmbargo();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player27 = new Player("hi!", (int)' ', dominionBoard26);
    boolean b28 = player27.actionsLeft();
    Card card29 = Card.mine;
    int i30 = card29.getCoins();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card34 = Card.adventurer;
    int i35 = card34.getCost();
    boolean b36 = dominionBoard33.availableCards(card34);
    player27.buyCard(card29, dominionBoard33);
    java.util.LinkedList<Card> linkedlist_card38 = player27.getDeck();
    player27.addActions((int)(byte)-1);
    Card card41 = Card.cutpurse;
    int i42 = card41.getEmbargo();
    boolean b43 = player27.hasCard(card41);
    player27.treasureInHand();
    int i45 = player27.getPlayerNumber();
    Card card46 = Card.estate;
    boolean b47 = player27.hasCard(card46);
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i51 = dominionBoard50.play();
    Card card52 = Card.great_hall;
    card52.addEmbargoToCard();
    card52.addEmbargoToCard();
    dominionBoard50.takeCard(card52);
    dominionBoard50.councilRoomHelper(0);
    player5.buyCard(card46, dominionBoard50);
    dominionBoard50.councilRoomHelper((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.mine + "'", card29.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.adventurer + "'", card34.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card38);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.cutpurse + "'", card41.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 32);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.great_hall + "'", card52.equals(Card.great_hall));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getActions();
    Card card16 = Card.council_room;
    int i17 = card16.getCost();
    card16.addEmbargoToCard();
    player5.discard(card16);
    java.lang.String str20 = player5.getName();
    java.util.List<java.lang.Integer> list_i21 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.council_room + "'", card16.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "hi!"+ "'", str20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i21);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.duchy;
    boolean b8 = player5.hasCard(card7);
    int i9 = player5.getCoins();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    Card card16 = Card.cutpurse;
    card16.setVictory((-1));
    player15.discard(card16);
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    player5.gainCard(card16, dominionBoard22);
    int i31 = dominionBoard22.play();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.duchy + "'", card7.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Card> list_card5 = dominionBoard2.getNonEmptySupplyPiles();
    java.util.List<Card> list_card7 = dominionBoard2.kingdomCards(1);
    java.util.List<Card> list_card8 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    java.util.List<Player> list_player25 = dominionBoard19.players;
    java.util.List<Player> list_player26 = dominionBoard19.getPlayers();
    java.util.List<Card> list_card27 = dominionBoard19.allKC();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("", (int)(short)-1, dominionBoard32);
    java.util.List<Card> list_card35 = dominionBoard32.kingdomCards(10);
    java.util.List<Player> list_player36 = dominionBoard32.players;
    dominionBoard19.players = list_player36;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i22 = dominionBoard21.play();
    Card card23 = Card.great_hall;
    card23.addEmbargoToCard();
    card23.addEmbargoToCard();
    dominionBoard21.takeCard(card23);
    dominionBoard21.councilRoomHelper((int)(short)0);
    player5.buyCard(card17, dominionBoard21);
    int i30 = player5.getBuys();
    boolean b31 = player5.actionsLeft();
    int i32 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 32);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    int i9 = player7.getCoins();
    java.util.List<java.lang.Integer> list_i10 = player7.actionCardIndices();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player16 = new Player("hi!", (int)' ', dominionBoard15);
    boolean b17 = player16.actionsLeft();
    Card card18 = Card.mine;
    int i19 = card18.getCoins();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card23 = Card.adventurer;
    int i24 = card23.getCost();
    boolean b25 = dominionBoard22.availableCards(card23);
    player16.buyCard(card18, dominionBoard22);
    java.util.List<Card> list_card27 = dominionBoard22.allKC();
    Card card28 = player7.buyRandomCard(dominionBoard22);
    dominionBoard22.councilRoomHelper(3);
    java.util.List<Player> list_player31 = dominionBoard22.getPlayers();
    Player player32 = new Player("hi!", (int)(byte)-1, dominionBoard22);
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i36 = dominionBoard35.play();
    dominionBoard35.cutpurseHelper(10);
    Card card40 = Card.embargo;
    dominionBoard35.ambassadorHelper((int)(byte)10, card40);
    int i42 = card40.getCost();
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player48 = new Player("hi!", (int)' ', dominionBoard47);
    boolean b49 = player48.actionsLeft();
    int i50 = player48.getCoins();
    java.util.List<java.lang.Integer> list_i51 = player48.actionCardIndices();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player57 = new Player("hi!", (int)' ', dominionBoard56);
    boolean b58 = player57.actionsLeft();
    Card card59 = Card.mine;
    int i60 = card59.getCoins();
    DominionBoard dominionBoard63 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card64 = Card.adventurer;
    int i65 = card64.getCost();
    boolean b66 = dominionBoard63.availableCards(card64);
    player57.buyCard(card59, dominionBoard63);
    java.util.List<Card> list_card68 = dominionBoard63.allKC();
    Card card69 = player48.buyRandomCard(dominionBoard63);
    player48.treasureInHand();
    player48.discardCardsEndTurn();
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player75 = dominionBoard74.getPlayers();
    Card card76 = player48.buyRandomCard(dominionBoard74);
    player32.gainCardToHand(card40, dominionBoard74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.copper + "'", card28.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.embargo + "'", card40.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.mine + "'", card59.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.adventurer + "'", card64.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.copper + "'", card69.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.copper + "'", card76.equals(Card.copper));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    java.util.List<Player> list_player21 = dominionBoard11.players;
    Card card22 = Card.silver;
    dominionBoard11.takeCard(card22);
    dominionBoard11.cutpurseHelper(1);
    java.util.List<Player> list_player26 = dominionBoard11.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.silver + "'", card22.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    Card card0 = Card.ambassador;
    java.util.List<java.lang.String> list_str1 = card0.getTypes();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.ambassador + "'", card0.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str1);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.baron;
    Card card39 = Card.estate;
    Card card40 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    Card card66 = Card.cutpurse;
    Card card67 = Card.gardens;
    Card card68 = Card.silver;
    Card card69 = Card.curse;
    java.util.List<Card> list_card70 = dominionBoard37.kingdomCards(card38, card39, card40, card44, card47, card63, card66, card67, card68, card69);
    boolean b71 = player33.hasCard(card67);
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player75 = dominionBoard74.getPlayers();
    dominionBoard74.councilRoomHelper((int)'a');
    player5.gainCardToTopOfDeck(card67, dominionBoard74);
    java.util.List<Card> list_card80 = dominionBoard74.getHighestValueCards(15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.estate + "'", card39.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.baron + "'", card40.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.gardens + "'", card67.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.silver + "'", card68.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.curse + "'", card69.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    java.util.List<Card> list_card9 = player5.getHand();
    player5.newTurn();
    java.util.List<java.lang.Integer> list_i11 = player5.actionCardIndices();
    java.util.List<Card> list_card12 = player5.getHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionInHand();
    java.lang.String str7 = player5.getName();
    int i8 = player5.getBuys();
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    int i16 = player15.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 35);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("hi!", 152, dominionBoard4);
    Card card16 = player15.drawCardFromDeck();
    int i17 = player15.getBuys();
    Card card18 = null;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player24 = new Player("hi!", (int)' ', dominionBoard23);
    boolean b25 = player24.actionsLeft();
    int i26 = player24.getCoins();
    java.util.List<java.lang.Integer> list_i27 = player24.actionCardIndices();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    Card card35 = Card.mine;
    int i36 = card35.getCoins();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card40 = Card.adventurer;
    int i41 = card40.getCost();
    boolean b42 = dominionBoard39.availableCards(card40);
    player33.buyCard(card35, dominionBoard39);
    java.util.List<Card> list_card44 = dominionBoard39.allKC();
    Card card45 = player24.buyRandomCard(dominionBoard39);
    dominionBoard39.councilRoomHelper(3);
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card51 = Card.adventurer;
    int i52 = card51.getCost();
    boolean b53 = dominionBoard50.availableCards(card51);
    Card card54 = Card.smithy;
    int i55 = card54.getCost();
    dominionBoard50.trashCard(card54);
    DominionBoard dominionBoard61 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player62 = new Player("hi!", (int)' ', dominionBoard61);
    boolean b63 = player62.actionsLeft();
    Card card64 = Card.curse;
    DominionBoard dominionBoard67 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card69 = dominionBoard67.getHighestValueCards(2);
    player62.gainCard(card64, dominionBoard67);
    boolean b71 = dominionBoard50.availableCards(card64);
    dominionBoard39.takeCard(card64);
    Card card73 = Card.seahag;
    int i74 = card73.getCost();
    int i75 = card73.getVictory();
    int i76 = card73.getCoins();
    card73.addEmbargoToCard();
    boolean b78 = dominionBoard39.availableCards(card73);
    // The following exception was thrown during execution in test generation
    try {
    player15.buyCard(card18, dominionBoard39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.estate + "'", card16.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.mine + "'", card35.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.adventurer + "'", card40.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.adventurer + "'", card51.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.smithy + "'", card54.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.curse + "'", card64.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.seahag + "'", card73.equals(Card.seahag));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    int i16 = player5.getPlayerNumber();
    java.lang.String str17 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player3 = dominionBoard2.getPlayers();
    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i7 = dominionBoard6.play();
    Card card8 = Card.great_hall;
    card8.addEmbargoToCard();
    card8.addEmbargoToCard();
    dominionBoard6.takeCard(card8);
    dominionBoard6.finalScores();
    java.util.List<Player> list_player13 = dominionBoard6.players;
    dominionBoard2.players = list_player13;
    java.util.List<Card> list_card16 = dominionBoard2.getHighestValueCards(7);
    boolean b17 = dominionBoard2.gameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.great_hall + "'", card8.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    int i8 = card4.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 292);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    int i6 = player5.getPlayerNumber();
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 32);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card5 = Card.adventurer;
    int i6 = card5.getCost();
    boolean b7 = dominionBoard4.availableCards(card5);
    Card card8 = Card.smithy;
    int i9 = card8.getCost();
    dominionBoard4.trashCard(card8);
    dominionBoard4.cutpurseHelper((int)(byte)10);
    boolean b13 = dominionBoard4.gameOver();
    Player player14 = new Player("hi!", (int)(short)100, dominionBoard4);
    java.util.List<Card> list_card15 = dominionBoard4.allKC();
    int i16 = dominionBoard4.play();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.adventurer + "'", card5.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.smithy + "'", card8.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.curse;
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card14 = dominionBoard12.getHighestValueCards(2);
    player7.gainCard(card9, dominionBoard12);
    java.util.List<Player> list_player16 = dominionBoard12.players;
    Player player17 = new Player("hi!", 18, dominionBoard12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.curse + "'", card9.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("hi!", 152, dominionBoard4);
    Card card16 = player15.drawCardFromDeck();
    int i17 = player15.getBuys();
    Card card18 = null;
    boolean b19 = player15.hasCard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.estate + "'", card16.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    int i6 = player5.getBuys();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    DominionBoard dominionBoard45 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i46 = dominionBoard45.play();
    java.util.List<Player> list_player47 = dominionBoard45.getPlayers();
    dominionBoard45.finalScores();
    java.util.List<Card> list_card50 = dominionBoard45.getHighestValueCards((int)'a');
    dominionBoard45.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player53 = dominionBoard45.players;
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i57 = dominionBoard56.play();
    java.util.List<Player> list_player58 = dominionBoard56.getPlayers();
    dominionBoard56.finalScores();
    java.util.List<Card> list_card61 = dominionBoard56.getHighestValueCards((int)'a');
    dominionBoard45.setUpGame(list_card61, (int)(byte)0);
    player5.gainCardToHand(card39, dominionBoard45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.curse;
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card14 = dominionBoard12.getHighestValueCards(2);
    player7.gainCard(card9, dominionBoard12);
    java.util.List<Card> list_card16 = player7.getDiscard();
    int i17 = player7.getBuys();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player21 = dominionBoard20.getPlayers();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i25 = dominionBoard24.play();
    Card card26 = Card.great_hall;
    card26.addEmbargoToCard();
    card26.addEmbargoToCard();
    dominionBoard24.takeCard(card26);
    dominionBoard24.finalScores();
    java.util.List<Player> list_player31 = dominionBoard24.players;
    dominionBoard20.players = list_player31;
    java.util.List<Card> list_card34 = dominionBoard20.getHighestValueCards((int)(byte)10);
    Card card35 = player7.buyRandomCard(dominionBoard20);
    Player player36 = new Player("", 38, dominionBoard20);
    Card card37 = Card.silver;
    int i38 = card37.getCost();
    int i39 = card37.getEmbargo();
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i43 = dominionBoard42.play();
    Card card44 = Card.great_hall;
    card44.addEmbargoToCard();
    card44.addEmbargoToCard();
    dominionBoard42.takeCard(card44);
    dominionBoard42.finalScores();
    java.util.List<Player> list_player49 = dominionBoard42.players;
    DominionBoard dominionBoard54 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player55 = new Player("hi!", (int)' ', dominionBoard54);
    boolean b56 = player55.actionsLeft();
    int i57 = player55.getCoins();
    java.util.List<java.lang.Integer> list_i58 = player55.actionCardIndices();
    DominionBoard dominionBoard63 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player64 = new Player("hi!", (int)' ', dominionBoard63);
    boolean b65 = player64.actionsLeft();
    Card card66 = Card.mine;
    int i67 = card66.getCoins();
    DominionBoard dominionBoard70 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card71 = Card.adventurer;
    int i72 = card71.getCost();
    boolean b73 = dominionBoard70.availableCards(card71);
    player64.buyCard(card66, dominionBoard70);
    java.util.List<Card> list_card75 = dominionBoard70.allKC();
    Card card76 = player55.buyRandomCard(dominionBoard70);
    dominionBoard70.councilRoomHelper(3);
    java.util.List<Player> list_player79 = dominionBoard70.getPlayers();
    dominionBoard42.players = list_player79;
    player36.gainCardToHand(card37, dominionBoard42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.curse + "'", card9.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.great_hall + "'", card26.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.copper + "'", card35.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.silver + "'", card37.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.great_hall + "'", card44.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.mine + "'", card66.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    org.junit.Assert.assertTrue("'" + card71 + "' != '" + Card.adventurer + "'", card71.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.copper + "'", card76.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player79);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    player5.addActions((int)(short)0);
    player5.addActions((int)(short)-1);
    Card card60 = player5.drawCardFromDeck();
    java.util.List<java.lang.String> list_str61 = card60.getTypes();
    int i62 = card60.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.estate + "'", card60.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 18);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    dominionBoard2.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player10 = dominionBoard2.getPlayers();
    Card card11 = Card.adventurer;
    int i12 = card11.getCost();
    dominionBoard2.returnCard(card11);
    java.util.List<Card> list_card14 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.adventurer + "'", card11.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionInHand();
    java.lang.String str7 = player5.getName();
    int i8 = player5.getBuys();
    java.util.List<Card> list_card9 = player5.getDiscard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<Card> list_card45 = player5.getHand();
    Card card46 = Card.gardens;
    int i47 = card46.getCoins();
    card46.setVictory(10);
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player53 = dominionBoard52.getPlayers();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i57 = dominionBoard56.play();
    Card card58 = Card.great_hall;
    card58.addEmbargoToCard();
    card58.addEmbargoToCard();
    dominionBoard56.takeCard(card58);
    dominionBoard56.finalScores();
    java.util.List<Player> list_player63 = dominionBoard56.players;
    dominionBoard52.players = list_player63;
    java.util.List<Card> list_card66 = dominionBoard52.kingdomCards(4);
    player5.buyCard(card46, dominionBoard52);
    Card card68 = Card.mine;
    DominionBoard dominionBoard73 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player74 = new Player("hi!", (int)' ', dominionBoard73);
    Card card75 = Card.smithy;
    int i76 = card75.getCost();
    DominionBoard dominionBoard81 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player82 = new Player("hi!", (int)' ', dominionBoard81);
    boolean b83 = player82.actionsLeft();
    Card card84 = Card.mine;
    int i85 = card84.getCoins();
    DominionBoard dominionBoard88 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card89 = Card.adventurer;
    int i90 = card89.getCost();
    boolean b91 = dominionBoard88.availableCards(card89);
    player82.buyCard(card84, dominionBoard88);
    player74.gainCardToHand(card75, dominionBoard88);
    java.util.List<Card> list_card95 = dominionBoard88.kingdomCards(15);
    player5.gainCard(card68, dominionBoard88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.gardens + "'", card46.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.great_hall + "'", card58.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.mine + "'", card68.equals(Card.mine));
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.smithy + "'", card75.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.mine + "'", card84.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    org.junit.Assert.assertTrue("'" + card89 + "' != '" + Card.adventurer + "'", card89.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    java.util.LinkedList<Card> linkedlist_card9 = player5.getDeck();
    int i10 = player5.getActions();
    int i11 = player5.getTotalVictoryPoints();
    player5.newTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 24);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    java.util.LinkedList<Card> linkedlist_card31 = player20.getDeck();
    player20.addActions((int)(byte)-1);
    Card card34 = Card.cutpurse;
    int i35 = card34.getEmbargo();
    boolean b36 = player20.hasCard(card34);
    card34.addEmbargoToCard();
    dominionBoard10.returnCard(card34);
    java.util.List<Player> list_player39 = dominionBoard10.players;
    java.util.List<Card> list_card41 = dominionBoard10.getHighestValueCards((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card31);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(short)0);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(6);
    dominionBoard2.finalScores();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getBuys();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    dominionBoard18.players = list_player29;
    java.util.List<Card> list_card32 = dominionBoard18.getHighestValueCards((int)(byte)10);
    Card card33 = player5.buyRandomCard(dominionBoard18);
    Card card34 = Card.feast;
    java.util.List<java.lang.String> list_str35 = card34.getTypes();
    card34.setVictory(4);
    dominionBoard18.trashCard(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.feast + "'", card34.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str35);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    java.util.LinkedList<Card> linkedlist_card15 = player5.getDeck();
    int i16 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card5 = Card.adventurer;
    int i6 = card5.getCost();
    boolean b7 = dominionBoard4.availableCards(card5);
    Card card8 = Card.smithy;
    int i9 = card8.getCost();
    dominionBoard4.trashCard(card8);
    dominionBoard4.cutpurseHelper((int)(byte)10);
    Player player13 = new Player("hi!", (int)(short)1, dominionBoard4);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.adventurer + "'", card5.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.smithy + "'", card8.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(short)0);
    Card card3 = Card.council_room;
    int i4 = card3.getEmbargo();
    dominionBoard2.returnCard(card3);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.council_room + "'", card3.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    java.util.List<Card> list_card7 = dominionBoard4.kingdomCards(10);
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    java.util.LinkedList<Card> linkedlist_card24 = player13.getDeck();
    player13.addActions((int)(byte)-1);
    Card card27 = Card.cutpurse;
    int i28 = card27.getEmbargo();
    boolean b29 = player13.hasCard(card27);
    dominionBoard4.takeCard(card27);
    java.util.List<Player> list_player31 = dominionBoard4.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card24);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.cutpurse + "'", card27.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    java.util.List<java.lang.Integer> list_i9 = player5.actionCardIndices();
    boolean b10 = player5.actionsLeft();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    Card card15 = Card.smithy;
    int i16 = card15.getCost();
    dominionBoard11.trashCard(card15);
    boolean b18 = dominionBoard2.availableCards(card15);
    java.util.List<java.lang.String> list_str19 = card15.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.smithy + "'", card15.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    java.util.List<Player> list_player21 = dominionBoard11.players;
    Card card22 = Card.silver;
    dominionBoard11.takeCard(card22);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    Card card40 = Card.gold;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i44 = dominionBoard43.play();
    dominionBoard43.councilRoomHelper(100);
    java.util.List<Card> list_card47 = dominionBoard43.getNonEmptySupplyPiles();
    player29.gainCardToTopOfDeck(card40, dominionBoard43);
    java.util.List<Player> list_player49 = dominionBoard43.players;
    dominionBoard11.players = list_player49;
    java.util.List<Card> list_card52 = dominionBoard11.getHighestValueCards(219);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.silver + "'", card22.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.gold + "'", card40.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionInHand();
    Card card7 = Card.estate;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card11 = Card.baron;
    Card card12 = Card.estate;
    Card card13 = Card.baron;
    DominionBoard dominionBoard16 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card17 = Card.adventurer;
    int i18 = card17.getCost();
    boolean b19 = dominionBoard16.availableCards(card17);
    Card card20 = Card.baron;
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player26 = new Player("hi!", (int)' ', dominionBoard25);
    boolean b27 = player26.actionsLeft();
    Card card28 = Card.curse;
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card33 = dominionBoard31.getHighestValueCards(2);
    player26.gainCard(card28, dominionBoard31);
    java.util.List<Player> list_player35 = dominionBoard31.players;
    Card card36 = Card.curse;
    card36.addEmbargoToCard();
    dominionBoard31.takeCard(card36);
    Card card39 = Card.cutpurse;
    Card card40 = Card.gardens;
    Card card41 = Card.silver;
    Card card42 = Card.curse;
    java.util.List<Card> list_card43 = dominionBoard10.kingdomCards(card11, card12, card13, card17, card20, card36, card39, card40, card41, card42);
    DominionBoard dominionBoard46 = new DominionBoard((-1), (int)(short)0);
    java.util.List<Card> list_card48 = dominionBoard46.getHighestValueCards(6);
    dominionBoard10.setUpGame(list_card48, (int)(byte)-1);
    java.util.List<Card> list_card51 = dominionBoard10.allKC();
    dominionBoard10.cutpurseHelper(100);
    player5.gainCardToTopOfDeck(card7, dominionBoard10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.estate + "'", card7.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.baron + "'", card11.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.estate + "'", card12.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.baron + "'", card13.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.adventurer + "'", card17.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.baron + "'", card20.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.cutpurse + "'", card39.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.gardens + "'", card40.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.silver + "'", card41.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.curse + "'", card42.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    int i9 = player5.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.cutpurseHelper(10);
    Card card7 = Card.embargo;
    dominionBoard2.ambassadorHelper((int)(byte)10, card7);
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card13 = Card.baron;
    Card card14 = Card.estate;
    Card card15 = Card.baron;
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card19 = Card.adventurer;
    int i20 = card19.getCost();
    boolean b21 = dominionBoard18.availableCards(card19);
    Card card22 = Card.baron;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    boolean b29 = player28.actionsLeft();
    Card card30 = Card.curse;
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card35 = dominionBoard33.getHighestValueCards(2);
    player28.gainCard(card30, dominionBoard33);
    java.util.List<Player> list_player37 = dominionBoard33.players;
    Card card38 = Card.curse;
    card38.addEmbargoToCard();
    dominionBoard33.takeCard(card38);
    Card card41 = Card.cutpurse;
    Card card42 = Card.gardens;
    Card card43 = Card.silver;
    Card card44 = Card.curse;
    java.util.List<Card> list_card45 = dominionBoard12.kingdomCards(card13, card14, card15, card19, card22, card38, card41, card42, card43, card44);
    dominionBoard2.takeCard(card41);
    dominionBoard2.councilRoomHelper(44);
    dominionBoard2.cutpurseHelper(152);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.embargo + "'", card7.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.baron + "'", card13.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.estate + "'", card14.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.baron + "'", card15.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.adventurer + "'", card19.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.baron + "'", card22.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.curse + "'", card30.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.curse + "'", card38.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.cutpurse + "'", card41.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.gardens + "'", card42.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.silver + "'", card43.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.curse + "'", card44.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    java.util.List<Card> list_card28 = player5.getHand();
    Card card29 = Card.mine;
    java.util.List<java.lang.String> list_str30 = card29.getTypes();
    boolean b31 = player5.hasCard(card29);
    boolean b32 = player5.actionInHand();
    int i33 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.mine + "'", card29.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 32);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    int i7 = player5.getBuys();
    Card card8 = Card.cutpurse;
    int i9 = card8.getEmbargo();
    boolean b10 = player5.hasCard(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.cutpurse + "'", card8.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("hi!", 152, dominionBoard4);
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    java.lang.String str24 = player22.getName();
    DominionBoard dominionBoard29 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player30 = new Player("hi!", (int)' ', dominionBoard29);
    boolean b31 = player30.actionsLeft();
    Card card32 = Card.mine;
    int i33 = card32.getCoins();
    DominionBoard dominionBoard36 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card37 = Card.adventurer;
    int i38 = card37.getCost();
    boolean b39 = dominionBoard36.availableCards(card37);
    player30.buyCard(card32, dominionBoard36);
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.smithy;
    int i48 = card47.getCost();
    dominionBoard43.trashCard(card47);
    dominionBoard43.cutpurseHelper((int)(byte)10);
    player22.gainCardToTopOfDeck(card32, dominionBoard43);
    Card card53 = player22.drawCardFromDeck();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i57 = dominionBoard56.play();
    Card card58 = Card.great_hall;
    card58.addEmbargoToCard();
    card58.addEmbargoToCard();
    dominionBoard56.takeCard(card58);
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i65 = dominionBoard64.play();
    dominionBoard64.cutpurseHelper(10);
    Card card69 = Card.embargo;
    dominionBoard64.ambassadorHelper((int)(byte)10, card69);
    player22.gainCardToHand(card58, dominionBoard64);
    Card card72 = Card.province;
    DominionBoard dominionBoard75 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i76 = dominionBoard75.play();
    java.util.List<Player> list_player77 = dominionBoard75.getPlayers();
    dominionBoard75.finalScores();
    java.util.List<Card> list_card80 = dominionBoard75.getHighestValueCards((int)'a');
    dominionBoard75.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player83 = dominionBoard75.getPlayers();
    Card card84 = Card.adventurer;
    int i85 = card84.getCost();
    dominionBoard75.returnCard(card84);
    player22.gainCard(card72, dominionBoard75);
    java.util.List<java.lang.String> list_str88 = card72.getTypes();
    dominionBoard4.ambassadorHelper(5, card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "hi!"+ "'", str24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.mine + "'", card32.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.smithy + "'", card47.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.mine + "'", card53.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.great_hall + "'", card58.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.embargo + "'", card69.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.province + "'", card72.equals(Card.province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player83);
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.adventurer + "'", card84.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str88);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("hi!", 152, dominionBoard4);
    Card card16 = player15.drawCardFromDeck();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player23 = new Player("hi!", (int)' ', dominionBoard22);
    Card card24 = Card.smithy;
    int i25 = card24.getCost();
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player31 = new Player("hi!", (int)' ', dominionBoard30);
    boolean b32 = player31.actionsLeft();
    Card card33 = Card.mine;
    int i34 = card33.getCoins();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.adventurer;
    int i39 = card38.getCost();
    boolean b40 = dominionBoard37.availableCards(card38);
    player31.buyCard(card33, dominionBoard37);
    player23.gainCardToHand(card24, dominionBoard37);
    java.util.List<Card> list_card44 = dominionBoard37.kingdomCards(15);
    java.util.List<Card> list_card46 = dominionBoard37.kingdomCards((int)(short)-1);
    Card card47 = Card.great_hall;
    card47.addEmbargoToCard();
    card47.addEmbargoToCard();
    dominionBoard37.trashCard(card47);
    // The following exception was thrown during execution in test generation
    try {
    player15.playCard((int)(short)10, dominionBoard37);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.estate + "'", card16.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.smithy + "'", card24.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.mine + "'", card33.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.adventurer + "'", card38.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.great_hall + "'", card47.equals(Card.great_hall));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player16 = new Player("hi!", (int)' ', dominionBoard15);
    boolean b17 = player16.actionsLeft();
    Card card18 = Card.curse;
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card23 = dominionBoard21.getHighestValueCards(2);
    player16.gainCard(card18, dominionBoard21);
    dominionBoard2.ambassadorHelper((int)(byte)0, card18);
    boolean b26 = dominionBoard2.gameOver();
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player32 = new Player("hi!", (int)' ', dominionBoard31);
    boolean b33 = player32.actionsLeft();
    DominionBoard dominionBoard36 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card37 = Card.baron;
    Card card38 = Card.estate;
    Card card39 = Card.baron;
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card43 = Card.adventurer;
    int i44 = card43.getCost();
    boolean b45 = dominionBoard42.availableCards(card43);
    Card card46 = Card.baron;
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player52 = new Player("hi!", (int)' ', dominionBoard51);
    boolean b53 = player52.actionsLeft();
    Card card54 = Card.curse;
    DominionBoard dominionBoard57 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card59 = dominionBoard57.getHighestValueCards(2);
    player52.gainCard(card54, dominionBoard57);
    java.util.List<Player> list_player61 = dominionBoard57.players;
    Card card62 = Card.curse;
    card62.addEmbargoToCard();
    dominionBoard57.takeCard(card62);
    Card card65 = Card.cutpurse;
    Card card66 = Card.gardens;
    Card card67 = Card.silver;
    Card card68 = Card.curse;
    java.util.List<Card> list_card69 = dominionBoard36.kingdomCards(card37, card38, card39, card43, card46, card62, card65, card66, card67, card68);
    boolean b70 = player32.hasCard(card66);
    boolean b71 = dominionBoard2.availableCards(card66);
    int i72 = card66.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.curse + "'", card18.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.baron + "'", card37.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.estate + "'", card38.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.baron + "'", card39.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.adventurer + "'", card43.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.baron + "'", card46.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.curse + "'", card54.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player61);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.curse + "'", card62.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.cutpurse + "'", card65.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.gardens + "'", card66.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.silver + "'", card67.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.curse + "'", card68.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 21);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    Player player18 = new Player("hi!", (int)(short)1, dominionBoard13);
    java.util.List<Card> list_card19 = dominionBoard13.getNonEmptySupplyPiles();
    dominionBoard13.cutpurseHelper(36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getDiscard();
    boolean b45 = player5.currentBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    player5.discardCardsEndTurn();
    int i10 = player5.getTotalVictoryPoints();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player16 = new Player("hi!", (int)' ', dominionBoard15);
    player16.treasureInHand();
    Card card18 = Card.embargo;
    boolean b19 = player16.hasCard(card18);
    player5.discard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 24);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.embargo + "'", card18.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.adventurer;
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i10 = dominionBoard9.play();
    Card card12 = Card.mine;
    int i13 = card12.getCoins();
    dominionBoard9.ambassadorHelper(15, card12);
    player5.buyCard(card6, dominionBoard9);
    java.util.List<Player> list_player16 = dominionBoard9.getPlayers();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.adventurer + "'", card6.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.mine + "'", card12.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    boolean b48 = player5.currentBuys();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    int i56 = player54.getCoins();
    java.util.List<java.lang.Integer> list_i57 = player54.actionCardIndices();
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player63 = new Player("hi!", (int)' ', dominionBoard62);
    boolean b64 = player63.actionsLeft();
    Card card65 = Card.mine;
    int i66 = card65.getCoins();
    DominionBoard dominionBoard69 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card70 = Card.adventurer;
    int i71 = card70.getCost();
    boolean b72 = dominionBoard69.availableCards(card70);
    player63.buyCard(card65, dominionBoard69);
    java.util.List<Card> list_card74 = dominionBoard69.allKC();
    Card card75 = player54.buyRandomCard(dominionBoard69);
    player54.treasureInHand();
    player54.discardCardsEndTurn();
    DominionBoard dominionBoard80 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player81 = dominionBoard80.getPlayers();
    Card card82 = player54.buyRandomCard(dominionBoard80);
    Card card83 = player5.buyRandomCard(dominionBoard80);
    int i84 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.mine + "'", card65.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.adventurer + "'", card70.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.copper + "'", card75.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player81);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.copper + "'", card82.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.copper + "'", card83.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    boolean b28 = player5.actionsLeft();
    player5.treasureInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    Card card44 = null;
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player48 = dominionBoard47.getPlayers();
    // The following exception was thrown during execution in test generation
    try {
    player5.buyCard(card44, dominionBoard47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    boolean b16 = player5.actionInHand();
    boolean b17 = player5.actionsLeft();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player23 = new Player("hi!", (int)' ', dominionBoard22);
    player23.treasureInHand();
    Card card25 = Card.duchy;
    boolean b26 = player23.hasCard(card25);
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player32 = new Player("hi!", (int)' ', dominionBoard31);
    boolean b33 = player32.actionsLeft();
    java.lang.String str34 = player32.getName();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player40 = new Player("hi!", (int)' ', dominionBoard39);
    boolean b41 = player40.actionsLeft();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card47 = Card.adventurer;
    int i48 = card47.getCost();
    boolean b49 = dominionBoard46.availableCards(card47);
    player40.buyCard(card42, dominionBoard46);
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card54 = Card.adventurer;
    int i55 = card54.getCost();
    boolean b56 = dominionBoard53.availableCards(card54);
    Card card57 = Card.smithy;
    int i58 = card57.getCost();
    dominionBoard53.trashCard(card57);
    dominionBoard53.cutpurseHelper((int)(byte)10);
    player32.gainCardToTopOfDeck(card42, dominionBoard53);
    player5.gainCard(card25, dominionBoard53);
    int i64 = card25.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.duchy + "'", card25.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "hi!"+ "'", str34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.adventurer + "'", card47.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.adventurer + "'", card54.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.smithy + "'", card57.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 3);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    dominionBoard2.trashCard(card6);
    card6.setVictory(0);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    int i14 = player5.getTotalVictoryPoints();
    boolean b15 = player5.actionsLeft();
    java.lang.String str16 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 121);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.councilRoomHelper(100);
    java.util.List<Card> list_card6 = dominionBoard2.getNonEmptySupplyPiles();
    dominionBoard2.cutpurseHelper((int)'a');
    java.util.List<Card> list_card9 = dominionBoard2.getNonEmptySupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    int i23 = player5.getPlayerNumber();
    Card card24 = Card.estate;
    boolean b25 = player5.hasCard(card24);
    player5.addActions(32);
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    int i35 = player33.getCoins();
    java.util.List<java.lang.Integer> list_i36 = player33.actionCardIndices();
    DominionBoard dominionBoard41 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player42 = new Player("hi!", (int)' ', dominionBoard41);
    boolean b43 = player42.actionsLeft();
    Card card44 = Card.mine;
    int i45 = card44.getCoins();
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card49 = Card.adventurer;
    int i50 = card49.getCost();
    boolean b51 = dominionBoard48.availableCards(card49);
    player42.buyCard(card44, dominionBoard48);
    java.util.List<Card> list_card53 = dominionBoard48.allKC();
    Card card54 = player33.buyRandomCard(dominionBoard48);
    // The following exception was thrown during execution in test generation
    try {
    Card card55 = player5.buyRandomCard(dominionBoard48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 32);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.estate + "'", card24.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.mine + "'", card44.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.adventurer + "'", card49.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.copper + "'", card54.equals(Card.copper));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getCardsPlayed();
    int i45 = player5.getPlayerNumber();
    player5.newTurn();
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    java.lang.String str48 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "hi!"+ "'", str48.equals("hi!"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    player5.discardCardsEndTurn();
    Card card10 = Card.great_hall;
    java.util.List<java.lang.String> list_str11 = card10.getTypes();
    int i12 = card10.getEmbargo();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i16 = dominionBoard15.play();
    dominionBoard15.councilRoomHelper(100);
    java.util.List<Card> list_card19 = dominionBoard15.getNonEmptySupplyPiles();
    dominionBoard15.cutpurseHelper((int)'a');
    player5.gainCardToTopOfDeck(card10, dominionBoard15);
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    boolean b29 = player28.actionsLeft();
    Card card30 = Card.mine;
    int i31 = card30.getCoins();
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card35 = Card.adventurer;
    int i36 = card35.getCost();
    boolean b37 = dominionBoard34.availableCards(card35);
    player28.buyCard(card30, dominionBoard34);
    java.util.LinkedList<Card> linkedlist_card39 = player28.getDeck();
    player28.addActions((int)(byte)-1);
    Card card42 = Card.cutpurse;
    int i43 = card42.getEmbargo();
    boolean b44 = player28.hasCard(card42);
    player28.treasureInHand();
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card49 = Card.adventurer;
    int i50 = card49.getCost();
    boolean b51 = dominionBoard48.availableCards(card49);
    Card card52 = Card.smithy;
    int i53 = card52.getCost();
    dominionBoard48.trashCard(card52);
    DominionBoard dominionBoard57 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i58 = dominionBoard57.play();
    java.util.List<Player> list_player59 = dominionBoard57.getPlayers();
    dominionBoard57.finalScores();
    java.util.List<Card> list_card62 = dominionBoard57.getHighestValueCards((int)'a');
    dominionBoard57.seaHagHelper((int)(short)0);
    dominionBoard57.seaHagHelper(0);
    player28.gainCard(card52, dominionBoard57);
    int i68 = player28.getActions();
    java.util.LinkedList<Card> linkedlist_card69 = player28.getDeck();
    dominionBoard15.setUpGame((java.util.List<Card>)linkedlist_card69, 24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.great_hall + "'", card10.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 326);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.mine + "'", card30.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.adventurer + "'", card35.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card39);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.adventurer + "'", card49.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.smithy + "'", card52.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card69);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    java.util.List<Card> list_card7 = dominionBoard4.kingdomCards(10);
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.curse;
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card20 = dominionBoard18.getHighestValueCards(2);
    player13.gainCard(card15, dominionBoard18);
    java.util.List<Player> list_player22 = dominionBoard18.players;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    boolean b29 = player28.actionsLeft();
    Card card30 = Card.mine;
    int i31 = card30.getCoins();
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card35 = Card.adventurer;
    int i36 = card35.getCost();
    boolean b37 = dominionBoard34.availableCards(card35);
    player28.buyCard(card30, dominionBoard34);
    Card card39 = Card.gold;
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i43 = dominionBoard42.play();
    dominionBoard42.councilRoomHelper(100);
    java.util.List<Card> list_card46 = dominionBoard42.getNonEmptySupplyPiles();
    player28.gainCardToTopOfDeck(card39, dominionBoard42);
    card39.addEmbargoToCard();
    boolean b49 = dominionBoard18.availableCards(card39);
    dominionBoard4.trashCard(card39);
    Card card51 = Card.gardens;
    dominionBoard4.takeCard(card51);
    dominionBoard4.seaHagHelper(121);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.curse + "'", card15.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.mine + "'", card30.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.adventurer + "'", card35.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gold + "'", card39.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.gardens + "'", card51.equals(Card.gardens));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i13 = dominionBoard12.play();
    Card card14 = Card.great_hall;
    card14.addEmbargoToCard();
    card14.addEmbargoToCard();
    dominionBoard12.takeCard(card14);
    dominionBoard12.finalScores();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    player25.treasureInHand();
    Card card27 = Card.duchy;
    boolean b28 = player25.hasCard(card27);
    dominionBoard12.ambassadorHelper((int)(byte)10, card27);
    boolean b30 = dominionBoard2.availableCards(card27);
    java.util.List<Player> list_player31 = dominionBoard2.players;
    java.util.List<Card> list_card32 = dominionBoard2.getNonEmptySupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.great_hall + "'", card14.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.duchy + "'", card27.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.duchy;
    boolean b8 = player5.hasCard(card7);
    int i9 = player5.getCoins();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    Card card16 = Card.cutpurse;
    card16.setVictory((-1));
    player15.discard(card16);
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    player5.gainCard(card16, dominionBoard22);
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player36 = new Player("hi!", (int)' ', dominionBoard35);
    boolean b37 = player36.actionsLeft();
    Card card38 = Card.mine;
    int i39 = card38.getCoins();
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card43 = Card.adventurer;
    int i44 = card43.getCost();
    boolean b45 = dominionBoard42.availableCards(card43);
    player36.buyCard(card38, dominionBoard42);
    java.util.LinkedList<Card> linkedlist_card47 = player36.getDeck();
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    boolean b66 = player36.hasCard(card63);
    player36.treasureInHand();
    Card card68 = Card.adventurer;
    java.util.List<java.lang.String> list_str69 = card68.getTypes();
    int i70 = card68.getCoins();
    boolean b71 = player36.hasCard(card68);
    Card card72 = player36.drawCardFromDeck();
    boolean b73 = player5.hasCard(card72);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.duchy + "'", card7.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.mine + "'", card38.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.adventurer + "'", card43.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.adventurer + "'", card68.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.copper + "'", card72.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    boolean b8 = dominionBoard2.gameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    int i28 = player5.getPlayerNumber();
    Card card29 = player5.drawCardFromDeck();
    int i30 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 32);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.copper + "'", card29.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.LinkedList<Card> linkedlist_card8 = player5.getDeck();
    java.util.List<java.lang.Integer> list_i9 = player5.actionCardIndices();
    int i10 = player5.getBuys();
    int i11 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player50 = new Player("hi!", (int)' ', dominionBoard49);
    boolean b51 = player50.actionsLeft();
    Card card52 = Card.mine;
    int i53 = card52.getCoins();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card57 = Card.adventurer;
    int i58 = card57.getCost();
    boolean b59 = dominionBoard56.availableCards(card57);
    player50.buyCard(card52, dominionBoard56);
    java.util.LinkedList<Card> linkedlist_card61 = player50.getDeck();
    player50.addActions((int)(byte)-1);
    Card card64 = Card.cutpurse;
    int i65 = card64.getEmbargo();
    boolean b66 = player50.hasCard(card64);
    card64.addEmbargoToCard();
    dominionBoard34.takeCard(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.mine + "'", card52.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.adventurer + "'", card57.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card61);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.cutpurse + "'", card64.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    player5.addActions((int)(short)0);
    player5.addActions((int)(short)-1);
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player65 = new Player("hi!", (int)' ', dominionBoard64);
    boolean b66 = player65.actionsLeft();
    Card card67 = Card.curse;
    DominionBoard dominionBoard70 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card72 = dominionBoard70.getHighestValueCards(2);
    player65.gainCard(card67, dominionBoard70);
    java.util.List<Card> list_card74 = player65.getDiscard();
    int i75 = player65.getBuys();
    DominionBoard dominionBoard78 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player79 = dominionBoard78.getPlayers();
    DominionBoard dominionBoard82 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i83 = dominionBoard82.play();
    Card card84 = Card.great_hall;
    card84.addEmbargoToCard();
    card84.addEmbargoToCard();
    dominionBoard82.takeCard(card84);
    dominionBoard82.finalScores();
    java.util.List<Player> list_player89 = dominionBoard82.players;
    dominionBoard78.players = list_player89;
    java.util.List<Card> list_card92 = dominionBoard78.getHighestValueCards((int)(byte)10);
    Card card93 = player65.buyRandomCard(dominionBoard78);
    boolean b94 = player5.hasCard(card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.curse + "'", card67.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.great_hall + "'", card84.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    org.junit.Assert.assertTrue("'" + card93 + "' != '" + Card.copper + "'", card93.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    java.util.List<Card> list_card56 = player5.getDiscard();
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    Card card15 = Card.smithy;
    int i16 = card15.getCost();
    dominionBoard11.trashCard(card15);
    boolean b18 = dominionBoard2.availableCards(card15);
    int i19 = card15.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.smithy + "'", card15.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    dominionBoard2.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player10 = dominionBoard2.getPlayers();
    java.util.List<Card> list_card12 = dominionBoard2.getHighestValueCards((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    boolean b25 = player5.currentBuys();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card7 = Card.baron;
    Card card8 = Card.estate;
    Card card9 = Card.baron;
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card13 = Card.adventurer;
    int i14 = card13.getCost();
    boolean b15 = dominionBoard12.availableCards(card13);
    Card card16 = Card.baron;
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    Card card35 = Card.cutpurse;
    Card card36 = Card.gardens;
    Card card37 = Card.silver;
    Card card38 = Card.curse;
    java.util.List<Card> list_card39 = dominionBoard6.kingdomCards(card7, card8, card9, card13, card16, card32, card35, card36, card37, card38);
    dominionBoard2.ambassadorHelper((int)'4', card36);
    dominionBoard2.councilRoomHelper(6);
    dominionBoard2.finalScores();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.baron + "'", card7.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.estate + "'", card8.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.baron + "'", card9.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.adventurer + "'", card13.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.baron + "'", card16.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.cutpurse + "'", card35.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.silver + "'", card37.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.curse + "'", card38.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player34 = dominionBoard33.getPlayers();
    Card card36 = Card.great_hall;
    java.util.List<java.lang.String> list_str37 = card36.getTypes();
    dominionBoard33.ambassadorHelper((-1), card36);
    dominionBoard26.returnCard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card57 = dominionBoard51.kingdomCards(1);
    java.util.List<Player> list_player58 = dominionBoard51.players;
    player5.gainCardToTopOfDeck(card36, dominionBoard51);
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player65 = new Player("hi!", (int)' ', dominionBoard64);
    player65.treasureInHand();
    Card card67 = Card.embargo;
    boolean b68 = player65.hasCard(card67);
    boolean b69 = dominionBoard51.availableCards(card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.embargo + "'", card67.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    int i14 = player5.getTotalVictoryPoints();
    java.lang.String str15 = player5.getName();
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 121);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!"+ "'", str15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player34 = dominionBoard33.getPlayers();
    Card card36 = Card.great_hall;
    java.util.List<java.lang.String> list_str37 = card36.getTypes();
    dominionBoard33.ambassadorHelper((-1), card36);
    dominionBoard26.returnCard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card57 = dominionBoard51.kingdomCards(1);
    java.util.List<Player> list_player58 = dominionBoard51.players;
    player5.gainCardToTopOfDeck(card36, dominionBoard51);
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player65 = new Player("hi!", (int)' ', dominionBoard64);
    boolean b66 = player65.actionsLeft();
    Card card67 = Card.mine;
    int i68 = card67.getCoins();
    DominionBoard dominionBoard71 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card72 = Card.adventurer;
    int i73 = card72.getCost();
    boolean b74 = dominionBoard71.availableCards(card72);
    player65.buyCard(card67, dominionBoard71);
    java.util.LinkedList<Card> linkedlist_card76 = player65.getDeck();
    DominionBoard dominionBoard81 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player82 = new Player("hi!", (int)' ', dominionBoard81);
    boolean b83 = player82.actionsLeft();
    Card card84 = Card.curse;
    DominionBoard dominionBoard87 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card89 = dominionBoard87.getHighestValueCards(2);
    player82.gainCard(card84, dominionBoard87);
    java.util.List<Player> list_player91 = dominionBoard87.players;
    Card card92 = Card.curse;
    card92.addEmbargoToCard();
    dominionBoard87.takeCard(card92);
    boolean b95 = player65.hasCard(card92);
    int i96 = card92.getVictory();
    dominionBoard51.takeCard(card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.mine + "'", card67.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.adventurer + "'", card72.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.curse + "'", card84.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);
    org.junit.Assert.assertTrue("'" + card92 + "' != '" + Card.curse + "'", card92.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 97);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    dominionBoard2.seaHagHelper((int)(short)0);
    dominionBoard2.seaHagHelper(0);
    DominionBoard dominionBoard16 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player17 = new Player("hi!", (int)' ', dominionBoard16);
    boolean b18 = player17.actionsLeft();
    Card card19 = Card.mine;
    int i20 = card19.getCoins();
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card24 = Card.adventurer;
    int i25 = card24.getCost();
    boolean b26 = dominionBoard23.availableCards(card24);
    player17.buyCard(card19, dominionBoard23);
    java.util.LinkedList<Card> linkedlist_card28 = player17.getDeck();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player34 = new Player("hi!", (int)' ', dominionBoard33);
    boolean b35 = player34.actionsLeft();
    Card card36 = Card.curse;
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card41 = dominionBoard39.getHighestValueCards(2);
    player34.gainCard(card36, dominionBoard39);
    java.util.List<Player> list_player43 = dominionBoard39.players;
    Card card44 = Card.curse;
    card44.addEmbargoToCard();
    dominionBoard39.takeCard(card44);
    boolean b47 = player17.hasCard(card44);
    int i48 = card44.getVictory();
    int i49 = card44.getCoins();
    dominionBoard2.returnCard(card44);
    dominionBoard2.seaHagHelper(124);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.mine + "'", card19.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.adventurer + "'", card24.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.curse + "'", card44.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    java.util.List<java.lang.Integer> list_i56 = player5.actionCardIndices();
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card60 = Card.baron;
    Card card61 = Card.estate;
    Card card62 = Card.baron;
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card66 = Card.adventurer;
    int i67 = card66.getCost();
    boolean b68 = dominionBoard65.availableCards(card66);
    Card card69 = Card.baron;
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player75 = new Player("hi!", (int)' ', dominionBoard74);
    boolean b76 = player75.actionsLeft();
    Card card77 = Card.curse;
    DominionBoard dominionBoard80 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card82 = dominionBoard80.getHighestValueCards(2);
    player75.gainCard(card77, dominionBoard80);
    java.util.List<Player> list_player84 = dominionBoard80.players;
    Card card85 = Card.curse;
    card85.addEmbargoToCard();
    dominionBoard80.takeCard(card85);
    Card card88 = Card.cutpurse;
    Card card89 = Card.gardens;
    Card card90 = Card.silver;
    Card card91 = Card.curse;
    java.util.List<Card> list_card92 = dominionBoard59.kingdomCards(card60, card61, card62, card66, card69, card85, card88, card89, card90, card91);
    player5.discard(card66);
    java.util.LinkedList<Card> linkedlist_card94 = player5.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i56);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.baron + "'", card60.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.estate + "'", card61.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.baron + "'", card62.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.adventurer + "'", card66.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.baron + "'", card69.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + card77 + "' != '" + Card.curse + "'", card77.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player84);
    org.junit.Assert.assertTrue("'" + card85 + "' != '" + Card.curse + "'", card85.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card88 + "' != '" + Card.cutpurse + "'", card88.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card89 + "' != '" + Card.gardens + "'", card89.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card90 + "' != '" + Card.silver + "'", card90.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card91 + "' != '" + Card.curse + "'", card91.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card94);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    player5.discardCardsEndTurn();
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player32 = dominionBoard31.getPlayers();
    Card card33 = player5.buyRandomCard(dominionBoard31);
    int i34 = card33.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    Card card16 = Card.seahag;
    int i17 = card16.getCost();
    int i18 = card16.getVictory();
    int i19 = card16.getCoins();
    card16.addEmbargoToCard();
    player5.discard(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.seahag + "'", card16.equals(Card.seahag));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    dominionBoard2.cutpurseHelper((-5));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    dominionBoard11.councilRoomHelper(100);
    java.util.List<Player> list_player18 = dominionBoard11.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    int i36 = card32.getVictory();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i22 = dominionBoard21.play();
    Card card23 = Card.great_hall;
    card23.addEmbargoToCard();
    card23.addEmbargoToCard();
    dominionBoard21.takeCard(card23);
    dominionBoard21.councilRoomHelper((int)(short)0);
    player5.buyCard(card17, dominionBoard21);
    java.util.List<Player> list_player30 = dominionBoard21.players;
    java.util.List<Player> list_player31 = dominionBoard21.getPlayers();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.great_hall + "'", card23.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.councilRoomHelper((int)(short)0);
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card13 = Card.baron;
    Card card14 = Card.estate;
    Card card15 = Card.baron;
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card19 = Card.adventurer;
    int i20 = card19.getCost();
    boolean b21 = dominionBoard18.availableCards(card19);
    Card card22 = Card.baron;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    boolean b29 = player28.actionsLeft();
    Card card30 = Card.curse;
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card35 = dominionBoard33.getHighestValueCards(2);
    player28.gainCard(card30, dominionBoard33);
    java.util.List<Player> list_player37 = dominionBoard33.players;
    Card card38 = Card.curse;
    card38.addEmbargoToCard();
    dominionBoard33.takeCard(card38);
    Card card41 = Card.cutpurse;
    Card card42 = Card.gardens;
    Card card43 = Card.silver;
    Card card44 = Card.curse;
    java.util.List<Card> list_card45 = dominionBoard12.kingdomCards(card13, card14, card15, card19, card22, card38, card41, card42, card43, card44);
    boolean b46 = dominionBoard2.availableCards(card43);
    int i47 = card43.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.baron + "'", card13.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.estate + "'", card14.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.baron + "'", card15.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.adventurer + "'", card19.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.baron + "'", card22.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.curse + "'", card30.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.curse + "'", card38.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.cutpurse + "'", card41.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.gardens + "'", card42.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.silver + "'", card43.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.curse + "'", card44.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 16);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player3 = dominionBoard2.getPlayers();
    dominionBoard2.councilRoomHelper((int)'a');
    int i6 = dominionBoard2.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    Card card0 = Card.curse;
    java.util.List<java.lang.String> list_str1 = card0.getTypes();
    card0.addEmbargoToCard();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.curse + "'", card0.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str1);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    Card card36 = Card.gardens;
    int i37 = card36.getCoins();
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i41 = dominionBoard40.play();
    Card card42 = Card.great_hall;
    card42.addEmbargoToCard();
    card42.addEmbargoToCard();
    dominionBoard40.takeCard(card42);
    dominionBoard40.finalScores();
    player5.gainCardToTopOfDeck(card36, dominionBoard40);
    int i48 = card36.getCoins();
    int i49 = card36.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.great_hall + "'", card42.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 21);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card5 = Card.baron;
    Card card6 = Card.estate;
    Card card7 = Card.baron;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card11 = Card.adventurer;
    int i12 = card11.getCost();
    boolean b13 = dominionBoard10.availableCards(card11);
    Card card14 = Card.baron;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.curse;
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card27 = dominionBoard25.getHighestValueCards(2);
    player20.gainCard(card22, dominionBoard25);
    java.util.List<Player> list_player29 = dominionBoard25.players;
    Card card30 = Card.curse;
    card30.addEmbargoToCard();
    dominionBoard25.takeCard(card30);
    Card card33 = Card.cutpurse;
    Card card34 = Card.gardens;
    Card card35 = Card.silver;
    Card card36 = Card.curse;
    java.util.List<Card> list_card37 = dominionBoard4.kingdomCards(card5, card6, card7, card11, card14, card30, card33, card34, card35, card36);
    DominionBoard dominionBoard40 = new DominionBoard((-1), (int)(short)0);
    java.util.List<Card> list_card42 = dominionBoard40.getHighestValueCards(6);
    dominionBoard4.setUpGame(list_card42, (int)(byte)-1);
    java.util.List<Card> list_card45 = dominionBoard4.allKC();
    Player player46 = new Player("", (int)(byte)0, dominionBoard4);
    java.util.List<Card> list_card47 = player46.getHand();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.baron + "'", card7.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.adventurer + "'", card11.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.baron + "'", card14.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.curse + "'", card22.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.curse + "'", card30.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.cutpurse + "'", card33.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.gardens + "'", card34.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.silver + "'", card35.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    int i15 = player5.getCoins();
    java.util.List<Card> list_card16 = player5.getDiscard();
    boolean b17 = player5.actionsLeft();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    Card card15 = Card.curse;
    card15.addEmbargoToCard();
    dominionBoard10.takeCard(card15);
    card15.setVictory(188);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.curse + "'", card15.equals(Card.curse));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player3 = dominionBoard2.getPlayers();
    java.util.List<Card> list_card4 = dominionBoard2.allKC();
    java.util.List<Card> list_card5 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.cutpurseHelper(10);
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    Card card13 = Card.mine;
    int i14 = card13.getCoins();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    player11.buyCard(card13, dominionBoard17);
    java.util.List<Card> list_card23 = dominionBoard17.kingdomCards(1);
    dominionBoard2.setUpGame(list_card23, (int)(byte)1);
    dominionBoard2.finalScores();
    DominionBoard dominionBoard31 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player32 = new Player("hi!", (int)' ', dominionBoard31);
    boolean b33 = player32.actionsLeft();
    Card card34 = Card.mine;
    int i35 = card34.getCoins();
    DominionBoard dominionBoard38 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card39 = Card.adventurer;
    int i40 = card39.getCost();
    boolean b41 = dominionBoard38.availableCards(card39);
    player32.buyCard(card34, dominionBoard38);
    java.util.List<Card> list_card44 = dominionBoard38.kingdomCards(1);
    java.util.List<Player> list_player45 = dominionBoard38.players;
    dominionBoard2.players = list_player45;
    Card card47 = Card.adventurer;
    java.util.List<java.lang.String> list_str48 = card47.getTypes();
    int i49 = card47.getCoins();
    dominionBoard2.takeCard(card47);
    java.util.List<java.lang.String> list_str51 = card47.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.mine + "'", card13.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.mine + "'", card34.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.adventurer + "'", card39.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.adventurer + "'", card47.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str51);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player3 = dominionBoard2.getPlayers();
    java.util.List<Card> list_card4 = dominionBoard2.allKC();
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    Card card13 = Card.mine;
    int i14 = card13.getCoins();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    player11.buyCard(card13, dominionBoard17);
    Card card22 = Card.gold;
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i26 = dominionBoard25.play();
    dominionBoard25.councilRoomHelper(100);
    java.util.List<Card> list_card29 = dominionBoard25.getNonEmptySupplyPiles();
    player11.gainCardToTopOfDeck(card22, dominionBoard25);
    int i31 = player11.getTotalVictoryPoints();
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    Card card36 = Card.great_hall;
    card36.addEmbargoToCard();
    card36.addEmbargoToCard();
    dominionBoard34.takeCard(card36);
    dominionBoard34.finalScores();
    boolean b41 = dominionBoard34.gameOver();
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i45 = dominionBoard44.play();
    Card card46 = Card.great_hall;
    card46.addEmbargoToCard();
    card46.addEmbargoToCard();
    dominionBoard44.takeCard(card46);
    dominionBoard44.finalScores();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player57 = new Player("hi!", (int)' ', dominionBoard56);
    player57.treasureInHand();
    Card card59 = Card.duchy;
    boolean b60 = player57.hasCard(card59);
    dominionBoard44.ambassadorHelper((int)(byte)10, card59);
    boolean b62 = dominionBoard34.availableCards(card59);
    player11.discard(card59);
    dominionBoard2.ambassadorHelper((-5), card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.mine + "'", card13.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.gold + "'", card22.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.great_hall + "'", card46.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.duchy + "'", card59.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    java.util.List<Card> list_card7 = dominionBoard4.kingdomCards(10);
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    java.util.LinkedList<Card> linkedlist_card24 = player13.getDeck();
    player13.addActions((int)(byte)-1);
    Card card27 = Card.cutpurse;
    int i28 = card27.getEmbargo();
    boolean b29 = player13.hasCard(card27);
    dominionBoard4.takeCard(card27);
    boolean b31 = dominionBoard4.gameOver();
    dominionBoard4.finalScores();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card24);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.cutpurse + "'", card27.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getCardsPlayed();
    Card card45 = player5.drawCardFromDeck();
    int i46 = player5.getBuys();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    Card card56 = Card.mine;
    int i57 = card56.getCoins();
    DominionBoard dominionBoard60 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card61 = Card.adventurer;
    int i62 = card61.getCost();
    boolean b63 = dominionBoard60.availableCards(card61);
    player54.buyCard(card56, dominionBoard60);
    dominionBoard60.councilRoomHelper(100);
    Player player67 = new Player("", (int)(byte)0, dominionBoard60);
    Card card68 = player67.drawCardFromDeck();
    int i69 = card68.getCost();
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player75 = new Player("hi!", (int)' ', dominionBoard74);
    boolean b76 = player75.actionsLeft();
    int i77 = player75.getCoins();
    java.util.List<Card> list_card78 = player75.getHand();
    player75.discardCardsEndTurn();
    Card card80 = Card.great_hall;
    java.util.List<java.lang.String> list_str81 = card80.getTypes();
    int i82 = card80.getEmbargo();
    DominionBoard dominionBoard85 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i86 = dominionBoard85.play();
    dominionBoard85.councilRoomHelper(100);
    java.util.List<Card> list_card89 = dominionBoard85.getNonEmptySupplyPiles();
    dominionBoard85.cutpurseHelper((int)'a');
    player75.gainCardToTopOfDeck(card80, dominionBoard85);
    Card card93 = Card.great_hall;
    java.util.List<java.lang.String> list_str94 = card93.getTypes();
    int i95 = card93.getEmbargo();
    dominionBoard85.returnCard(card93);
    player5.gainCardToTopOfDeck(card68, dominionBoard85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.mine + "'", card56.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.adventurer + "'", card61.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.copper + "'", card68.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.great_hall + "'", card80.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 372);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    org.junit.Assert.assertTrue("'" + card93 + "' != '" + Card.great_hall + "'", card93.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 373);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    player5.addActions((int)(short)0);
    Card card58 = Card.seahag;
    int i59 = card58.getCost();
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card64 = dominionBoard62.getHighestValueCards(2);
    java.util.List<Player> list_player65 = dominionBoard62.players;
    player5.gainCardToTopOfDeck(card58, dominionBoard62);
    player5.newTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.seahag + "'", card58.equals(Card.seahag));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player65);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player21 = new Player("hi!", (int)' ', dominionBoard20);
    player21.treasureInHand();
    Card card23 = Card.duchy;
    boolean b24 = player21.hasCard(card23);
    DominionBoard dominionBoard29 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player30 = new Player("hi!", (int)' ', dominionBoard29);
    boolean b31 = player30.actionsLeft();
    Card card32 = Card.mine;
    int i33 = card32.getCoins();
    DominionBoard dominionBoard36 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card37 = Card.adventurer;
    int i38 = card37.getCost();
    boolean b39 = dominionBoard36.availableCards(card37);
    player30.buyCard(card32, dominionBoard36);
    Card card41 = Card.gold;
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i45 = dominionBoard44.play();
    dominionBoard44.councilRoomHelper(100);
    java.util.List<Card> list_card48 = dominionBoard44.getNonEmptySupplyPiles();
    player30.gainCardToTopOfDeck(card41, dominionBoard44);
    java.util.List<Card> list_card50 = dominionBoard44.allKC();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card54 = Card.baron;
    Card card55 = Card.estate;
    Card card56 = Card.baron;
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card60 = Card.adventurer;
    int i61 = card60.getCost();
    boolean b62 = dominionBoard59.availableCards(card60);
    Card card63 = Card.baron;
    DominionBoard dominionBoard68 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player69 = new Player("hi!", (int)' ', dominionBoard68);
    boolean b70 = player69.actionsLeft();
    Card card71 = Card.curse;
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card76 = dominionBoard74.getHighestValueCards(2);
    player69.gainCard(card71, dominionBoard74);
    java.util.List<Player> list_player78 = dominionBoard74.players;
    Card card79 = Card.curse;
    card79.addEmbargoToCard();
    dominionBoard74.takeCard(card79);
    Card card82 = Card.cutpurse;
    Card card83 = Card.gardens;
    Card card84 = Card.silver;
    Card card85 = Card.curse;
    java.util.List<Card> list_card86 = dominionBoard53.kingdomCards(card54, card55, card56, card60, card63, card79, card82, card83, card84, card85);
    dominionBoard44.returnCard(card82);
    player21.discard(card82);
    boolean b89 = player15.hasCard(card82);
    player15.treasureInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.duchy + "'", card23.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.mine + "'", card32.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.gold + "'", card41.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.baron + "'", card54.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.estate + "'", card55.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.baron + "'", card56.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.adventurer + "'", card60.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.baron + "'", card63.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + card71 + "' != '" + Card.curse + "'", card71.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player78);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.curse + "'", card79.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.cutpurse + "'", card82.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.gardens + "'", card83.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.silver + "'", card84.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card85 + "' != '" + Card.curse + "'", card85.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.embargo;
    boolean b8 = player5.hasCard(card7);
    java.util.List<Card> list_card9 = player5.getDiscard();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i15 = dominionBoard14.play();
    Card card16 = Card.great_hall;
    card16.addEmbargoToCard();
    card16.addEmbargoToCard();
    dominionBoard14.takeCard(card16);
    dominionBoard14.finalScores();
    boolean b21 = dominionBoard14.gameOver();
    boolean b22 = dominionBoard14.gameOver();
    java.util.List<Player> list_player23 = dominionBoard14.getPlayers();
    java.util.List<Player> list_player24 = dominionBoard14.getPlayers();
    Player player25 = new Player("hi!", 152, dominionBoard14);
    Card card26 = player25.drawCardFromDeck();
    DominionBoard dominionBoard29 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i30 = dominionBoard29.play();
    dominionBoard29.cutpurseHelper(10);
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player38 = new Player("hi!", (int)' ', dominionBoard37);
    boolean b39 = player38.actionsLeft();
    Card card40 = Card.mine;
    int i41 = card40.getCoins();
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card45 = Card.adventurer;
    int i46 = card45.getCost();
    boolean b47 = dominionBoard44.availableCards(card45);
    player38.buyCard(card40, dominionBoard44);
    java.util.List<Card> list_card50 = dominionBoard44.kingdomCards(1);
    dominionBoard29.setUpGame(list_card50, (int)(byte)1);
    dominionBoard29.finalScores();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player59 = new Player("hi!", (int)' ', dominionBoard58);
    boolean b60 = player59.actionsLeft();
    Card card61 = Card.mine;
    int i62 = card61.getCoins();
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card66 = Card.adventurer;
    int i67 = card66.getCost();
    boolean b68 = dominionBoard65.availableCards(card66);
    player59.buyCard(card61, dominionBoard65);
    java.util.List<Card> list_card71 = dominionBoard65.kingdomCards(1);
    java.util.List<Player> list_player72 = dominionBoard65.players;
    dominionBoard29.players = list_player72;
    Card card74 = Card.adventurer;
    java.util.List<java.lang.String> list_str75 = card74.getTypes();
    int i76 = card74.getCoins();
    dominionBoard29.takeCard(card74);
    player5.gainCardToTopOfDeck(card26, dominionBoard29);
    Card card79 = player5.drawCardFromDeck();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.embargo + "'", card7.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.great_hall + "'", card16.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player24);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.mine + "'", card40.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.adventurer + "'", card45.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.mine + "'", card61.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.adventurer + "'", card66.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player72);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.adventurer + "'", card74.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.copper + "'", card79.equals(Card.copper));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getDiscard();
    int i45 = player5.getActions();
    DominionBoard dominionBoard50 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player51 = new Player("hi!", (int)' ', dominionBoard50);
    boolean b52 = player51.actionsLeft();
    int i53 = player51.getCoins();
    java.util.List<java.lang.Integer> list_i54 = player51.actionCardIndices();
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player60 = new Player("hi!", (int)' ', dominionBoard59);
    boolean b61 = player60.actionsLeft();
    Card card62 = Card.mine;
    int i63 = card62.getCoins();
    DominionBoard dominionBoard66 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card67 = Card.adventurer;
    int i68 = card67.getCost();
    boolean b69 = dominionBoard66.availableCards(card67);
    player60.buyCard(card62, dominionBoard66);
    java.util.List<Card> list_card71 = dominionBoard66.allKC();
    Card card72 = player51.buyRandomCard(dominionBoard66);
    java.util.List<java.lang.Integer> list_i73 = player51.actionCardIndices();
    Card card74 = Card.cutpurse;
    card74.setVictory((-1));
    boolean b77 = player51.hasCard(card74);
    java.util.List<Card> list_card78 = player51.getHand();
    Card card79 = Card.adventurer;
    java.util.List<java.lang.String> list_str80 = card79.getTypes();
    boolean b81 = player51.hasCard(card79);
    int i82 = card79.getVictory();
    player5.discard(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.mine + "'", card62.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.adventurer + "'", card67.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.copper + "'", card72.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i73);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.cutpurse + "'", card74.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.adventurer + "'", card79.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == (-5));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    java.util.List<Card> list_card16 = player5.getCardsPlayed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player3 = dominionBoard2.getPlayers();
    dominionBoard2.councilRoomHelper((int)'a');
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player9 = dominionBoard8.getPlayers();
    Card card11 = Card.great_hall;
    java.util.List<java.lang.String> list_str12 = card11.getTypes();
    dominionBoard8.ambassadorHelper((-1), card11);
    boolean b14 = dominionBoard2.availableCards(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.great_hall + "'", card11.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    DominionBoard dominionBoard38 = new DominionBoard((-1), (int)(short)0);
    java.util.List<Card> list_card40 = dominionBoard38.getHighestValueCards(6);
    dominionBoard2.setUpGame(list_card40, (int)(byte)-1);
    java.util.List<Card> list_card43 = dominionBoard2.allKC();
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card47 = Card.baron;
    Card card48 = Card.estate;
    Card card49 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card53 = Card.adventurer;
    int i54 = card53.getCost();
    boolean b55 = dominionBoard52.availableCards(card53);
    Card card56 = Card.baron;
    DominionBoard dominionBoard61 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player62 = new Player("hi!", (int)' ', dominionBoard61);
    boolean b63 = player62.actionsLeft();
    Card card64 = Card.curse;
    DominionBoard dominionBoard67 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card69 = dominionBoard67.getHighestValueCards(2);
    player62.gainCard(card64, dominionBoard67);
    java.util.List<Player> list_player71 = dominionBoard67.players;
    Card card72 = Card.curse;
    card72.addEmbargoToCard();
    dominionBoard67.takeCard(card72);
    Card card75 = Card.cutpurse;
    Card card76 = Card.gardens;
    Card card77 = Card.silver;
    Card card78 = Card.curse;
    java.util.List<Card> list_card79 = dominionBoard46.kingdomCards(card47, card48, card49, card53, card56, card72, card75, card76, card77, card78);
    java.util.List<Card> list_card80 = dominionBoard46.allKC();
    dominionBoard2.setUpGame(list_card80, 266);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.estate + "'", card48.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.baron + "'", card49.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.adventurer + "'", card53.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.baron + "'", card56.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.curse + "'", card64.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player71);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.curse + "'", card72.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.cutpurse + "'", card75.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.gardens + "'", card76.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card77 + "' != '" + Card.silver + "'", card77.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card78 + "' != '" + Card.curse + "'", card78.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    java.util.LinkedList<Card> linkedlist_card18 = player7.getDeck();
    player7.addActions((int)(byte)-1);
    Card card21 = Card.cutpurse;
    int i22 = card21.getEmbargo();
    boolean b23 = player7.hasCard(card21);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    java.util.LinkedList<Card> linkedlist_card40 = player29.getDeck();
    player29.addActions((int)(byte)-1);
    Card card43 = Card.cutpurse;
    int i44 = card43.getEmbargo();
    boolean b45 = player29.hasCard(card43);
    player29.treasureInHand();
    int i47 = player29.getPlayerNumber();
    Card card48 = Card.estate;
    boolean b49 = player29.hasCard(card48);
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i53 = dominionBoard52.play();
    Card card54 = Card.great_hall;
    card54.addEmbargoToCard();
    card54.addEmbargoToCard();
    dominionBoard52.takeCard(card54);
    dominionBoard52.councilRoomHelper(0);
    player7.buyCard(card48, dominionBoard52);
    Player player61 = new Player("hi!", 3, dominionBoard52);
    player61.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card40);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.cutpurse + "'", card43.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 32);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.estate + "'", card48.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.great_hall + "'", card54.equals(Card.great_hall));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.curse;
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card14 = dominionBoard12.getHighestValueCards(2);
    player7.gainCard(card9, dominionBoard12);
    java.util.List<Card> list_card16 = player7.getDiscard();
    int i17 = player7.getBuys();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player21 = dominionBoard20.getPlayers();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i25 = dominionBoard24.play();
    Card card26 = Card.great_hall;
    card26.addEmbargoToCard();
    card26.addEmbargoToCard();
    dominionBoard24.takeCard(card26);
    dominionBoard24.finalScores();
    java.util.List<Player> list_player31 = dominionBoard24.players;
    dominionBoard20.players = list_player31;
    java.util.List<Card> list_card34 = dominionBoard20.getHighestValueCards((int)(byte)10);
    Card card35 = player7.buyRandomCard(dominionBoard20);
    Player player36 = new Player("", 38, dominionBoard20);
    player36.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.curse + "'", card9.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.great_hall + "'", card26.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.copper + "'", card35.equals(Card.copper));

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.duchy;
    boolean b8 = player5.hasCard(card7);
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    Card card25 = Card.gold;
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i29 = dominionBoard28.play();
    dominionBoard28.councilRoomHelper(100);
    java.util.List<Card> list_card32 = dominionBoard28.getNonEmptySupplyPiles();
    player14.gainCardToTopOfDeck(card25, dominionBoard28);
    java.util.List<Card> list_card34 = dominionBoard28.allKC();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.baron;
    Card card39 = Card.estate;
    Card card40 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    Card card66 = Card.cutpurse;
    Card card67 = Card.gardens;
    Card card68 = Card.silver;
    Card card69 = Card.curse;
    java.util.List<Card> list_card70 = dominionBoard37.kingdomCards(card38, card39, card40, card44, card47, card63, card66, card67, card68, card69);
    dominionBoard28.returnCard(card66);
    player5.discard(card66);
    player5.newTurn();
    int i74 = player5.getCoins();
    boolean b75 = player5.actionInHand();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.duchy + "'", card7.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.estate + "'", card39.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.baron + "'", card40.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.gardens + "'", card67.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.silver + "'", card68.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.curse + "'", card69.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    boolean b10 = dominionBoard2.gameOver();
    java.util.List<Player> list_player11 = dominionBoard2.getPlayers();
    java.util.List<Player> list_player12 = dominionBoard2.getPlayers();
    java.util.List<Card> list_card13 = dominionBoard2.getNonEmptySupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    boolean b10 = dominionBoard2.gameOver();
    java.util.List<Player> list_player11 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    java.util.List<Player> list_player21 = dominionBoard11.players;
    Card card22 = Card.silver;
    dominionBoard11.takeCard(card22);
    dominionBoard11.cutpurseHelper(1);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i29 = dominionBoard28.play();
    Card card30 = Card.great_hall;
    card30.addEmbargoToCard();
    card30.addEmbargoToCard();
    dominionBoard28.takeCard(card30);
    dominionBoard28.finalScores();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player40 = new Player("hi!", (int)' ', dominionBoard39);
    boolean b41 = player40.actionsLeft();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card47 = Card.adventurer;
    int i48 = card47.getCost();
    boolean b49 = dominionBoard46.availableCards(card47);
    player40.buyCard(card42, dominionBoard46);
    java.util.LinkedList<Card> linkedlist_card51 = player40.getDeck();
    dominionBoard28.setUpGame((java.util.List<Card>)linkedlist_card51, (int)(byte)10);
    dominionBoard11.setUpGame((java.util.List<Card>)linkedlist_card51, (int)(byte)10);
    DominionBoard dominionBoard60 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player61 = new Player("hi!", (int)' ', dominionBoard60);
    boolean b62 = player61.actionsLeft();
    Card card63 = Card.curse;
    DominionBoard dominionBoard66 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card68 = dominionBoard66.getHighestValueCards(2);
    player61.gainCard(card63, dominionBoard66);
    int i70 = player61.getTotalVictoryPoints();
    java.util.List<Card> list_card71 = player61.getDiscard();
    dominionBoard11.setUpGame(list_card71, 104);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.silver + "'", card22.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.great_hall + "'", card30.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.adventurer + "'", card47.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 191);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    player5.treasureInHand();
    player5.newTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    java.util.List<java.lang.Integer> list_i9 = player5.actionCardIndices();
    java.util.List<Card> list_card10 = player5.getHand();
    DominionBoard dominionBoard13 = new DominionBoard((-1), (int)(short)0);
    boolean b14 = dominionBoard13.gameOver();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    Card card21 = Card.cutpurse;
    card21.setVictory((-1));
    player20.discard(card21);
    java.util.List<Card> list_card25 = player20.getHand();
    dominionBoard13.setUpGame(list_card25, 5);
    java.util.List<Card> list_card28 = dominionBoard13.getNonEmptySupplyPiles();
    java.util.List<Player> list_player29 = dominionBoard13.players;
    Card card30 = player5.buyRandomCard(dominionBoard13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.copper + "'", card30.equals(Card.copper));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    java.util.LinkedList<Card> linkedlist_card18 = player7.getDeck();
    player7.addActions((int)(byte)-1);
    Card card21 = Card.cutpurse;
    int i22 = card21.getEmbargo();
    boolean b23 = player7.hasCard(card21);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    java.util.LinkedList<Card> linkedlist_card40 = player29.getDeck();
    player29.addActions((int)(byte)-1);
    Card card43 = Card.cutpurse;
    int i44 = card43.getEmbargo();
    boolean b45 = player29.hasCard(card43);
    player29.treasureInHand();
    int i47 = player29.getPlayerNumber();
    Card card48 = Card.estate;
    boolean b49 = player29.hasCard(card48);
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i53 = dominionBoard52.play();
    Card card54 = Card.great_hall;
    card54.addEmbargoToCard();
    card54.addEmbargoToCard();
    dominionBoard52.takeCard(card54);
    dominionBoard52.councilRoomHelper(0);
    player7.buyCard(card48, dominionBoard52);
    Player player61 = new Player("hi!", 3, dominionBoard52);
    java.util.LinkedList<Card> linkedlist_card62 = player61.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card40);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.cutpurse + "'", card43.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 32);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.estate + "'", card48.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.great_hall + "'", card54.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card62);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    Card card0 = Card.feast;
    java.util.List<java.lang.String> list_str1 = card0.getTypes();
    card0.setVictory(4);
    int i4 = card0.getVictory();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.feast + "'", card0.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.cutpurse;
    card6.setVictory((-1));
    player5.discard(card6);
    int i10 = player5.getActions();
    int i11 = player5.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.cutpurse + "'", card6.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    int i9 = player7.getCoins();
    java.util.List<java.lang.Integer> list_i10 = player7.actionCardIndices();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player16 = new Player("hi!", (int)' ', dominionBoard15);
    boolean b17 = player16.actionsLeft();
    Card card18 = Card.mine;
    int i19 = card18.getCoins();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card23 = Card.adventurer;
    int i24 = card23.getCost();
    boolean b25 = dominionBoard22.availableCards(card23);
    player16.buyCard(card18, dominionBoard22);
    java.util.List<Card> list_card27 = dominionBoard22.allKC();
    Card card28 = player7.buyRandomCard(dominionBoard22);
    dominionBoard22.councilRoomHelper(3);
    java.util.List<Player> list_player31 = dominionBoard22.getPlayers();
    Player player32 = new Player("hi!", (int)(byte)-1, dominionBoard22);
    dominionBoard22.finalScores();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.copper + "'", card28.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    dominionBoard2.trashCard(card6);
    Card card9 = Card.silver;
    dominionBoard2.returnCard(card9);
    card9.setVictory(121);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.silver + "'", card9.equals(Card.silver));

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    dominionBoard2.trashCard(card6);
    boolean b9 = dominionBoard2.gameOver();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player34 = dominionBoard33.getPlayers();
    Card card36 = Card.great_hall;
    java.util.List<java.lang.String> list_str37 = card36.getTypes();
    dominionBoard33.ambassadorHelper((-1), card36);
    dominionBoard26.returnCard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card57 = dominionBoard51.kingdomCards(1);
    java.util.List<Player> list_player58 = dominionBoard51.players;
    player5.gainCardToTopOfDeck(card36, dominionBoard51);
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player65 = new Player("hi!", (int)' ', dominionBoard64);
    boolean b66 = player65.actionsLeft();
    Card card67 = Card.curse;
    DominionBoard dominionBoard70 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card72 = dominionBoard70.getHighestValueCards(2);
    player65.gainCard(card67, dominionBoard70);
    java.util.List<Player> list_player74 = dominionBoard70.players;
    Card card75 = Card.curse;
    card75.addEmbargoToCard();
    dominionBoard70.takeCard(card75);
    Card card78 = player5.buyRandomCard(dominionBoard70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.curse + "'", card67.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player74);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.curse + "'", card75.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card78 + "' != '" + Card.copper + "'", card78.equals(Card.copper));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    dominionBoard2.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player10 = dominionBoard2.players;
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i14 = dominionBoard13.play();
    java.util.List<Player> list_player15 = dominionBoard13.getPlayers();
    dominionBoard13.finalScores();
    java.util.List<Card> list_card18 = dominionBoard13.getHighestValueCards((int)'a');
    dominionBoard2.setUpGame(list_card18, (int)(byte)0);
    java.util.List<Card> list_card21 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card38 = Card.baron;
    Card card39 = Card.estate;
    Card card40 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card44 = Card.adventurer;
    int i45 = card44.getCost();
    boolean b46 = dominionBoard43.availableCards(card44);
    Card card47 = Card.baron;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    boolean b54 = player53.actionsLeft();
    Card card55 = Card.curse;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card60 = dominionBoard58.getHighestValueCards(2);
    player53.gainCard(card55, dominionBoard58);
    java.util.List<Player> list_player62 = dominionBoard58.players;
    Card card63 = Card.curse;
    card63.addEmbargoToCard();
    dominionBoard58.takeCard(card63);
    Card card66 = Card.cutpurse;
    Card card67 = Card.gardens;
    Card card68 = Card.silver;
    Card card69 = Card.curse;
    java.util.List<Card> list_card70 = dominionBoard37.kingdomCards(card38, card39, card40, card44, card47, card63, card66, card67, card68, card69);
    boolean b71 = player33.hasCard(card67);
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player75 = dominionBoard74.getPlayers();
    dominionBoard74.councilRoomHelper((int)'a');
    player5.gainCardToTopOfDeck(card67, dominionBoard74);
    Card card79 = player5.drawCardFromDeck();
    Card card80 = player5.drawCardFromDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.estate + "'", card39.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.baron + "'", card40.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.adventurer + "'", card44.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.baron + "'", card47.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.curse + "'", card55.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.curse + "'", card63.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.gardens + "'", card67.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.silver + "'", card68.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.curse + "'", card69.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player75);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.gardens + "'", card79.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.copper + "'", card80.equals(Card.copper));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    Card card0 = Card.mine;
    int i1 = card0.getVictory();
    java.util.List<java.lang.String> list_str2 = card0.getTypes();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.mine + "'", card0.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.treasureInHand();
    Card card37 = Card.adventurer;
    java.util.List<java.lang.String> list_str38 = card37.getTypes();
    int i39 = card37.getCoins();
    boolean b40 = player5.hasCard(card37);
    Card card41 = player5.drawCardFromDeck();
    boolean b42 = player5.currentBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    Card card35 = Card.mine;
    int i36 = card35.getCoins();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card40 = Card.adventurer;
    int i41 = card40.getCost();
    boolean b42 = dominionBoard39.availableCards(card40);
    player33.buyCard(card35, dominionBoard39);
    java.util.LinkedList<Card> linkedlist_card44 = player33.getDeck();
    player33.addActions((int)(byte)-1);
    Card card47 = Card.cutpurse;
    int i48 = card47.getEmbargo();
    boolean b49 = player33.hasCard(card47);
    DominionBoard dominionBoard52 = new DominionBoard((-1), (int)(short)0);
    boolean b53 = dominionBoard52.gameOver();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player59 = new Player("hi!", (int)' ', dominionBoard58);
    Card card60 = Card.cutpurse;
    card60.setVictory((-1));
    player59.discard(card60);
    java.util.List<Card> list_card64 = player59.getHand();
    dominionBoard52.setUpGame(list_card64, 5);
    java.util.List<Card> list_card67 = dominionBoard52.getNonEmptySupplyPiles();
    int i68 = dominionBoard52.play();
    player5.gainCardToTopOfDeck(card47, dominionBoard52);
    card47.setVictory(134);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.mine + "'", card35.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.adventurer + "'", card40.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card44);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.cutpurse + "'", card60.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    player5.addActions((int)(short)0);
    player5.addActions((int)(short)-1);
    int i60 = player5.getBuys();
    int i61 = player5.getCoins();
    Card card62 = Card.gardens;
    int i63 = card62.getCoins();
    player5.discard(card62);
    boolean b65 = player5.actionsLeft();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.gardens + "'", card62.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.smithy;
    int i22 = card21.getCost();
    dominionBoard17.trashCard(card21);
    player5.discard(card21);
    int i25 = player5.getCoins();
    int i26 = player5.getCoins();
    boolean b27 = player5.currentBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.smithy + "'", card21.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    player5.treasureInHand();
    java.util.List<Card> list_card49 = player5.getCardsPlayed();
    boolean b50 = player5.currentBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.treasureInHand();
    Card card37 = Card.adventurer;
    java.util.List<java.lang.String> list_str38 = card37.getTypes();
    int i39 = card37.getCoins();
    boolean b40 = player5.hasCard(card37);
    player5.newTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getBuys();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    dominionBoard18.players = list_player29;
    java.util.List<Card> list_card32 = dominionBoard18.getHighestValueCards((int)(byte)10);
    Card card33 = player5.buyRandomCard(dominionBoard18);
    boolean b34 = dominionBoard18.gameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getBuys();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    dominionBoard18.players = list_player29;
    java.util.List<Card> list_card32 = dominionBoard18.getHighestValueCards((int)(byte)10);
    Card card33 = player5.buyRandomCard(dominionBoard18);
    int i34 = player5.getCoins();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player40 = new Player("hi!", (int)' ', dominionBoard39);
    player40.treasureInHand();
    Card card42 = Card.embargo;
    boolean b43 = player40.hasCard(card42);
    int i44 = card42.getEmbargo();
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    int i56 = player54.getCoins();
    java.util.List<java.lang.Integer> list_i57 = player54.actionCardIndices();
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player63 = new Player("hi!", (int)' ', dominionBoard62);
    boolean b64 = player63.actionsLeft();
    Card card65 = Card.mine;
    int i66 = card65.getCoins();
    DominionBoard dominionBoard69 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card70 = Card.adventurer;
    int i71 = card70.getCost();
    boolean b72 = dominionBoard69.availableCards(card70);
    player63.buyCard(card65, dominionBoard69);
    java.util.List<Card> list_card74 = dominionBoard69.allKC();
    Card card75 = player54.buyRandomCard(dominionBoard69);
    player54.treasureInHand();
    int i77 = player54.getPlayerNumber();
    int i78 = player54.getBuys();
    java.lang.String str79 = player54.getName();
    DominionBoard dominionBoard82 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i83 = dominionBoard82.play();
    Card card84 = Card.great_hall;
    card84.addEmbargoToCard();
    card84.addEmbargoToCard();
    dominionBoard82.takeCard(card84);
    dominionBoard82.councilRoomHelper((int)(short)0);
    Card card90 = player54.buyRandomCard(dominionBoard82);
    card90.setVictory(0);
    dominionBoard47.trashCard(card90);
    player5.buyCard(card42, dominionBoard47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.embargo + "'", card42.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 104);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.mine + "'", card65.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.adventurer + "'", card70.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.copper + "'", card75.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "hi!"+ "'", str79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.great_hall + "'", card84.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card90 + "' != '" + Card.copper + "'", card90.equals(Card.copper));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    java.util.LinkedList<Card> linkedlist_card15 = player5.getDeck();
    java.lang.String str16 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    int i6 = player5.getBuys();
    int i7 = player5.getCoins();
    int i8 = player5.getActions();
    boolean b9 = player5.currentBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    int i28 = player5.getPlayerNumber();
    int i29 = player5.getBuys();
    java.lang.String str30 = player5.getName();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i34 = dominionBoard33.play();
    Card card35 = Card.great_hall;
    card35.addEmbargoToCard();
    card35.addEmbargoToCard();
    dominionBoard33.takeCard(card35);
    dominionBoard33.councilRoomHelper((int)(short)0);
    Card card41 = player5.buyRandomCard(dominionBoard33);
    player5.addActions(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!"+ "'", str30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.great_hall + "'", card35.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.adventurer;
    int i4 = card3.getCost();
    boolean b5 = dominionBoard2.availableCards(card3);
    java.util.List<Card> list_card6 = dominionBoard2.allKC();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card5 = Card.adventurer;
    int i6 = card5.getCost();
    boolean b7 = dominionBoard4.availableCards(card5);
    Card card8 = Card.smithy;
    int i9 = card8.getCost();
    dominionBoard4.trashCard(card8);
    dominionBoard4.cutpurseHelper((int)(byte)10);
    boolean b13 = dominionBoard4.gameOver();
    Player player14 = new Player("hi!", (int)(short)100, dominionBoard4);
    java.util.List<Card> list_card16 = dominionBoard4.getHighestValueCards(38);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.adventurer + "'", card5.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.smithy + "'", card8.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    int i27 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    boolean b16 = player15.actionInHand();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    Card card24 = Card.smithy;
    int i25 = card24.getCost();
    dominionBoard20.trashCard(card24);
    dominionBoard20.cutpurseHelper((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    player15.playCard(36, dominionBoard20);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.smithy + "'", card24.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    java.util.List<Card> list_card7 = dominionBoard4.kingdomCards(10);
    java.util.List<Player> list_player8 = dominionBoard4.players;
    dominionBoard4.councilRoomHelper((int)(byte)100);
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i14 = dominionBoard13.play();
    Card card15 = Card.great_hall;
    card15.addEmbargoToCard();
    card15.addEmbargoToCard();
    dominionBoard13.takeCard(card15);
    dominionBoard13.finalScores();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    int i27 = player25.getCoins();
    java.util.List<Card> list_card28 = player25.getHand();
    player25.discardCardsEndTurn();
    Card card30 = Card.great_hall;
    java.util.List<java.lang.String> list_str31 = card30.getTypes();
    int i32 = card30.getEmbargo();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i36 = dominionBoard35.play();
    dominionBoard35.councilRoomHelper(100);
    java.util.List<Card> list_card39 = dominionBoard35.getNonEmptySupplyPiles();
    dominionBoard35.cutpurseHelper((int)'a');
    player25.gainCardToTopOfDeck(card30, dominionBoard35);
    Card card43 = Card.great_hall;
    java.util.List<java.lang.String> list_str44 = card43.getTypes();
    int i45 = card43.getEmbargo();
    dominionBoard35.returnCard(card43);
    java.util.List<Player> list_player47 = dominionBoard35.players;
    dominionBoard13.players = list_player47;
    dominionBoard4.players = list_player47;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.great_hall + "'", card15.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.great_hall + "'", card30.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 430);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.great_hall + "'", card43.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 431);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    player5.treasureInHand();
    Card card7 = Card.duchy;
    boolean b8 = player5.hasCard(card7);
    int i9 = player5.getCoins();
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    Card card16 = Card.cutpurse;
    card16.setVictory((-1));
    player15.discard(card16);
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i23 = dominionBoard22.play();
    Card card24 = Card.great_hall;
    card24.addEmbargoToCard();
    card24.addEmbargoToCard();
    dominionBoard22.takeCard(card24);
    dominionBoard22.finalScores();
    java.util.List<Player> list_player29 = dominionBoard22.players;
    player5.gainCard(card16, dominionBoard22);
    DominionBoard dominionBoard36 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player37 = new Player("hi!", (int)' ', dominionBoard36);
    boolean b38 = player37.actionsLeft();
    int i39 = player37.getCoins();
    java.util.List<java.lang.Integer> list_i40 = player37.actionCardIndices();
    DominionBoard dominionBoard45 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player46 = new Player("hi!", (int)' ', dominionBoard45);
    boolean b47 = player46.actionsLeft();
    Card card48 = Card.mine;
    int i49 = card48.getCoins();
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card53 = Card.adventurer;
    int i54 = card53.getCost();
    boolean b55 = dominionBoard52.availableCards(card53);
    player46.buyCard(card48, dominionBoard52);
    java.util.List<Card> list_card57 = dominionBoard52.allKC();
    Card card58 = player37.buyRandomCard(dominionBoard52);
    player37.treasureInHand();
    int i60 = player37.getPlayerNumber();
    int i61 = player37.getBuys();
    java.lang.String str62 = player37.getName();
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i66 = dominionBoard65.play();
    Card card67 = Card.great_hall;
    card67.addEmbargoToCard();
    card67.addEmbargoToCard();
    dominionBoard65.takeCard(card67);
    dominionBoard65.councilRoomHelper((int)(short)0);
    Card card73 = player37.buyRandomCard(dominionBoard65);
    int i74 = player37.getTotalVictoryPoints();
    Card card75 = Card.mine;
    boolean b76 = player37.hasCard(card75);
    dominionBoard22.ambassadorHelper(219, card75);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.duchy + "'", card7.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.great_hall + "'", card24.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.mine + "'", card48.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.adventurer + "'", card53.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.copper + "'", card58.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "hi!"+ "'", str62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.great_hall + "'", card67.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.copper + "'", card73.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 3);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.mine + "'", card75.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    dominionBoard44.finalScores();
    java.util.List<Card> list_card49 = dominionBoard44.getHighestValueCards(125);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    int i23 = player5.getPlayerNumber();
    java.util.LinkedList<Card> linkedlist_card24 = player5.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card24);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    java.util.List<Card> list_card25 = dominionBoard19.allKC();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card29 = Card.baron;
    Card card30 = Card.estate;
    Card card31 = Card.baron;
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card35 = Card.adventurer;
    int i36 = card35.getCost();
    boolean b37 = dominionBoard34.availableCards(card35);
    Card card38 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player44 = new Player("hi!", (int)' ', dominionBoard43);
    boolean b45 = player44.actionsLeft();
    Card card46 = Card.curse;
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card51 = dominionBoard49.getHighestValueCards(2);
    player44.gainCard(card46, dominionBoard49);
    java.util.List<Player> list_player53 = dominionBoard49.players;
    Card card54 = Card.curse;
    card54.addEmbargoToCard();
    dominionBoard49.takeCard(card54);
    Card card57 = Card.cutpurse;
    Card card58 = Card.gardens;
    Card card59 = Card.silver;
    Card card60 = Card.curse;
    java.util.List<Card> list_card61 = dominionBoard28.kingdomCards(card29, card30, card31, card35, card38, card54, card57, card58, card59, card60);
    card30.addEmbargoToCard();
    dominionBoard19.takeCard(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.baron + "'", card29.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.estate + "'", card30.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.baron + "'", card31.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.adventurer + "'", card35.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.curse + "'", card46.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.curse + "'", card54.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.cutpurse + "'", card57.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.gardens + "'", card58.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.silver + "'", card59.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.curse + "'", card60.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card3 = Card.baron;
    Card card4 = Card.estate;
    Card card5 = Card.baron;
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card9 = Card.adventurer;
    int i10 = card9.getCost();
    boolean b11 = dominionBoard8.availableCards(card9);
    Card card12 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player18 = new Player("hi!", (int)' ', dominionBoard17);
    boolean b19 = player18.actionsLeft();
    Card card20 = Card.curse;
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card25 = dominionBoard23.getHighestValueCards(2);
    player18.gainCard(card20, dominionBoard23);
    java.util.List<Player> list_player27 = dominionBoard23.players;
    Card card28 = Card.curse;
    card28.addEmbargoToCard();
    dominionBoard23.takeCard(card28);
    Card card31 = Card.cutpurse;
    Card card32 = Card.gardens;
    Card card33 = Card.silver;
    Card card34 = Card.curse;
    java.util.List<Card> list_card35 = dominionBoard2.kingdomCards(card3, card4, card5, card9, card12, card28, card31, card32, card33, card34);
    DominionBoard dominionBoard38 = new DominionBoard((-1), (int)(short)0);
    java.util.List<Card> list_card40 = dominionBoard38.getHighestValueCards(6);
    dominionBoard2.setUpGame(list_card40, (int)(byte)-1);
    java.util.List<Card> list_card43 = dominionBoard2.allKC();
    dominionBoard2.cutpurseHelper(100);
    dominionBoard2.councilRoomHelper(18);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.baron + "'", card3.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.estate + "'", card4.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.curse + "'", card20.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.curse + "'", card28.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gardens + "'", card32.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.silver + "'", card33.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.curse + "'", card34.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    java.util.List<Card> list_card9 = player5.getHand();
    int i10 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 32);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<Card> list_card45 = player5.getHand();
    int i46 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.cutpurseHelper(10);
    Card card7 = Card.embargo;
    dominionBoard2.ambassadorHelper((int)(byte)10, card7);
    boolean b9 = dominionBoard2.gameOver();
    java.util.List<Card> list_card10 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.embargo + "'", card7.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<java.lang.Integer> list_i32 = player5.actionCardIndices();
    java.util.LinkedList<Card> linkedlist_card33 = player5.getDeck();
    player5.treasureInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card33);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    int i23 = player5.getPlayerNumber();
    Card card24 = Card.gold;
    boolean b25 = player5.hasCard(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 32);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.gold + "'", card24.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    Card card14 = Card.smithy;
    int i15 = card14.getCost();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player21 = new Player("hi!", (int)' ', dominionBoard20);
    boolean b22 = player21.actionsLeft();
    Card card23 = Card.mine;
    int i24 = card23.getCoins();
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card28 = Card.adventurer;
    int i29 = card28.getCost();
    boolean b30 = dominionBoard27.availableCards(card28);
    player21.buyCard(card23, dominionBoard27);
    player13.gainCardToHand(card14, dominionBoard27);
    java.util.List<Card> list_card34 = dominionBoard27.kingdomCards(15);
    java.util.List<Card> list_card36 = dominionBoard27.kingdomCards((int)(short)-1);
    dominionBoard2.setUpGame(list_card36, 121);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.smithy + "'", card14.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.mine + "'", card23.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.adventurer + "'", card28.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.discardCardsEndTurn();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player23 = new Player("hi!", (int)' ', dominionBoard22);
    boolean b24 = player23.actionsLeft();
    Card card25 = Card.mine;
    int i26 = card25.getCoins();
    DominionBoard dominionBoard29 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card30 = Card.adventurer;
    int i31 = card30.getCost();
    boolean b32 = dominionBoard29.availableCards(card30);
    player23.buyCard(card25, dominionBoard29);
    Card card34 = Card.gold;
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i38 = dominionBoard37.play();
    dominionBoard37.councilRoomHelper(100);
    java.util.List<Card> list_card41 = dominionBoard37.getNonEmptySupplyPiles();
    player23.gainCardToTopOfDeck(card34, dominionBoard37);
    java.util.List<Player> list_player43 = dominionBoard37.players;
    java.util.List<Player> list_player44 = dominionBoard37.getPlayers();
    java.util.List<Card> list_card45 = dominionBoard37.allKC();
    Card card46 = Card.great_hall;
    card46.addEmbargoToCard();
    dominionBoard37.returnCard(card46);
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i54 = dominionBoard53.play();
    Card card55 = Card.great_hall;
    card55.addEmbargoToCard();
    card55.addEmbargoToCard();
    dominionBoard53.takeCard(card55);
    dominionBoard53.finalScores();
    boolean b60 = dominionBoard53.gameOver();
    boolean b61 = dominionBoard53.gameOver();
    java.util.List<Player> list_player62 = dominionBoard53.getPlayers();
    java.util.List<Player> list_player63 = dominionBoard53.getPlayers();
    Player player64 = new Player("", (int)'#', dominionBoard53);
    java.util.List<Card> list_card66 = dominionBoard53.kingdomCards(100);
    player5.gainCardToTopOfDeck(card46, dominionBoard53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.mine + "'", card25.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.adventurer + "'", card30.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.gold + "'", card34.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.great_hall + "'", card46.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.great_hall + "'", card55.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card5 = Card.mine;
    int i6 = card5.getCoins();
    dominionBoard2.ambassadorHelper(15, card5);
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    java.lang.String str16 = player14.getName();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.mine;
    int i25 = card24.getCoins();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card29 = Card.adventurer;
    int i30 = card29.getCost();
    boolean b31 = dominionBoard28.availableCards(card29);
    player22.buyCard(card24, dominionBoard28);
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    Card card39 = Card.smithy;
    int i40 = card39.getCost();
    dominionBoard35.trashCard(card39);
    dominionBoard35.cutpurseHelper((int)(byte)10);
    player14.gainCardToTopOfDeck(card24, dominionBoard35);
    player14.addActions(2);
    Card card47 = player14.drawCardFromDeck();
    dominionBoard2.ambassadorHelper(191, card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.mine + "'", card5.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.mine + "'", card24.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.adventurer + "'", card29.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.smithy + "'", card39.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    java.util.List<Card> list_card28 = player5.getHand();
    Card card29 = Card.mine;
    java.util.List<java.lang.String> list_str30 = card29.getTypes();
    boolean b31 = player5.hasCard(card29);
    boolean b32 = player5.currentBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.mine + "'", card29.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("hi!", 152, dominionBoard4);
    Card card16 = player15.drawCardFromDeck();
    int i17 = player15.getBuys();
    int i18 = player15.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.copper + "'", card16.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    int i25 = player5.getTotalVictoryPoints();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    Card card35 = Card.mine;
    int i36 = card35.getCoins();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card40 = Card.adventurer;
    int i41 = card40.getCost();
    boolean b42 = dominionBoard39.availableCards(card40);
    player33.buyCard(card35, dominionBoard39);
    dominionBoard39.councilRoomHelper(100);
    Player player46 = new Player("", (int)(byte)0, dominionBoard39);
    Card card47 = player46.drawCardFromDeck();
    int i48 = card47.getCost();
    player5.discard(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.mine + "'", card35.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.adventurer + "'", card40.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.copper + "'", card47.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    java.util.List<Card> list_card25 = dominionBoard19.allKC();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card29 = Card.baron;
    Card card30 = Card.estate;
    Card card31 = Card.baron;
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card35 = Card.adventurer;
    int i36 = card35.getCost();
    boolean b37 = dominionBoard34.availableCards(card35);
    Card card38 = Card.baron;
    DominionBoard dominionBoard43 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player44 = new Player("hi!", (int)' ', dominionBoard43);
    boolean b45 = player44.actionsLeft();
    Card card46 = Card.curse;
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card51 = dominionBoard49.getHighestValueCards(2);
    player44.gainCard(card46, dominionBoard49);
    java.util.List<Player> list_player53 = dominionBoard49.players;
    Card card54 = Card.curse;
    card54.addEmbargoToCard();
    dominionBoard49.takeCard(card54);
    Card card57 = Card.cutpurse;
    Card card58 = Card.gardens;
    Card card59 = Card.silver;
    Card card60 = Card.curse;
    java.util.List<Card> list_card61 = dominionBoard28.kingdomCards(card29, card30, card31, card35, card38, card54, card57, card58, card59, card60);
    dominionBoard19.returnCard(card57);
    dominionBoard19.finalScores();
    java.util.List<Card> list_card64 = dominionBoard19.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.baron + "'", card29.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.estate + "'", card30.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.baron + "'", card31.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.adventurer + "'", card35.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.baron + "'", card38.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.curse + "'", card46.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.curse + "'", card54.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.cutpurse + "'", card57.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.gardens + "'", card58.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.silver + "'", card59.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.curse + "'", card60.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    Card card55 = Card.province;
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i59 = dominionBoard58.play();
    java.util.List<Player> list_player60 = dominionBoard58.getPlayers();
    dominionBoard58.finalScores();
    java.util.List<Card> list_card63 = dominionBoard58.getHighestValueCards((int)'a');
    dominionBoard58.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player66 = dominionBoard58.getPlayers();
    Card card67 = Card.adventurer;
    int i68 = card67.getCost();
    dominionBoard58.returnCard(card67);
    player5.gainCard(card55, dominionBoard58);
    java.util.List<Card> list_card72 = dominionBoard58.kingdomCards(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.province + "'", card55.equals(Card.province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player66);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.adventurer + "'", card67.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player16 = new Player("hi!", (int)' ', dominionBoard15);
    boolean b17 = player16.actionsLeft();
    Card card18 = Card.curse;
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card23 = dominionBoard21.getHighestValueCards(2);
    player16.gainCard(card18, dominionBoard21);
    dominionBoard2.ambassadorHelper((int)(byte)0, card18);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i29 = dominionBoard28.play();
    java.util.List<Player> list_player30 = dominionBoard28.getPlayers();
    dominionBoard2.players = list_player30;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.curse + "'", card18.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    player5.discardCardsEndTurn();
    java.util.List<Card> list_card37 = player5.getDiscard();
    int i38 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.duchy;
    boolean b41 = player5.hasCard(card40);
    Card card42 = Card.estate;
    DominionBoard dominionBoard45 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i46 = dominionBoard45.play();
    Card card47 = Card.great_hall;
    card47.addEmbargoToCard();
    card47.addEmbargoToCard();
    dominionBoard45.takeCard(card47);
    dominionBoard45.finalScores();
    boolean b52 = dominionBoard45.gameOver();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player59 = new Player("hi!", (int)' ', dominionBoard58);
    boolean b60 = player59.actionsLeft();
    Card card61 = Card.curse;
    DominionBoard dominionBoard64 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card66 = dominionBoard64.getHighestValueCards(2);
    player59.gainCard(card61, dominionBoard64);
    dominionBoard45.ambassadorHelper((int)(byte)0, card61);
    boolean b69 = dominionBoard45.gameOver();
    player5.gainCardToTopOfDeck(card42, dominionBoard45);
    int i71 = dominionBoard45.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.duchy + "'", card40.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.estate + "'", card42.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.great_hall + "'", card47.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.curse + "'", card61.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.cutpurseHelper(10);
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player11 = new Player("hi!", (int)' ', dominionBoard10);
    boolean b12 = player11.actionsLeft();
    Card card13 = Card.mine;
    int i14 = card13.getCoins();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    player11.buyCard(card13, dominionBoard17);
    java.util.List<Card> list_card22 = dominionBoard17.allKC();
    java.util.List<Player> list_player23 = dominionBoard17.players;
    dominionBoard2.players = list_player23;
    java.util.List<Card> list_card26 = dominionBoard2.getHighestValueCards(188);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.mine + "'", card13.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    player5.addActions((int)(byte)-1);
    Card card19 = Card.cutpurse;
    int i20 = card19.getEmbargo();
    boolean b21 = player5.hasCard(card19);
    player5.treasureInHand();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    Card card29 = Card.smithy;
    int i30 = card29.getCost();
    dominionBoard25.trashCard(card29);
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    java.util.List<Player> list_player36 = dominionBoard34.getPlayers();
    dominionBoard34.finalScores();
    java.util.List<Card> list_card39 = dominionBoard34.getHighestValueCards((int)'a');
    dominionBoard34.seaHagHelper((int)(short)0);
    dominionBoard34.seaHagHelper(0);
    player5.gainCard(card29, dominionBoard34);
    java.util.List<Card> list_card45 = player5.getHand();
    Card card46 = Card.gardens;
    int i47 = card46.getCoins();
    card46.setVictory(10);
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player53 = dominionBoard52.getPlayers();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i57 = dominionBoard56.play();
    Card card58 = Card.great_hall;
    card58.addEmbargoToCard();
    card58.addEmbargoToCard();
    dominionBoard56.takeCard(card58);
    dominionBoard56.finalScores();
    java.util.List<Player> list_player63 = dominionBoard56.players;
    dominionBoard52.players = list_player63;
    java.util.List<Card> list_card66 = dominionBoard52.kingdomCards(4);
    player5.buyCard(card46, dominionBoard52);
    card46.setVictory(45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.gardens + "'", card46.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.great_hall + "'", card58.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    player5.discardCardsEndTurn();
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    boolean b16 = player5.actionInHand();
    boolean b17 = player5.actionsLeft();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player23 = new Player("hi!", (int)' ', dominionBoard22);
    boolean b24 = player23.actionsLeft();
    Card card25 = Card.curse;
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card30 = dominionBoard28.getHighestValueCards(2);
    player23.gainCard(card25, dominionBoard28);
    java.util.List<Player> list_player32 = dominionBoard28.players;
    DominionBoard dominionBoard37 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player38 = new Player("hi!", (int)' ', dominionBoard37);
    boolean b39 = player38.actionsLeft();
    Card card40 = Card.mine;
    int i41 = card40.getCoins();
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card45 = Card.adventurer;
    int i46 = card45.getCost();
    boolean b47 = dominionBoard44.availableCards(card45);
    player38.buyCard(card40, dominionBoard44);
    Card card49 = Card.gold;
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i53 = dominionBoard52.play();
    dominionBoard52.councilRoomHelper(100);
    java.util.List<Card> list_card56 = dominionBoard52.getNonEmptySupplyPiles();
    player38.gainCardToTopOfDeck(card49, dominionBoard52);
    card49.addEmbargoToCard();
    boolean b59 = dominionBoard28.availableCards(card49);
    // The following exception was thrown during execution in test generation
    try {
    Card card60 = player5.buyRandomCard(dominionBoard28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.curse + "'", card25.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.mine + "'", card40.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.adventurer + "'", card45.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.gold + "'", card49.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    Card card47 = player5.drawCardFromDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.feast + "'", card47.equals(Card.feast));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    boolean b7 = player5.actionInHand();
    player5.treasureInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getHand();
    int i45 = player5.getPlayerNumber();
    DominionBoard dominionBoard48 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card49 = Card.adventurer;
    int i50 = card49.getCost();
    boolean b51 = dominionBoard48.availableCards(card49);
    Card card52 = Card.smithy;
    int i53 = card52.getCost();
    dominionBoard48.trashCard(card52);
    DominionBoard dominionBoard59 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player60 = new Player("hi!", (int)' ', dominionBoard59);
    boolean b61 = player60.actionsLeft();
    Card card62 = Card.curse;
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card67 = dominionBoard65.getHighestValueCards(2);
    player60.gainCard(card62, dominionBoard65);
    boolean b69 = dominionBoard48.availableCards(card62);
    Card card70 = player5.buyRandomCard(dominionBoard48);
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 32);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.adventurer + "'", card49.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.smithy + "'", card52.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.curse + "'", card62.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.copper + "'", card70.equals(Card.copper));

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    java.util.List<Card> list_card56 = player5.getDiscard();
    int i57 = player5.getPlayerNumber();
    int i58 = player5.getTotalVictoryPoints();
    java.util.List<Card> list_card59 = player5.getCardsPlayed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 104);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i45 = dominionBoard44.play();
    Card card46 = Card.great_hall;
    card46.addEmbargoToCard();
    card46.addEmbargoToCard();
    dominionBoard44.takeCard(card46);
    dominionBoard44.finalScores();
    boolean b51 = dominionBoard44.gameOver();
    boolean b52 = dominionBoard44.gameOver();
    java.util.List<Player> list_player53 = dominionBoard44.getPlayers();
    java.util.List<Player> list_player54 = dominionBoard44.getPlayers();
    Player player55 = new Player("hi!", 152, dominionBoard44);
    Card card56 = player5.buyRandomCard(dominionBoard44);
    Card card57 = player5.drawCardFromDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.great_hall + "'", card46.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player54);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.copper + "'", card56.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.mine + "'", card57.equals(Card.mine));

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    Card card36 = Card.gardens;
    int i37 = card36.getCoins();
    DominionBoard dominionBoard40 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i41 = dominionBoard40.play();
    Card card42 = Card.great_hall;
    card42.addEmbargoToCard();
    card42.addEmbargoToCard();
    dominionBoard40.takeCard(card42);
    dominionBoard40.finalScores();
    player5.gainCardToTopOfDeck(card36, dominionBoard40);
    int i48 = card36.getCoins();
    int i49 = card36.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.great_hall + "'", card42.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 4);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(byte)1, 104);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.adventurer;
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i10 = dominionBoard9.play();
    Card card12 = Card.mine;
    int i13 = card12.getCoins();
    dominionBoard9.ambassadorHelper(15, card12);
    player5.buyCard(card6, dominionBoard9);
    java.util.List<Card> list_card16 = player5.getCardsPlayed();
    Card card17 = player5.drawCardFromDeck();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.adventurer + "'", card6.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.mine + "'", card12.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.estate + "'", card17.equals(Card.estate));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getHand();
    java.lang.String str45 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!"+ "'", str45.equals("hi!"));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    dominionBoard2.councilRoomHelper(100);
    java.util.List<Card> list_card6 = dominionBoard2.getNonEmptySupplyPiles();
    dominionBoard2.cutpurseHelper((int)'a');
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.baron;
    Card card13 = Card.estate;
    Card card14 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.baron;
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player27 = new Player("hi!", (int)' ', dominionBoard26);
    boolean b28 = player27.actionsLeft();
    Card card29 = Card.curse;
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card34 = dominionBoard32.getHighestValueCards(2);
    player27.gainCard(card29, dominionBoard32);
    java.util.List<Player> list_player36 = dominionBoard32.players;
    Card card37 = Card.curse;
    card37.addEmbargoToCard();
    dominionBoard32.takeCard(card37);
    Card card40 = Card.cutpurse;
    Card card41 = Card.gardens;
    Card card42 = Card.silver;
    Card card43 = Card.curse;
    java.util.List<Card> list_card44 = dominionBoard11.kingdomCards(card12, card13, card14, card18, card21, card37, card40, card41, card42, card43);
    dominionBoard2.setUpGame(list_card44, 1);
    dominionBoard2.cutpurseHelper(15);
    DominionBoard dominionBoard51 = new DominionBoard((-1), (int)(short)0);
    boolean b52 = dominionBoard51.gameOver();
    DominionBoard dominionBoard57 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player58 = new Player("hi!", (int)' ', dominionBoard57);
    Card card59 = Card.cutpurse;
    card59.setVictory((-1));
    player58.discard(card59);
    java.util.List<Card> list_card63 = player58.getHand();
    dominionBoard51.setUpGame(list_card63, 5);
    java.util.List<Card> list_card66 = dominionBoard51.getNonEmptySupplyPiles();
    dominionBoard2.setUpGame(list_card66, 188);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.estate + "'", card13.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.baron + "'", card14.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.baron + "'", card21.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.curse + "'", card29.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.curse + "'", card37.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.cutpurse + "'", card40.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.gardens + "'", card41.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.silver + "'", card42.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.curse + "'", card43.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.cutpurse + "'", card59.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    java.util.List<java.lang.Integer> list_i9 = player5.actionCardIndices();
    java.util.List<Card> list_card10 = player5.getHand();
    Card card11 = player5.drawCardFromDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    player5.addActions((int)(short)0);
    player5.addActions((int)(short)-1);
    Card card60 = player5.drawCardFromDeck();
    DominionBoard dominionBoard63 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card64 = Card.adventurer;
    int i65 = card64.getCost();
    boolean b66 = dominionBoard63.availableCards(card64);
    Card card67 = Card.smithy;
    int i68 = card67.getCost();
    dominionBoard63.trashCard(card67);
    dominionBoard63.cutpurseHelper((int)(byte)10);
    boolean b72 = dominionBoard63.gameOver();
    Card card73 = player5.buyRandomCard(dominionBoard63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.estate + "'", card60.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.adventurer + "'", card64.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.smithy + "'", card67.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.copper + "'", card73.equals(Card.copper));

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i5 = dominionBoard4.play();
    Card card6 = Card.great_hall;
    card6.addEmbargoToCard();
    card6.addEmbargoToCard();
    dominionBoard4.takeCard(card6);
    dominionBoard4.finalScores();
    boolean b11 = dominionBoard4.gameOver();
    boolean b12 = dominionBoard4.gameOver();
    java.util.List<Player> list_player13 = dominionBoard4.getPlayers();
    java.util.List<Player> list_player14 = dominionBoard4.getPlayers();
    Player player15 = new Player("", (int)'#', dominionBoard4);
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player21 = new Player("hi!", (int)' ', dominionBoard20);
    Card card22 = Card.smithy;
    int i23 = card22.getCost();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    player21.gainCardToHand(card22, dominionBoard35);
    java.util.List<Card> list_card41 = dominionBoard35.allKC();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    boolean b44 = dominionBoard35.availableCards(card42);
    DominionBoard dominionBoard49 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player50 = new Player("hi!", (int)' ', dominionBoard49);
    player15.buyCard(card42, dominionBoard49);
    java.util.List<java.lang.String> list_str52 = card42.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.great_hall + "'", card6.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.smithy + "'", card22.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str52);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Card> list_card5 = dominionBoard2.getNonEmptySupplyPiles();
    java.util.List<Player> list_player6 = dominionBoard2.players;
    dominionBoard2.finalScores();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player6);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player34 = dominionBoard33.getPlayers();
    Card card36 = Card.great_hall;
    java.util.List<java.lang.String> list_str37 = card36.getTypes();
    dominionBoard33.ambassadorHelper((-1), card36);
    dominionBoard26.returnCard(card36);
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card57 = dominionBoard51.kingdomCards(1);
    java.util.List<Player> list_player58 = dominionBoard51.players;
    player5.gainCardToTopOfDeck(card36, dominionBoard51);
    int i60 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.great_hall + "'", card36.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 32);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player10 = new Player("hi!", (int)' ', dominionBoard9);
    boolean b11 = player10.actionsLeft();
    int i12 = player10.getCoins();
    java.util.List<java.lang.Integer> list_i13 = player10.actionCardIndices();
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player19 = new Player("hi!", (int)' ', dominionBoard18);
    boolean b20 = player19.actionsLeft();
    Card card21 = Card.mine;
    int i22 = card21.getCoins();
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card26 = Card.adventurer;
    int i27 = card26.getCost();
    boolean b28 = dominionBoard25.availableCards(card26);
    player19.buyCard(card21, dominionBoard25);
    java.util.List<Card> list_card30 = dominionBoard25.allKC();
    Card card31 = player10.buyRandomCard(dominionBoard25);
    java.util.List<java.lang.Integer> list_i32 = player10.actionCardIndices();
    Card card33 = Card.cutpurse;
    card33.setVictory((-1));
    boolean b36 = player10.hasCard(card33);
    java.util.List<Card> list_card37 = player10.getHand();
    Card card38 = Card.adventurer;
    java.util.List<java.lang.String> list_str39 = card38.getTypes();
    boolean b40 = player10.hasCard(card38);
    card38.setVictory((-5));
    boolean b43 = dominionBoard2.availableCards(card38);
    dominionBoard2.seaHagHelper(124);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.mine + "'", card21.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.adventurer + "'", card26.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.cutpurse + "'", card33.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.adventurer + "'", card38.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.curse;
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card14 = dominionBoard12.getHighestValueCards(2);
    player7.gainCard(card9, dominionBoard12);
    java.util.List<Player> list_player16 = dominionBoard12.players;
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.mine;
    int i25 = card24.getCoins();
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card29 = Card.adventurer;
    int i30 = card29.getCost();
    boolean b31 = dominionBoard28.availableCards(card29);
    player22.buyCard(card24, dominionBoard28);
    Card card33 = Card.gold;
    DominionBoard dominionBoard36 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i37 = dominionBoard36.play();
    dominionBoard36.councilRoomHelper(100);
    java.util.List<Card> list_card40 = dominionBoard36.getNonEmptySupplyPiles();
    player22.gainCardToTopOfDeck(card33, dominionBoard36);
    card33.addEmbargoToCard();
    boolean b43 = dominionBoard12.availableCards(card33);
    DominionBoard dominionBoard46 = new DominionBoard((-1), (int)(short)0);
    boolean b47 = dominionBoard46.gameOver();
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player53 = new Player("hi!", (int)' ', dominionBoard52);
    Card card54 = Card.cutpurse;
    card54.setVictory((-1));
    player53.discard(card54);
    java.util.List<Card> list_card58 = player53.getHand();
    dominionBoard46.setUpGame(list_card58, 5);
    dominionBoard12.setUpGame(list_card58, 0);
    java.util.List<Card> list_card63 = dominionBoard12.allKC();
    Player player64 = new Player("hi!", 10, dominionBoard12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.curse + "'", card9.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.mine + "'", card24.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.adventurer + "'", card29.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.gold + "'", card33.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.cutpurse + "'", card54.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    dominionBoard13.councilRoomHelper(100);
    Player player20 = new Player("", (int)(byte)0, dominionBoard13);
    Card card21 = player20.drawCardFromDeck();
    int i22 = card21.getCost();
    int i23 = card21.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.copper + "'", card21.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.List<Card> list_card17 = dominionBoard11.kingdomCards(1);
    Card card18 = Card.mine;
    java.util.List<java.lang.String> list_str19 = card18.getTypes();
    boolean b20 = dominionBoard11.availableCards(card18);
    java.util.List<Player> list_player21 = dominionBoard11.players;
    dominionBoard11.seaHagHelper(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.mine + "'", card18.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    Card card5 = Card.mine;
    int i6 = card5.getCoins();
    boolean b7 = dominionBoard2.availableCards(card5);
    card5.addEmbargoToCard();
    card5.addEmbargoToCard();
    int i10 = card5.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.mine + "'", card5.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    int i25 = card16.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 3);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionInHand();
    java.lang.String str7 = player5.getName();
    int i8 = player5.getBuys();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.baron;
    Card card13 = Card.estate;
    Card card14 = Card.baron;
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.baron;
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player27 = new Player("hi!", (int)' ', dominionBoard26);
    boolean b28 = player27.actionsLeft();
    Card card29 = Card.curse;
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card34 = dominionBoard32.getHighestValueCards(2);
    player27.gainCard(card29, dominionBoard32);
    java.util.List<Player> list_player36 = dominionBoard32.players;
    Card card37 = Card.curse;
    card37.addEmbargoToCard();
    dominionBoard32.takeCard(card37);
    Card card40 = Card.cutpurse;
    Card card41 = Card.gardens;
    Card card42 = Card.silver;
    Card card43 = Card.curse;
    java.util.List<Card> list_card44 = dominionBoard11.kingdomCards(card12, card13, card14, card18, card21, card37, card40, card41, card42, card43);
    int i45 = card18.getCoins();
    int i46 = card18.getEmbargo();
    boolean b47 = player5.hasCard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.estate + "'", card13.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.baron + "'", card14.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.baron + "'", card21.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.curse + "'", card29.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.curse + "'", card37.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.cutpurse + "'", card40.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.gardens + "'", card41.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.silver + "'", card42.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.curse + "'", card43.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 159);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    boolean b48 = player5.currentBuys();
    boolean b49 = player5.actionsLeft();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.util.List<java.lang.Integer> list_i27 = player5.actionCardIndices();
    Card card28 = Card.cutpurse;
    card28.setVictory((-1));
    boolean b31 = player5.hasCard(card28);
    java.util.List<Card> list_card32 = player5.getHand();
    Card card33 = Card.seahag;
    int i34 = card33.getCost();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player40 = new Player("hi!", (int)' ', dominionBoard39);
    boolean b41 = player40.actionsLeft();
    Card card42 = Card.mine;
    int i43 = card42.getCoins();
    DominionBoard dominionBoard46 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card47 = Card.adventurer;
    int i48 = card47.getCost();
    boolean b49 = dominionBoard46.availableCards(card47);
    player40.buyCard(card42, dominionBoard46);
    java.util.LinkedList<Card> linkedlist_card51 = player40.getDeck();
    DominionBoard dominionBoard56 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player57 = new Player("hi!", (int)' ', dominionBoard56);
    boolean b58 = player57.actionsLeft();
    Card card59 = Card.curse;
    DominionBoard dominionBoard62 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card64 = dominionBoard62.getHighestValueCards(2);
    player57.gainCard(card59, dominionBoard62);
    java.util.List<Player> list_player66 = dominionBoard62.players;
    Card card67 = Card.curse;
    card67.addEmbargoToCard();
    dominionBoard62.takeCard(card67);
    boolean b70 = player40.hasCard(card67);
    Card card71 = Card.gardens;
    int i72 = card71.getCoins();
    DominionBoard dominionBoard75 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i76 = dominionBoard75.play();
    Card card77 = Card.great_hall;
    card77.addEmbargoToCard();
    card77.addEmbargoToCard();
    dominionBoard75.takeCard(card77);
    dominionBoard75.finalScores();
    player40.gainCardToTopOfDeck(card71, dominionBoard75);
    java.util.List<Player> list_player83 = dominionBoard75.players;
    player5.gainCardToTopOfDeck(card33, dominionBoard75);
    java.util.LinkedList<Card> linkedlist_card85 = player5.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.seahag + "'", card33.equals(Card.seahag));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.mine + "'", card42.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.adventurer + "'", card47.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.curse + "'", card59.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player66);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.curse + "'", card67.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + card71 + "' != '" + Card.gardens + "'", card71.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    org.junit.Assert.assertTrue("'" + card77 + "' != '" + Card.great_hall + "'", card77.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card85);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = Card.council_room;
    card36.setVictory((int)(byte)100);
    player5.discard(card36);
    Card card40 = Card.feast;
    java.util.List<java.lang.String> list_str41 = card40.getTypes();
    DominionBoard dominionBoard44 = new DominionBoard((-1), (int)(short)0);
    boolean b45 = dominionBoard44.gameOver();
    player5.gainCardToTopOfDeck(card40, dominionBoard44);
    java.util.List<Card> list_card47 = player5.getCardsPlayed();
    player5.treasureInHand();
    java.util.List<Card> list_card49 = player5.getCardsPlayed();
    int i50 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.feast + "'", card40.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 32);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    java.util.List<Player> list_player25 = dominionBoard19.players;
    java.util.List<Player> list_player26 = dominionBoard19.getPlayers();
    java.util.List<Card> list_card27 = dominionBoard19.allKC();
    Card card28 = Card.great_hall;
    card28.addEmbargoToCard();
    dominionBoard19.returnCard(card28);
    int i31 = card28.getCoins();
    java.util.List<java.lang.String> list_str32 = card28.getTypes();
    int i33 = card28.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.great_hall + "'", card28.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 3);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i40 = dominionBoard39.play();
    Card card41 = Card.great_hall;
    card41.addEmbargoToCard();
    card41.addEmbargoToCard();
    dominionBoard39.takeCard(card41);
    DominionBoard dominionBoard47 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i48 = dominionBoard47.play();
    dominionBoard47.cutpurseHelper(10);
    Card card52 = Card.embargo;
    dominionBoard47.ambassadorHelper((int)(byte)10, card52);
    player5.gainCardToHand(card41, dominionBoard47);
    java.lang.String str55 = player5.getName();
    player5.addActions((int)(short)0);
    player5.addActions((int)(short)-1);
    Card card60 = player5.drawCardFromDeck();
    DominionBoard dominionBoard65 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player66 = new Player("hi!", (int)' ', dominionBoard65);
    boolean b67 = player66.actionsLeft();
    int i68 = player66.getCoins();
    java.util.List<java.lang.Integer> list_i69 = player66.actionCardIndices();
    DominionBoard dominionBoard74 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player75 = new Player("hi!", (int)' ', dominionBoard74);
    boolean b76 = player75.actionsLeft();
    Card card77 = Card.mine;
    int i78 = card77.getCoins();
    DominionBoard dominionBoard81 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card82 = Card.adventurer;
    int i83 = card82.getCost();
    boolean b84 = dominionBoard81.availableCards(card82);
    player75.buyCard(card77, dominionBoard81);
    java.util.List<Card> list_card86 = dominionBoard81.allKC();
    Card card87 = player66.buyRandomCard(dominionBoard81);
    player66.treasureInHand();
    player66.discardCardsEndTurn();
    DominionBoard dominionBoard92 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player93 = dominionBoard92.getPlayers();
    Card card94 = player66.buyRandomCard(dominionBoard92);
    boolean b95 = player5.hasCard(card94);
    int i96 = card94.getEmbargo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.great_hall + "'", card41.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.embargo + "'", card52.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "hi!"+ "'", str55.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.copper + "'", card60.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + card77 + "' != '" + Card.mine + "'", card77.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.adventurer + "'", card82.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);
    org.junit.Assert.assertTrue("'" + card87 + "' != '" + Card.copper + "'", card87.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player93);
    org.junit.Assert.assertTrue("'" + card94 + "' != '" + Card.copper + "'", card94.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 193);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    boolean b10 = dominionBoard2.gameOver();
    java.util.List<Player> list_player11 = dominionBoard2.getPlayers();
    java.util.List<Player> list_player12 = dominionBoard2.getPlayers();
    DominionBoard dominionBoard15 = new DominionBoard((-5), (int)(short)0);
    java.util.List<Card> list_card16 = dominionBoard15.allKC();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    java.util.List<Player> list_player21 = dominionBoard19.getPlayers();
    dominionBoard19.finalScores();
    java.util.List<Card> list_card24 = dominionBoard19.getHighestValueCards((int)'a');
    dominionBoard19.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player27 = dominionBoard19.getPlayers();
    dominionBoard15.players = list_player27;
    dominionBoard2.players = list_player27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player19 = dominionBoard18.getPlayers();
    Card card21 = Card.great_hall;
    java.util.List<java.lang.String> list_str22 = card21.getTypes();
    dominionBoard18.ambassadorHelper((-1), card21);
    dominionBoard11.returnCard(card21);
    java.util.List<Player> list_player25 = dominionBoard11.getPlayers();
    DominionBoard dominionBoard28 = new DominionBoard((-5), (int)(short)0);
    java.util.List<Card> list_card29 = dominionBoard28.allKC();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i33 = dominionBoard32.play();
    java.util.List<Player> list_player34 = dominionBoard32.getPlayers();
    dominionBoard32.finalScores();
    java.util.List<Card> list_card37 = dominionBoard32.getHighestValueCards((int)'a');
    dominionBoard32.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player40 = dominionBoard32.getPlayers();
    dominionBoard28.players = list_player40;
    dominionBoard11.players = list_player40;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.great_hall + "'", card21.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player40);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Player> list_player3 = dominionBoard2.getPlayers();
    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i7 = dominionBoard6.play();
    Card card8 = Card.great_hall;
    card8.addEmbargoToCard();
    card8.addEmbargoToCard();
    dominionBoard6.takeCard(card8);
    dominionBoard6.finalScores();
    java.util.List<Player> list_player13 = dominionBoard6.players;
    dominionBoard2.players = list_player13;
    java.util.List<Card> list_card16 = dominionBoard2.getHighestValueCards((int)(byte)10);
    dominionBoard2.cutpurseHelper((int)(short)-1);
    DominionBoard dominionBoard23 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player24 = new Player("hi!", (int)' ', dominionBoard23);
    boolean b25 = player24.actionsLeft();
    Card card26 = Card.mine;
    int i27 = card26.getCoins();
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card31 = Card.adventurer;
    int i32 = card31.getCost();
    boolean b33 = dominionBoard30.availableCards(card31);
    player24.buyCard(card26, dominionBoard30);
    java.util.List<Card> list_card36 = dominionBoard30.kingdomCards(1);
    Card card37 = Card.mine;
    java.util.List<java.lang.String> list_str38 = card37.getTypes();
    boolean b39 = dominionBoard30.availableCards(card37);
    java.util.List<Player> list_player40 = dominionBoard30.players;
    dominionBoard2.players = list_player40;
    java.util.List<Card> list_card42 = dominionBoard2.allKC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.great_hall + "'", card8.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.mine + "'", card26.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.adventurer + "'", card31.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.mine + "'", card37.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    Card card4 = Card.great_hall;
    card4.addEmbargoToCard();
    card4.addEmbargoToCard();
    dominionBoard2.takeCard(card4);
    dominionBoard2.finalScores();
    boolean b9 = dominionBoard2.gameOver();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i13 = dominionBoard12.play();
    Card card14 = Card.great_hall;
    card14.addEmbargoToCard();
    card14.addEmbargoToCard();
    dominionBoard12.takeCard(card14);
    dominionBoard12.finalScores();
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    player25.treasureInHand();
    Card card27 = Card.duchy;
    boolean b28 = player25.hasCard(card27);
    dominionBoard12.ambassadorHelper((int)(byte)10, card27);
    boolean b30 = dominionBoard2.availableCards(card27);
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player36 = new Player("hi!", (int)' ', dominionBoard35);
    boolean b37 = player36.actionsLeft();
    int i38 = player36.getCoins();
    java.util.List<java.lang.Integer> list_i39 = player36.actionCardIndices();
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player45 = new Player("hi!", (int)' ', dominionBoard44);
    boolean b46 = player45.actionsLeft();
    Card card47 = Card.mine;
    int i48 = card47.getCoins();
    DominionBoard dominionBoard51 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card52 = Card.adventurer;
    int i53 = card52.getCost();
    boolean b54 = dominionBoard51.availableCards(card52);
    player45.buyCard(card47, dominionBoard51);
    java.util.List<Card> list_card56 = dominionBoard51.allKC();
    Card card57 = player36.buyRandomCard(dominionBoard51);
    player36.treasureInHand();
    player36.discardCardsEndTurn();
    java.util.List<Card> list_card60 = player36.getHand();
    dominionBoard2.setUpGame(list_card60, (int)'#');
    dominionBoard2.seaHagHelper(15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + card4 + "' != '" + Card.great_hall + "'", card4.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.great_hall + "'", card14.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.duchy + "'", card27.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.mine + "'", card47.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.adventurer + "'", card52.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.copper + "'", card57.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i3 = dominionBoard2.play();
    java.util.List<Player> list_player4 = dominionBoard2.getPlayers();
    dominionBoard2.finalScores();
    java.util.List<Card> list_card7 = dominionBoard2.getHighestValueCards((int)'a');
    dominionBoard2.seaHagHelper((int)(short)0);
    DominionBoard dominionBoard14 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player15 = new Player("hi!", (int)' ', dominionBoard14);
    boolean b16 = player15.actionsLeft();
    Card card17 = Card.mine;
    int i18 = card17.getCoins();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card22 = Card.adventurer;
    int i23 = card22.getCost();
    boolean b24 = dominionBoard21.availableCards(card22);
    player15.buyCard(card17, dominionBoard21);
    java.util.List<Card> list_card27 = dominionBoard21.kingdomCards(1);
    Card card28 = Card.mine;
    java.util.List<java.lang.String> list_str29 = card28.getTypes();
    boolean b30 = dominionBoard21.availableCards(card28);
    dominionBoard2.takeCard(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.mine + "'", card17.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.adventurer + "'", card22.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.mine + "'", card28.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    Card card31 = Card.gold;
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i35 = dominionBoard34.play();
    dominionBoard34.councilRoomHelper(100);
    java.util.List<Card> list_card38 = dominionBoard34.getNonEmptySupplyPiles();
    player20.gainCardToTopOfDeck(card31, dominionBoard34);
    card31.addEmbargoToCard();
    boolean b41 = dominionBoard10.availableCards(card31);
    int i42 = card31.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.gold + "'", card31.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.treasureInHand();
    Card card37 = Card.adventurer;
    java.util.List<java.lang.String> list_str38 = card37.getTypes();
    int i39 = card37.getCoins();
    boolean b40 = player5.hasCard(card37);
    java.lang.String str41 = player5.getName();
    Card card42 = player5.drawCardFromDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "hi!"+ "'", str41.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.copper + "'", card42.equals(Card.copper));

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    int i15 = player5.getActions();
    int i16 = player5.getCoins();
    java.util.LinkedList<Card> linkedlist_card17 = player5.getDeck();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card17);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }

    DominionBoard dominionBoard2 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card4 = dominionBoard2.getHighestValueCards(2);
    java.util.List<Card> list_card5 = dominionBoard2.getNonEmptySupplyPiles();
    dominionBoard2.councilRoomHelper(219);
    boolean b8 = dominionBoard2.gameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    boolean b6 = player5.actionInHand();
    java.lang.String str7 = player5.getName();
    int i8 = player5.getBuys();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    int i16 = player14.getCoins();
    java.util.List<java.lang.Integer> list_i17 = player14.actionCardIndices();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player23 = new Player("hi!", (int)' ', dominionBoard22);
    boolean b24 = player23.actionsLeft();
    Card card25 = Card.mine;
    int i26 = card25.getCoins();
    DominionBoard dominionBoard29 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card30 = Card.adventurer;
    int i31 = card30.getCost();
    boolean b32 = dominionBoard29.availableCards(card30);
    player23.buyCard(card25, dominionBoard29);
    java.util.List<Card> list_card34 = dominionBoard29.allKC();
    Card card35 = player14.buyRandomCard(dominionBoard29);
    player14.treasureInHand();
    java.util.List<Card> list_card37 = player14.getHand();
    Card card38 = Card.mine;
    java.util.List<java.lang.String> list_str39 = card38.getTypes();
    boolean b40 = player14.hasCard(card38);
    player5.discard(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.mine + "'", card25.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.adventurer + "'", card30.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.copper + "'", card35.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.mine + "'", card38.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Card> list_card14 = player5.getDiscard();
    DominionBoard dominionBoard17 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card18 = Card.adventurer;
    int i19 = card18.getCost();
    boolean b20 = dominionBoard17.availableCards(card18);
    Card card21 = Card.smithy;
    int i22 = card21.getCost();
    dominionBoard17.trashCard(card21);
    player5.discard(card21);
    player5.discardCardsEndTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.smithy + "'", card21.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    java.util.LinkedList<Card> linkedlist_card18 = player7.getDeck();
    player7.addActions((int)(byte)-1);
    Card card21 = Card.cutpurse;
    int i22 = card21.getEmbargo();
    boolean b23 = player7.hasCard(card21);
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player29 = new Player("hi!", (int)' ', dominionBoard28);
    boolean b30 = player29.actionsLeft();
    Card card31 = Card.mine;
    int i32 = card31.getCoins();
    DominionBoard dominionBoard35 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card36 = Card.adventurer;
    int i37 = card36.getCost();
    boolean b38 = dominionBoard35.availableCards(card36);
    player29.buyCard(card31, dominionBoard35);
    java.util.LinkedList<Card> linkedlist_card40 = player29.getDeck();
    player29.addActions((int)(byte)-1);
    Card card43 = Card.cutpurse;
    int i44 = card43.getEmbargo();
    boolean b45 = player29.hasCard(card43);
    player29.treasureInHand();
    int i47 = player29.getPlayerNumber();
    Card card48 = Card.estate;
    boolean b49 = player29.hasCard(card48);
    DominionBoard dominionBoard52 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i53 = dominionBoard52.play();
    Card card54 = Card.great_hall;
    card54.addEmbargoToCard();
    card54.addEmbargoToCard();
    dominionBoard52.takeCard(card54);
    dominionBoard52.councilRoomHelper(0);
    player7.buyCard(card48, dominionBoard52);
    Player player61 = new Player("hi!", 3, dominionBoard52);
    Card card62 = null;
    player61.discard(card62);
    // The following exception was thrown during execution in test generation
    try {
    int i64 = player61.getTotalVictoryPoints();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.mine + "'", card31.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.adventurer + "'", card36.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card40);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.cutpurse + "'", card43.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 32);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.estate + "'", card48.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.great_hall + "'", card54.equals(Card.great_hall));

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    Card card36 = player5.drawCardFromDeck();
    int i37 = card36.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.mine + "'", card36.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 100);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    java.lang.String str27 = player5.getName();
    DominionBoard dominionBoard32 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player33 = new Player("hi!", (int)' ', dominionBoard32);
    boolean b34 = player33.actionsLeft();
    Card card35 = Card.mine;
    int i36 = card35.getCoins();
    DominionBoard dominionBoard39 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card40 = Card.adventurer;
    int i41 = card40.getCost();
    boolean b42 = dominionBoard39.availableCards(card40);
    player33.buyCard(card35, dominionBoard39);
    java.util.LinkedList<Card> linkedlist_card44 = player33.getDeck();
    player33.addActions((int)(byte)-1);
    Card card47 = Card.cutpurse;
    int i48 = card47.getEmbargo();
    boolean b49 = player33.hasCard(card47);
    DominionBoard dominionBoard52 = new DominionBoard((-1), (int)(short)0);
    boolean b53 = dominionBoard52.gameOver();
    DominionBoard dominionBoard58 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player59 = new Player("hi!", (int)' ', dominionBoard58);
    Card card60 = Card.cutpurse;
    card60.setVictory((-1));
    player59.discard(card60);
    java.util.List<Card> list_card64 = player59.getHand();
    dominionBoard52.setUpGame(list_card64, 5);
    java.util.List<Card> list_card67 = dominionBoard52.getNonEmptySupplyPiles();
    int i68 = dominionBoard52.play();
    player5.gainCardToTopOfDeck(card47, dominionBoard52);
    dominionBoard52.finalScores();
    dominionBoard52.finalScores();
    dominionBoard52.seaHagHelper((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.mine + "'", card35.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.adventurer + "'", card40.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card44);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.cutpurse + "'", card60.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    DominionBoard dominionBoard9 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card10 = Card.baron;
    Card card11 = Card.estate;
    Card card12 = Card.baron;
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card16 = Card.adventurer;
    int i17 = card16.getCost();
    boolean b18 = dominionBoard15.availableCards(card16);
    Card card19 = Card.baron;
    DominionBoard dominionBoard24 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player25 = new Player("hi!", (int)' ', dominionBoard24);
    boolean b26 = player25.actionsLeft();
    Card card27 = Card.curse;
    DominionBoard dominionBoard30 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card32 = dominionBoard30.getHighestValueCards(2);
    player25.gainCard(card27, dominionBoard30);
    java.util.List<Player> list_player34 = dominionBoard30.players;
    Card card35 = Card.curse;
    card35.addEmbargoToCard();
    dominionBoard30.takeCard(card35);
    Card card38 = Card.cutpurse;
    Card card39 = Card.gardens;
    Card card40 = Card.silver;
    Card card41 = Card.curse;
    java.util.List<Card> list_card42 = dominionBoard9.kingdomCards(card10, card11, card12, card16, card19, card35, card38, card39, card40, card41);
    boolean b43 = player5.hasCard(card39);
    java.util.List<Card> list_card44 = player5.getDiscard();
    int i45 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.baron + "'", card10.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.estate + "'", card11.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.baron + "'", card12.equals(Card.baron));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.adventurer + "'", card16.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.baron + "'", card19.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.curse + "'", card27.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.curse + "'", card35.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.cutpurse + "'", card38.equals(Card.cutpurse));
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gardens + "'", card39.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.silver + "'", card40.equals(Card.silver));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    java.lang.String str7 = player5.getName();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    Card card30 = Card.smithy;
    int i31 = card30.getCost();
    dominionBoard26.trashCard(card30);
    dominionBoard26.cutpurseHelper((int)(byte)10);
    player5.gainCardToTopOfDeck(card15, dominionBoard26);
    player5.discardCardsEndTurn();
    int i37 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.smithy + "'", card30.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("", (int)(short)-1, dominionBoard4);
    java.util.List<Card> list_card7 = dominionBoard4.kingdomCards(10);
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.curse;
    DominionBoard dominionBoard18 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card20 = dominionBoard18.getHighestValueCards(2);
    player13.gainCard(card15, dominionBoard18);
    java.util.List<Player> list_player22 = dominionBoard18.players;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player28 = new Player("hi!", (int)' ', dominionBoard27);
    boolean b29 = player28.actionsLeft();
    Card card30 = Card.mine;
    int i31 = card30.getCoins();
    DominionBoard dominionBoard34 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card35 = Card.adventurer;
    int i36 = card35.getCost();
    boolean b37 = dominionBoard34.availableCards(card35);
    player28.buyCard(card30, dominionBoard34);
    Card card39 = Card.gold;
    DominionBoard dominionBoard42 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i43 = dominionBoard42.play();
    dominionBoard42.councilRoomHelper(100);
    java.util.List<Card> list_card46 = dominionBoard42.getNonEmptySupplyPiles();
    player28.gainCardToTopOfDeck(card39, dominionBoard42);
    card39.addEmbargoToCard();
    boolean b49 = dominionBoard18.availableCards(card39);
    dominionBoard4.trashCard(card39);
    int i51 = card39.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.curse + "'", card15.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.mine + "'", card30.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.adventurer + "'", card35.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.gold + "'", card39.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 6);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    int i28 = player5.getPlayerNumber();
    int i29 = player5.getBuys();
    java.lang.String str30 = player5.getName();
    DominionBoard dominionBoard33 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i34 = dominionBoard33.play();
    Card card35 = Card.great_hall;
    card35.addEmbargoToCard();
    card35.addEmbargoToCard();
    dominionBoard33.takeCard(card35);
    dominionBoard33.councilRoomHelper((int)(short)0);
    Card card41 = player5.buyRandomCard(dominionBoard33);
    dominionBoard33.councilRoomHelper(219);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!"+ "'", str30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.great_hall + "'", card35.equals(Card.great_hall));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    int i25 = player5.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 3);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    java.util.LinkedList<Card> linkedlist_card16 = player5.getDeck();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player22 = new Player("hi!", (int)' ', dominionBoard21);
    boolean b23 = player22.actionsLeft();
    Card card24 = Card.curse;
    DominionBoard dominionBoard27 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card29 = dominionBoard27.getHighestValueCards(2);
    player22.gainCard(card24, dominionBoard27);
    java.util.List<Player> list_player31 = dominionBoard27.players;
    Card card32 = Card.curse;
    card32.addEmbargoToCard();
    dominionBoard27.takeCard(card32);
    boolean b35 = player5.hasCard(card32);
    player5.treasureInHand();
    Card card37 = Card.adventurer;
    java.util.List<java.lang.String> list_str38 = card37.getTypes();
    int i39 = card37.getCoins();
    boolean b40 = player5.hasCard(card37);
    Card card41 = player5.drawCardFromDeck();
    player5.discardCardsEndTurn();
    player5.treasureInHand();
    java.lang.String str44 = player5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.curse + "'", card32.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.adventurer + "'", card37.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!"+ "'", str44.equals("hi!"));

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i9 = dominionBoard8.play();
    java.util.List<Player> list_player10 = dominionBoard8.getPlayers();
    dominionBoard8.finalScores();
    java.util.List<Card> list_card13 = dominionBoard8.getHighestValueCards((int)'a');
    dominionBoard8.seaHagHelper((int)(short)0);
    java.util.List<Player> list_player16 = dominionBoard8.getPlayers();
    Card card17 = Card.adventurer;
    int i18 = card17.getCost();
    dominionBoard8.returnCard(card17);
    dominionBoard4.returnCard(card17);
    int i21 = dominionBoard4.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.adventurer + "'", card17.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    dominionBoard13.councilRoomHelper(100);
    Player player20 = new Player("", (int)(byte)0, dominionBoard13);
    Card card21 = player20.drawCardFromDeck();
    Card card22 = Card.mine;
    DominionBoard dominionBoard25 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i26 = dominionBoard25.play();
    dominionBoard25.cutpurseHelper(10);
    player20.gainCard(card22, dominionBoard25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.copper + "'", card21.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<java.lang.Integer> list_i8 = player5.actionCardIndices();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player14 = new Player("hi!", (int)' ', dominionBoard13);
    boolean b15 = player14.actionsLeft();
    Card card16 = Card.mine;
    int i17 = card16.getCoins();
    DominionBoard dominionBoard20 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card21 = Card.adventurer;
    int i22 = card21.getCost();
    boolean b23 = dominionBoard20.availableCards(card21);
    player14.buyCard(card16, dominionBoard20);
    java.util.List<Card> list_card25 = dominionBoard20.allKC();
    Card card26 = player5.buyRandomCard(dominionBoard20);
    player5.treasureInHand();
    int i28 = player5.getPlayerNumber();
    int i29 = player5.getBuys();
    java.lang.String str30 = player5.getName();
    int i31 = player5.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.mine + "'", card16.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!"+ "'", str30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }

    DominionBoard dominionBoard2 = new DominionBoard((-1), (int)(short)0);
    boolean b3 = dominionBoard2.gameOver();
    DominionBoard dominionBoard8 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player9 = new Player("hi!", (int)' ', dominionBoard8);
    Card card10 = Card.cutpurse;
    card10.setVictory((-1));
    player9.discard(card10);
    java.util.List<Card> list_card14 = player9.getHand();
    dominionBoard2.setUpGame(list_card14, 5);
    java.util.List<Card> list_card17 = dominionBoard2.getNonEmptySupplyPiles();
    dominionBoard2.finalScores();
    DominionBoard dominionBoard21 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card22 = Card.adventurer;
    int i23 = card22.getCost();
    boolean b24 = dominionBoard21.availableCards(card22);
    dominionBoard2.takeCard(card22);
    java.util.List<Player> list_player26 = dominionBoard2.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.cutpurse + "'", card10.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.adventurer + "'", card22.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    Card card6 = Card.smithy;
    int i7 = card6.getCost();
    DominionBoard dominionBoard12 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player13 = new Player("hi!", (int)' ', dominionBoard12);
    boolean b14 = player13.actionsLeft();
    Card card15 = Card.mine;
    int i16 = card15.getCoins();
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card20 = Card.adventurer;
    int i21 = card20.getCost();
    boolean b22 = dominionBoard19.availableCards(card20);
    player13.buyCard(card15, dominionBoard19);
    player5.gainCardToHand(card6, dominionBoard19);
    java.util.List<Card> list_card26 = dominionBoard19.kingdomCards(15);
    java.util.List<Card> list_card28 = dominionBoard19.kingdomCards((int)(short)-1);
    Card card29 = Card.great_hall;
    card29.addEmbargoToCard();
    card29.addEmbargoToCard();
    dominionBoard19.trashCard(card29);
    int i33 = card29.getCost();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.smithy + "'", card6.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.mine + "'", card15.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.adventurer + "'", card20.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.great_hall + "'", card29.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 3);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    boolean b14 = player5.currentBuys();
    Card card15 = player5.drawCardFromDeck();
    int i16 = player5.getPlayerNumber();
    DominionBoard dominionBoard22 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player23 = new Player("hi!", (int)' ', dominionBoard22);
    boolean b24 = player23.actionsLeft();
    Card card25 = Card.curse;
    DominionBoard dominionBoard28 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card30 = dominionBoard28.getHighestValueCards(2);
    player23.gainCard(card25, dominionBoard28);
    int i32 = player23.getTotalVictoryPoints();
    java.lang.String str33 = player23.getName();
    DominionBoard dominionBoard38 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player39 = new Player("hi!", (int)' ', dominionBoard38);
    boolean b40 = player39.actionsLeft();
    Card card41 = Card.curse;
    DominionBoard dominionBoard44 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card46 = dominionBoard44.getHighestValueCards(2);
    player39.gainCard(card41, dominionBoard44);
    java.util.List<Player> list_player48 = dominionBoard44.players;
    DominionBoard dominionBoard53 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player54 = new Player("hi!", (int)' ', dominionBoard53);
    boolean b55 = player54.actionsLeft();
    Card card56 = Card.mine;
    int i57 = card56.getCoins();
    DominionBoard dominionBoard60 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card61 = Card.adventurer;
    int i62 = card61.getCost();
    boolean b63 = dominionBoard60.availableCards(card61);
    player54.buyCard(card56, dominionBoard60);
    Card card65 = Card.gold;
    DominionBoard dominionBoard68 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i69 = dominionBoard68.play();
    dominionBoard68.councilRoomHelper(100);
    java.util.List<Card> list_card72 = dominionBoard68.getNonEmptySupplyPiles();
    player54.gainCardToTopOfDeck(card65, dominionBoard68);
    card65.addEmbargoToCard();
    boolean b75 = dominionBoard44.availableCards(card65);
    Card card76 = player23.buyRandomCard(dominionBoard44);
    // The following exception was thrown during execution in test generation
    try {
    player5.playCard(28, dominionBoard44);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.estate + "'", card15.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.curse + "'", card25.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 191);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!"+ "'", str33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.curse + "'", card41.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.mine + "'", card56.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.adventurer + "'", card61.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.gold + "'", card65.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.curse + "'", card76.equals(Card.curse));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }

    DominionBoard dominionBoard6 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player7 = new Player("hi!", (int)' ', dominionBoard6);
    boolean b8 = player7.actionsLeft();
    Card card9 = Card.mine;
    int i10 = card9.getCoins();
    DominionBoard dominionBoard13 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card14 = Card.adventurer;
    int i15 = card14.getCost();
    boolean b16 = dominionBoard13.availableCards(card14);
    player7.buyCard(card9, dominionBoard13);
    dominionBoard13.councilRoomHelper(100);
    Player player20 = new Player("", (int)(byte)0, dominionBoard13);
    int i21 = player20.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.mine + "'", card9.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }

    Card card0 = Card.cutpurse;
    java.util.List<java.lang.String> list_str1 = card0.getTypes();
    card0.setVictory((int)'#');
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.cutpurse + "'", card0.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str1);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }

    DominionBoard dominionBoard2 = new DominionBoard(0, 0);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.mine;
    int i8 = card7.getCoins();
    DominionBoard dominionBoard11 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card12 = Card.adventurer;
    int i13 = card12.getCost();
    boolean b14 = dominionBoard11.availableCards(card12);
    player5.buyCard(card7, dominionBoard11);
    Card card16 = Card.gold;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i20 = dominionBoard19.play();
    dominionBoard19.councilRoomHelper(100);
    java.util.List<Card> list_card23 = dominionBoard19.getNonEmptySupplyPiles();
    player5.gainCardToTopOfDeck(card16, dominionBoard19);
    int i25 = player5.getPlayerNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.mine + "'", card7.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.gold + "'", card16.equals(Card.gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 32);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    int i7 = player5.getCoins();
    java.util.List<Card> list_card8 = player5.getHand();
    player5.discardCardsEndTurn();
    Card card10 = Card.great_hall;
    java.util.List<java.lang.String> list_str11 = card10.getTypes();
    int i12 = card10.getEmbargo();
    DominionBoard dominionBoard15 = new DominionBoard((int)(short)0, (int)(short)-1);
    int i16 = dominionBoard15.play();
    dominionBoard15.councilRoomHelper(100);
    java.util.List<Card> list_card19 = dominionBoard15.getNonEmptySupplyPiles();
    dominionBoard15.cutpurseHelper((int)'a');
    player5.gainCardToTopOfDeck(card10, dominionBoard15);
    Card card24 = Card.curse;
    dominionBoard15.ambassadorHelper((int)(byte)100, card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.great_hall + "'", card10.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 496);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.curse + "'", card24.equals(Card.curse));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }

    DominionBoard dominionBoard4 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player5 = new Player("hi!", (int)' ', dominionBoard4);
    boolean b6 = player5.actionsLeft();
    Card card7 = Card.curse;
    DominionBoard dominionBoard10 = new DominionBoard((int)(short)0, (int)(short)-1);
    java.util.List<Card> list_card12 = dominionBoard10.getHighestValueCards(2);
    player5.gainCard(card7, dominionBoard10);
    java.util.List<Player> list_player14 = dominionBoard10.players;
    DominionBoard dominionBoard19 = new DominionBoard((int)(short)0, (int)(short)-1);
    Player player20 = new Player("hi!", (int)' ', dominionBoard19);
    boolean b21 = player20.actionsLeft();
    Card card22 = Card.mine;
    int i23 = card22.getCoins();
    DominionBoard dominionBoard26 = new DominionBoard((int)(short)0, (int)(short)-1);
    Card card27 = Card.adventurer;
    int i28 = card27.getCost();
    boolean b29 = dominionBoard26.availableCards(card27);
    player20.buyCard(card22, dominionBoard26);
    java.util.LinkedList<Card> linkedlist_card31 = player20.getDeck();
    player20.addActions((int)(byte)-1);
    Card card34 = Card.cutpurse;
    int i35 = card34.getEmbargo();
    boolean b36 = player20.hasCard(card34);
    card34.addEmbargoToCard();
    dominionBoard10.returnCard(card34);
    int i39 = card34.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.curse + "'", card7.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.mine + "'", card22.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card31);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 4);

  }

}
