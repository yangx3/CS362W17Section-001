package dominion;

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 06:09:42 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Great_Hall_ESTest extends Great_Hall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      Player player0 = new Player(0, domGame0.rand);
      great_Hall0.actions = (-4);
      Deck deck0 = new Deck((Card) great_Hall0, 11);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      deck0.cards = (List<Card>) linkedList0;
      player0.draw = deck0;
      // Undeclared exception!
      try { 
        great_Hall0.dynamicValue(domGame0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(1306);
      Player player0 = domGame0.getWinner();
      player0.fillHand(domGame0.rand);
      Deck deck0 = new Deck((Card) great_Hall0, 7);
      player0.draw = deck0;
      player0.fillHand(domGame0.rand);
      player0.discardToDraw(domGame0.rand);
      player0.VP = 1306;
      player0.getCardCount();
      domGame0.turnCount = 6;
      great_Hall0.dynamicValue(domGame0, player0);
      Card.Type.values();
      Random.setNextRandom(12);
      Random.setNextRandom((-970));
      great_Hall0.play(domGame0, 1, 2378);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      great_Hall0.play(domGame0, 0, 0);
      Player player0 = domGame0.getWinner();
      player0.buyAI(domGame0);
      Deck deck0 = new Deck((Card) great_Hall0, 37);
      player0.hand = deck0;
      deck0.size = (-1865);
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.Type.values();
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      Player player0 = new Player(0, domGame0.rand);
      great_Hall0.actions = (-4);
      Deck deck0 = new Deck((Card) great_Hall0, 11);
      Player[] playerArray0 = new Player[7];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      playerArray0[6] = player0;
      domGame0.players = playerArray0;
      player0.draw = deck0;
      player0.discard = deck0;
      great_Hall0.dynamicValue(domGame0, player0);
      deck0.getSize();
      great_Hall0.play(domGame0, 3, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(1306);
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(7);
      domGame0.setupTable();
      Player player0 = domGame0.getWinner();
      player0.fillHand(domGame0.rand);
      player0.fillHand(domGame0.rand);
      player0.getTreasureCount();
      great_Hall0.cost = (-2516);
      great_Hall0.buys = 1306;
      player0.discardToDraw(domGame0.rand);
      player0.VP = 7;
      player0.getCardCount();
      great_Hall0.points = 10;
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      domGame0.rand = (java.util.Random) mockRandom0;
      domGame0.turnCount = 6;
      great_Hall0.dynamicValue(domGame0, player0);
      Card.Type.values();
      great_Hall0.description = "";
      Deck deck0 = player0.draw;
      player0.discard = deck0;
      Random.setNextRandom(12);
      great_Hall0.cardDraw = 0;
      Random.setNextRandom((-970));
      // Undeclared exception!
      try { 
        great_Hall0.play(domGame0, 1, 2378);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1306);
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(7);
      domGame0.setupTable();
      Player player0 = domGame0.getWinner();
      player0.fillHand(domGame0.rand);
      player0.fillHand(domGame0.rand);
      player0.getTreasureCount();
      great_Hall0.cost = (-2516);
      great_Hall0.buys = 1306;
      player0.discardToDraw(domGame0.rand);
      player0.VP = 7;
      great_Hall0.actions = 0;
      player0.getCardCount();
      great_Hall0.points = 10;
      domGame0.turnCount = 6;
      great_Hall0.dynamicValue(domGame0, player0);
      Card.Type.values();
      great_Hall0.description = "";
      Deck deck0 = player0.draw;
      player0.discard = deck0;
      Random.setNextRandom(12);
      Random.setNextRandom((-970));
      // Undeclared exception!
      try { 
        great_Hall0.play(domGame0, 1, 2378);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame((-9));
      great_Hall0.points = (-96);
      great_Hall0.play(domGame0, 0, (-9));
      Player player0 = domGame0.getWinner();
      player0.buyAI(domGame0);
      great_Hall0.print();
      Deck deck0 = new Deck((Card) great_Hall0, 37);
      player0.hand = deck0;
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame((-9));
      Player player0 = domGame0.getWinner();
      player0.fillHand(domGame0.rand);
      player0.fillHand(domGame0.rand);
      player0.discardToDraw(domGame0.rand);
      player0.VP = (-9);
      player0.getCardCount();
      great_Hall0.points = 10;
      domGame0.turnCount = 6;
      great_Hall0.dynamicValue(domGame0, player0);
      Card.Type.values();
      Random.setNextRandom(12);
      Random.setNextRandom((-970));
      // Undeclared exception!
      try { 
        great_Hall0.play(domGame0, 1, 2378);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      great_Hall0.play(domGame0, 0, 0);
      Player player0 = domGame0.getWinner();
      player0.buyAI(domGame0);
      great_Hall0.print();
      great_Hall0.actions = 0;
      Deck deck0 = new Deck((Card) great_Hall0, 37);
      player0.hand = deck0;
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.Type.values();
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      Player player0 = new Player(0, domGame0.rand);
      great_Hall0.actions = 0;
      player0.draw = player0.discard;
      player0.discard = player0.discard;
      // Undeclared exception!
      try { 
        great_Hall0.dynamicValue(domGame0, player0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         //assertThrownBy("Great_Hall", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.Type.values();
      Great_Hall great_Hall0 = new Great_Hall();
      MockRandom mockRandom0 = new MockRandom(1L);
      Player player0 = new Player((-5133), (java.util.Random) mockRandom0);
      great_Hall0.dynamicValue((DomGame) null, player0);
      // Undeclared exception!
      try { 
        great_Hall0.play((DomGame) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("Great_Hall", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      Card.Type card_Type0 = Card.Type.TREASURE;
      great_Hall0.cardType = card_Type0;
      DomGame domGame0 = new DomGame((-2197));
      domGame0.turnCount = (-2197);
      great_Hall0.cardDraw = 0;
      domGame0.gameSeed = (-1);
      Player player0 = new Player((-2197), domGame0.rand);
      player0.getAverageValue();
      player0.hand = null;
      // Undeclared exception!
      try { 
        great_Hall0.dynamicValue(domGame0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      float float0 = great_Hall0.dynamicValue(domGame0, player0);
      assertEquals(3.0F, float0, 0.01F);
      assertEquals(0.0F, great_Hall0.dynamicValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame((-5));
      domGame0.setupTable();
      Player player0 = domGame0.getWinner();
      player0.fillHand(domGame0.rand);
      player0.fillHand(domGame0.rand);
      player0.VP = (-5);
      player0.getCardCount();
      Random.setNextRandom(29);
      // Undeclared exception!
      try { 
        great_Hall0.play(domGame0, 1, 2375);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      Player player0 = new Player(0, domGame0.rand);
      great_Hall0.actions = 0;
      Deck deck0 = new Deck((Card) great_Hall0, 11);
      player0.draw = deck0;
      great_Hall0.dynamicValue(domGame0, player0);
      // Undeclared exception!
      try { 
        great_Hall0.play(domGame0, 11, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         //assertThrownBy("Great_Hall", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Great_Hall great_Hall0 = new Great_Hall();
      DomGame domGame0 = new DomGame(0);
      great_Hall0.play(domGame0, 0, 0);
      Player player0 = domGame0.getWinner();
      Deck deck0 = new Deck((Card) great_Hall0, 2);
      player0.hand = deck0;
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }
}
