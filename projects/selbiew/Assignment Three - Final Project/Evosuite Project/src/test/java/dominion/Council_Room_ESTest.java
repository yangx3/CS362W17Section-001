package dominion;

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 06:02:06 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Council_Room_ESTest extends Council_Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame((-870));
      council_Room0.cost = 2;
      Player player0 = new Player((-870), domGame0.rand);
      Smithy smithy0 = new Smithy();
      Deck deck0 = new Deck((Card) smithy0, (-870));
      deck0.update();
      player0.draw = deck0;
      domGame0.playerCount = 0;
      deck0.size = 2865;
      // Undeclared exception!
      try { 
        council_Room0.dynamicValue(domGame0, player0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame((-207));
      council_Room0.points = (-207);
      domGame0.gameSeed = 0;
      council_Room0.actions = (-207);
      council_Room0.value = 0;
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      domGame0.basicCards = (List<Deck>) linkedList0;
      council_Room0.play(domGame0, 0, (-207));
      domGame0.gameSeed = (-207);
      domGame0.playerCount = (-207);
      council_Room0.play(domGame0, 0, 0);
      // Undeclared exception!
      try { 
        council_Room0.play(domGame0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame((-201));
      List<Deck> list0 = domGame0.kingdomCards;
      domGame0.kingdomCards = list0;
      council_Room0.points = (-201);
      council_Room0.buys = 0;
      council_Room0.value = 0;
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      council_Room0.play(domGame0, 0, (-201));
      domGame0.gameSeed = (-201);
      domGame0.playerCount = (-201);
      Player[] playerArray0 = new Player[3];
      Player player0 = domGame0.getWinner();
      playerArray0[0] = player0;
      Player player1 = domGame0.getWinner();
      playerArray0[1] = player1;
      Player player2 = new Player(0, domGame0.rand);
      playerArray0[2] = player2;
      domGame0.players = playerArray0;
      council_Room0.play(domGame0, 0, 0);
      // Undeclared exception!
      try { 
        council_Room0.play(domGame0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.Type.values();
      Random.setNextRandom((-228));
      Card.Type.values();
      Council_Room council_Room0 = new Council_Room();
      council_Room0.print();
      DomGame domGame0 = new DomGame((-239));
      Player player0 = domGame0.getWinner();
      council_Room0.print();
      council_Room0.value = 1;
      Deck deck0 = player0.draw;
      player0.discard = deck0;
      player0.actions = (-1301);
      council_Room0.dynamicValue(domGame0, player0);
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      Card.Type.values();
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame(1156);
      Player[] playerArray0 = new Player[9];
      Player player0 = domGame0.getWinner();
      playerArray0[0] = player0;
      Player player1 = domGame0.getWinner();
      playerArray0[1] = player1;
      MockRandom mockRandom0 = new MockRandom();
      Player player2 = new Player(2036, (java.util.Random) mockRandom0);
      playerArray0[2] = player2;
      Player player3 = domGame0.getWinner();
      playerArray0[3] = player3;
      Player player4 = new Player(2036, (java.util.Random) mockRandom0);
      playerArray0[4] = player4;
      Player player5 = domGame0.getWinner();
      playerArray0[5] = player5;
      Player player6 = new Player(5, domGame0.rand);
      player5.VP = 0;
      player0.takeTurn(domGame0);
      playerArray0[7] = player6;
      Player player7 = new Player(0, (java.util.Random) mockRandom0);
      playerArray0[7] = player7;
      MockRandom mockRandom1 = new MockRandom();
      Player player8 = new Player(0, (java.util.Random) mockRandom1);
      playerArray0[8] = player8;
      domGame0.players = playerArray0;
      player7.getActionCount();
      council_Room0.play(domGame0, 0, 1);
      Card.Type.values();
      Council_Room council_Room1 = new Council_Room();
      Card.Type.values();
      Card.Type card_Type0 = Card.Type.valueOf("VICTORY");
      assertEquals("VICTORY", card_Type0.name());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(0);
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame(0);
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      domGame0.kingdomCards = (List<Deck>) linkedList0;
      Player player0 = domGame0.getWinner();
      Player player1 = new Player(0, domGame0.rand);
      domGame0.basicCards = (List<Deck>) linkedList0;
      Deck deck0 = player1.discard;
      deck0.update();
      player0.discard = player1.hand;
      deck0.getVictory();
      player0.draw = deck0;
      // Undeclared exception!
      try { 
        council_Room0.dynamicValue(domGame0, player0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         //assertThrownBy("Council_Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame((-200));
      council_Room0.points = (-200);
      council_Room0.buys = (-200);
      council_Room0.value = (-200);
      council_Room0.play(domGame0, 0, (-200));
      domGame0.gameSeed = (-200);
      council_Room0.play(domGame0, 0, 0);
      // Undeclared exception!
      try { 
        council_Room0.play(domGame0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      // Undeclared exception!
      try { 
        council_Room0.dynamicValue((DomGame) null, (Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("Council_Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame((-478));
      domGame0.turnCount = 5;
      Player player0 = domGame0.getWinner();
      player0.VP = 746;
      council_Room0.play(domGame0, 1, 5);
      assertEquals(0.0F, council_Room0.dynamicValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      council_Room0.cost = 1362;
      DomGame domGame0 = new DomGame(1362);
      Player player0 = new Player(1362, domGame0.rand);
      Deck deck0 = new Deck((Card) council_Room0, 2);
      player0.draw = deck0;
      council_Room0.dynamicValue(domGame0, player0);
      DomGame domGame1 = new DomGame((-267));
      // Undeclared exception!
      try { 
        domGame1.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      // Undeclared exception!
      try { 
        council_Room0.play((DomGame) null, (-3318), (-3318));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("Council_Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom(2029);
      Random.setNextRandom(2029);
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame(2029);
      Player player0 = new Player(0, domGame0.rand);
      council_Room0.dynamicValue(domGame0, player0);
      Estate estate0 = new Estate();
      Deck deck0 = new Deck((Card) estate0, (-292));
      deck0.addCard(council_Room0);
      player0.discard = deck0;
      council_Room0.dynamicValue(domGame0, player0);
      // Undeclared exception!
      try { 
        council_Room0.play(domGame0, 2882, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2882
         //
         //assertThrownBy("Council_Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame((-200));
      council_Room0.play(domGame0, 0, (-200));
      council_Room0.play(domGame0, 0, 0);
      // Undeclared exception!
      try { 
        council_Room0.play(domGame0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Council_Room council_Room0 = new Council_Room();
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      player0.takeTurn(domGame0);
      council_Room0.play(domGame0, 0, 0);
      float float0 = council_Room0.dynamicValue(domGame0, player0);
      assertEquals(0.0F, council_Room0.dynamicValue(), 0.01F);
      assertEquals(3.7727273F, float0, 0.01F);
  }
}
