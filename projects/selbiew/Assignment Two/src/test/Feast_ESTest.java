/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 06:05:18 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Feast_ESTest extends Feast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame((-1444));
      Player player0 = domGame0.getWinner();
      Deck deck0 = new Deck((Card) feast0, 3);
      player0.draw = deck0;
      feast0.dynamicValue(domGame0, player0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      feast0.points = (-123);
      player0.takeTurn(domGame0);
      feast0.play(domGame0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame(0);
      feast0.value = 2;
      Player player0 = domGame0.getWinner();
      player0.takeTurn(domGame0);
      feast0.play(domGame0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Feast feast0 = new Feast();
      feast0.actions = 1;
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      player0.takeTurn(domGame0);
      feast0.play(domGame0, 1, 3);
      assertEquals(0.0F, feast0.dynamicValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Feast feast0 = new Feast();
      feast0.buys = (-1051);
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      player0.takeTurn(domGame0);
      feast0.play(domGame0, 1, 3);
      assertEquals(0.0F, feast0.dynamicValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      player0.takeTurn(domGame0);
      domGame0.kingdomCards = null;
      // Undeclared exception!
      try { 
        feast0.play(domGame0, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Feast", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame(0);
      // Undeclared exception!
      try { 
        feast0.play(domGame0, 0, 0);
        fail("Expecting exception: IndexoutofBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame((-1444));
      // Undeclared exception!
      try { 
        feast0.play(domGame0, (-3), 0);
        fail("Expecting exception: ArrayIndexoutofBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         assertThrownBy("Feast", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Feast feast0 = new Feast();
      // Undeclared exception!
      try { 
        feast0.dynamicValue((DomGame) null, (Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Feast", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame(6);
      Player player0 = domGame0.getWinner();
      Player player1 = new Player(0, domGame0.rand);
      player0.draw = player1.hand;
      // Undeclared exception!
      try { 
        feast0.dynamicValue(domGame0, player0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("Feast", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Feast feast0 = new Feast();
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      float float0 = feast0.dynamicValue(domGame0, player0);
      assertEquals(0.0F, feast0.dynamicValue(), 0.01F);
      assertEquals(4.0F, float0, 0.01F);
  }
}
