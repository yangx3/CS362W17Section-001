/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 05:43:54 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.getTreasureCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DomGame domGame0 = new DomGame(1);
      Player player0 = domGame0.getWinner();
      DomGame domGame1 = new DomGame(1);
      domGame1.turnCount = 3;
      domGame1.rand = domGame0.rand;
      player0.buyAI(domGame1);
      int int0 = player0.VP;
      player0.takeTurn(domGame0);
      player0.totalPoints();
      domGame1.turnCount = 1897;
      player0.getAverageValue();
      player0.actions = 0;
      player0.takeTurn(domGame0);
      int int1 = player0.ID;
      domGame0.playerCount = (-32);
      player0.getActionCount();
      player0.getAverageValue();
      player0.fillHand(domGame1.rand);
      player0.buyCard(domGame1, 2174, "");
      player0.takeTurn(domGame1);
      Player player1 = domGame0.getWinner();
      player1.actions = (-32);
      player1.actionAI(domGame1);
      player1.bonusCoins = 1897;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((long) 774);
      Player player0 = new Player(774, (Random) mockRandom0);
      mockRandom0.longs((long) 0, 0L, (long) 774);
      mockRandom0.nextLong();
      int int0 = player0.bonusCoins;
      mockRandom0.longs();
      player0.getTreasureCount();
      Card.Type.values();
      Card.Type.values();
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.getAverageValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.fillHand(mockRandom0);
      player0.bonusCoins = 9;
      player0.bonusCoins = 7;
      player0.totalPoints();
      mockRandom0.ints();
      DomGame domGame0 = new DomGame(7);
      player0.takeTurn(domGame0);
      int int0 = player0.buys;
      mockRandom0.nextDouble();
      player0.buys = 7;
      player0.buyAI(domGame0);
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player(0, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      mockRandom0.ints(3, 2370);
      player0.buys = 0;
      player0.getActionCount();
      player0.getCardCount();
      DomGame domGame0 = new DomGame((-1593));
      player0.takeTurn(domGame0);
      domGame0.setupTable();
      int int0 = player0.VP;
      Deck deck0 = player0.hand;
      deck0.size = 1972;
      // Undeclared exception!
      try { 
        player0.getActionCount();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DomGame domGame0 = new DomGame((-1586));
      Player player0 = domGame0.getWinner();
      Deck deck0 = player0.draw;
      player0.discard = deck0;
      player0.buyCard(domGame0, (-1586), "Province");
      int int0 = player0.buys;
      // Undeclared exception!
      try { 
        player0.discardToDraw(domGame0.rand);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.fillHand(mockRandom0);
      player0.bonusCoins = 9;
      player0.bonusCoins = (-1576);
      player0.totalPoints();
      DomGame domGame0 = new DomGame((-1576));
      player0.takeTurn(domGame0);
      int int0 = player0.buys;
      player0.fillHand(domGame0.rand);
      player0.buys = 7;
      player0.buyAI(domGame0);
      // Undeclared exception!
      try { 
        player0.takeTurn(domGame0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1576
         //
         assertThrownBy("Cutpurse", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DomGame domGame0 = new DomGame(197);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player((-10), (Random) mockRandom0);
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      Deck deck0 = new Deck();
      player0.hand = deck0;
      domGame0.basicCards = (List<Deck>) linkedList0;
      linkedList0.push(player0.draw);
      domGame0.kingdomCards = (List<Deck>) linkedList0;
      Deck deck1 = player0.hand;
      linkedList0.add(player0.hand);
      player0.draw = deck1;
      // Undeclared exception!
      try { 
        player0.buyCard(domGame0, (-10), "m& ((ik_D$p/$-LT$;");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.fillHand(mockRandom0);
      player0.bonusCoins = 9;
      player0.bonusCoins = (-1576);
      player0.totalPoints();
      mockRandom0.ints();
      DomGame domGame0 = new DomGame((-1576));
      player0.takeTurn(domGame0);
      int int0 = player0.buys;
      player0.fillHand(domGame0.rand);
      domGame0.kingdomCards = null;
      player0.buys = 7;
      // Undeclared exception!
      try { 
        player0.buyAI(domGame0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DomGame domGame0 = new DomGame(7);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      domGame0.rand = (Random) mockRandom0;
      MockRandom mockRandom1 = (MockRandom)domGame0.rand;
      Player player0 = domGame0.getWinner();
      player0.draw = null;
      // Undeclared exception!
      try { 
        player0.getCardCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.bonusCoins = 9;
      player0.bonusCoins = (-1576);
      player0.totalPoints();
      mockRandom0.ints();
      DomGame domGame0 = new DomGame((-1576));
      int int0 = player0.buys;
      player0.fillHand(domGame0.rand);
      player0.buyAI(domGame0);
      player0.discardToDraw(domGame0.rand);
      player0.fillHand(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      player0.getTreasureCount();
      player0.bonusCoins = 9;
      player0.bonusCoins = (-1576);
      player0.totalPoints();
      mockRandom0.ints();
      DomGame domGame0 = new DomGame((-1576));
      int int0 = player0.buys;
      player0.fillHand(domGame0.rand);
      player0.buyAI(domGame0);
      player0.discardToDraw(domGame0.rand);
      player0.fillHand(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DomGame domGame0 = new DomGame(630);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player(630, (Random) mockRandom0);
      Council_Room council_Room0 = new Council_Room();
      Deck deck0 = new Deck((Card) council_Room0, (-716));
      player0.discard = deck0;
      org.evosuite.runtime.Random.setNextRandom((-341));
      player0.buyAI(domGame0);
      player0.ID = (-702);
      player0.buyAI(domGame0);
      player0.getCardCount();
      int int0 = player0.actions;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DomGame domGame0 = new DomGame((-1328));
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player((-1328), (Random) mockRandom0);
      player0.takeTurn(domGame0);
      List<Deck> list0 = domGame0.basicCards;
      domGame0.basicCards = list0;
      player0.discardToDraw(domGame0.rand);
      player0.getAverageValue();
      player0.getCardCount();
      Embargo embargo0 = new Embargo();
      Deck deck0 = new Deck((Card) embargo0, (-1328));
      deck0.getTreasure();
      player0.discard = deck0;
      player0.getAverageValue();
      Card.Type.values();
      player0.fillHand(mockRandom0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DomGame domGame0 = new DomGame(1488);
      Player player0 = domGame0.getWinner();
      domGame0.playerCount = 0;
      player0.getTreasureCount();
      player0.fillHand(domGame0.rand);
      player0.actions = 1488;
      // Undeclared exception!
      try { 
        player0.actionAI(domGame0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.fillHand(mockRandom0);
      player0.bonusCoins = 9;
      player0.bonusCoins = 7;
      player0.totalPoints();
      mockRandom0.ints();
      DomGame domGame0 = new DomGame(7);
      Baron baron0 = new Baron();
      Deck deck0 = new Deck((Card) baron0, (-943));
      player0.discard = deck0;
      player0.takeTurn(domGame0);
      int int0 = player0.buys;
      // Undeclared exception!
      try { 
        player0.fillHand(domGame0.rand);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DomGame domGame0 = new DomGame(8);
      Player player0 = domGame0.getWinner();
      player0.bonusCoins = 0;
      Deck deck0 = player0.hand;
      player0.draw = deck0;
      player0.actions = 8;
      Player player1 = new Player(0, domGame0.rand);
      player0.getCardCount();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      player0.getCardCount();
      player0.fillHand(domGame0.rand);
      player0.totalPoints();
      player0.fillHand(domGame0.rand);
      int int0 = player0.bonusCoins;
      Deck deck0 = new Deck();
      player0.draw = deck0;
      player0.buyCard(domGame0, 3, (String) null);
      player0.hand = null;
      Card.Type.values();
      player0.draw = null;
      player0.draw = null;
      // Undeclared exception!
      try { 
        player0.getActionCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DomGame domGame0 = new DomGame(0);
      domGame0.playerCount = 10;
      domGame0.rand = null;
      Player player0 = domGame0.getWinner();
      // Undeclared exception!
      try { 
        player0.discardToDraw((Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DomGame domGame0 = new DomGame(0);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player(2219, (Random) mockRandom0);
      domGame0.setupTable();
      Player player1 = new Player(1405, (Random) mockRandom0);
      Deck deck0 = player1.draw;
      player0.hand = deck0;
      player0.totalPoints();
      player0.takeTurn(domGame0);
      Deck deck1 = player0.hand;
      player0.getActionCount();
      player0.discard = deck1;
      player0.hand = deck1;
      player0.buyAI(domGame0);
      player0.getTreasureCount();
      player0.getActionCount();
      player0.bonusCoins = 6;
      player0.buyAI(domGame0);
      DomGame domGame1 = null;
      try {
        domGame1 = new DomGame(6);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DomGame domGame0 = new DomGame(9);
      Player player0 = domGame0.getWinner();
      domGame0.playerCount = 1;
      player0.draw = null;
      List<Deck> list0 = domGame0.basicCards;
      domGame0.basicCards = list0;
      Deck deck0 = player0.discard;
      // Undeclared exception!
      try { 
        player0.getTotalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DomGame domGame0 = new DomGame(709);
      domGame0.gameSeed = 709;
      domGame0.setupTable();
      domGame0.turnCount = 1341;
      Player player0 = domGame0.getWinner();
      player0.bonusCoins = 709;
      player0.buyAI(domGame0);
      player0.getTreasureCount();
      Deck deck0 = player0.draw;
      Cutpurse cutpurse0 = new Cutpurse();
      deck0.addCard(cutpurse0);
      deck0.getValue();
      player0.getTotalValue();
      Player player1 = domGame0.getWinner();
      player1.discard = player0.hand;
      deck0.getTreasure();
      player1.hand = player0.draw;
      player0.getCardCount();
      player0.getCardCount();
      player1.VP = 30;
      player0.hand = deck0;
      deck0.size = 1;
      player0.discard = deck0;
      Player player2 = new Player((-5994), domGame0.rand);
      player2.bonusCoins = 1;
      player0.totalPoints();
      player0.buys = 1;
      player2.draw = null;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.Type.values();
      DomGame domGame0 = new DomGame(0);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player(7, (Random) mockRandom0);
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.takeTurn(domGame0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DomGame domGame0 = new DomGame(0);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player(0, (Random) mockRandom0);
      Deck deck0 = player0.discard;
      player0.discard = deck0;
      Player player1 = domGame0.getWinner();
      player1.discard = player0.discard;
      player1.hand = player0.discard;
      player1.discard.embargoes = 0;
      domGame0.setupTable();
      Deck deck1 = player1.draw;
      // Undeclared exception!
      try { 
        player1.takeTurn(domGame0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt((-223));
      Player player0 = new Player((-223), (Random) mockRandom0);
      player0.getTotalValue();
      player0.ID = 7;
      Deck deck0 = player0.hand;
      player0.hand = deck0;
      player0.actions = 0;
      deck0.treasureCount = 9;
      mockRandom0.setSeed(1548L);
      int int0 = player0.bonusCoins;
      // Undeclared exception!
      try { 
        player0.buyCard((DomGame) null, (-1749), "}SMHUv\"Ugm?,z'R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DomGame domGame0 = new DomGame((-605));
      Player player0 = domGame0.getWinner();
      player0.buyCard(domGame0, (-605), "GB`u'bL");
      Deck deck0 = player0.discard;
      int int0 = player0.buys;
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DomGame domGame0 = new DomGame((-1));
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      domGame0.basicCards = (List<Deck>) linkedList0;
      Player player0 = domGame0.getWinner();
      Deck deck0 = new Deck();
      player0.draw = deck0;
      player0.buys = (-336);
      player0.actions = (-336);
      player0.getTotalValue();
      Deck deck1 = player0.discard;
      domGame0.setupTable();
      player0.bonusCoins = 0;
      player0.draw = deck1;
      Deck deck2 = player0.draw;
      player0.getTotalValue();
      player0.getTreasureCount();
      // Undeclared exception!
      try { 
        player0.takeTurn(domGame0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.fillHand(mockRandom0);
      player0.bonusCoins = 9;
      player0.bonusCoins = (-1576);
      player0.totalPoints();
      DomGame domGame0 = new DomGame((-1576));
      player0.takeTurn(domGame0);
      int int0 = player0.buys;
      player0.fillHand(domGame0.rand);
      player0.buys = (-1576);
      player0.buyAI(domGame0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1640);
      DomGame domGame0 = new DomGame(1640);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      domGame0.gameSeed = 1375;
      domGame0.turnCount = 1640;
      Player player0 = new Player(1640, (Random) mockRandom0);
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      domGame0.basicCards = (List<Deck>) linkedList0;
      player0.fillHand(domGame0.rand);
      player0.actionAI(domGame0);
      player0.buys = 1640;
      int int0 = player0.bonusCoins;
      // Undeclared exception!
      try { 
        player0.buyAI(domGame0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      mockRandom0.nextBoolean();
      Player player0 = new Player((-1), (Random) mockRandom0);
      DomGame domGame0 = new DomGame(0);
      player0.buyAI(domGame0);
      domGame0.gameSeed = 708;
      mockRandom0.nextDouble();
      mockRandom0.nextBoolean();
      player0.discardToDraw(mockRandom0);
      player0.actions = 0;
      player0.takeTurn(domGame0);
      List<Deck> list0 = domGame0.kingdomCards;
      domGame0.kingdomCards = list0;
      int int0 = player0.buys;
      mockRandom0.ints();
      player0.buyCard(domGame0, 708, "Gaining ");
      player0.ID = (-266);
      Player player1 = new Player((-2247), (Random) mockRandom0);
      player1.hand = null;
      // Undeclared exception!
      try { 
        player1.fillHand(domGame0.rand);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player((-124), (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DomGame domGame0 = new DomGame(7);
      Player player0 = domGame0.getWinner();
      player0.ID = 7;
      player0.VP = 0;
      Player[] playerArray0 = new Player[8];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      playerArray0[6] = player0;
      Player player1 = domGame0.getWinner();
      playerArray0[7] = player1;
      domGame0.players = playerArray0;
      player0.discardToDraw(domGame0.rand);
      player0.discardToDraw(domGame0.rand);
      player0.buyAI(domGame0);
      player0.getActionCount();
      player0.getCardCount();
      int int0 = player0.VP;
      player0.discardToDraw(domGame0.rand);
      int int1 = player0.VP;
      player0.totalPoints();
      player1.getActionCount();
      domGame0.playerCount = 10;
      player1.takeTurn(domGame0);
      Player player2 = new Player(0, domGame0.rand);
      player0.buyCard(domGame0, 0, "Ambassador");
      Deck deck0 = player0.discard;
      player0.fillHand(domGame0.rand);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((long) 28);
      Player player0 = new Player(28, (Random) mockRandom0);
      player0.getTreasureCount();
      mockRandom0.ints();
      player0.getTreasureCount();
      Deck deck0 = player0.discard;
      DomGame domGame0 = new DomGame(8);
      player0.buyCard(domGame0, 448, "Ambassador");
      player0.buys = 2;
      player0.getActionCount();
      mockRandom0.nextDouble();
      player0.buys = 1;
      DomGame domGame1 = new DomGame(28);
      // Undeclared exception!
      try { 
        player0.actionAI(domGame1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DomGame domGame0 = new DomGame((-3125));
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player(9, (Random) mockRandom0);
      player0.buyAI(domGame0);
      player0.actions = (-3125);
      player0.buyCard(domGame0, 0, "=>m}8paDHn4V18h");
      Card.Type.values();
      player0.takeTurn(domGame0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DomGame domGame0 = new DomGame(0);
      Player player0 = domGame0.getWinner();
      player0.takeTurn(domGame0);
      domGame0.setupTable();
      int int0 = player0.bonusCoins;
      player0.getTreasureCount();
      Deck deck0 = player0.draw;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DomGame domGame0 = new DomGame((-340));
      Player player0 = domGame0.getWinner();
      Player[] playerArray0 = new Player[7];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      Player player1 = new Player(1652, domGame0.rand);
      playerArray0[2] = player1;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      Player player2 = domGame0.getWinner();
      playerArray0[5] = player2;
      playerArray0[6] = player0;
      domGame0.players = playerArray0;
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1507L));
      Player player0 = new Player(0, (Random) mockRandom0);
      DomGame domGame0 = new DomGame(0);
      player0.takeTurn(domGame0);
      List<Deck> list0 = domGame0.basicCards;
      domGame0.basicCards = list0;
      player0.buyAI(domGame0);
      Deck deck0 = player0.hand;
      Card.Type.values();
      int int0 = player0.VP;
      player0.actionAI(domGame0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DomGame domGame0 = new DomGame((-4162));
      domGame0.setupTable();
      Player player0 = domGame0.getWinner();
      // Undeclared exception!
      try { 
        player0.actionAI(domGame0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player(351, (Random) mockRandom0);
      player0.totalPoints();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      DomGame domGame0 = new DomGame(10);
      Player player0 = new Player((-2500), domGame0.rand);
      player0.buyCard(domGame0, 10, "Silver");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-827));
      DomGame domGame0 = new DomGame((-827));
      Player player0 = new Player(0, domGame0.rand);
      player0.getActionCount();
      player0.buyAI(domGame0);
      player0.getTotalValue();
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DomGame domGame0 = new DomGame(197);
      MockRandom mockRandom0 = (MockRandom)domGame0.rand;
      Player player0 = new Player(10, (Random) mockRandom0);
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      linkedList0.push(player0.draw);
      domGame0.kingdomCards = (List<Deck>) linkedList0;
      Deck deck0 = player0.hand;
      linkedList0.add(player0.hand);
      player0.draw = deck0;
      // Undeclared exception!
      try { 
        player0.buyCard(domGame0, 10, "m& ((ik_D$p/$-LT$;");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.fillHand(mockRandom0);
      player0.bonusCoins = 9;
      player0.bonusCoins = 7;
      player0.totalPoints();
      mockRandom0.ints();
      DomGame domGame0 = new DomGame(7);
      player0.takeTurn(domGame0);
      int int0 = player0.buys;
      player0.fillHand(domGame0.rand);
      mockRandom0.nextDouble();
      player0.buys = 7;
      player0.buyAI(domGame0);
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      Player player0 = new Player((-1576), (Random) mockRandom0);
      mockRandom0.nextGaussian();
      player0.getAverageValue();
      mockRandom0.nextFloat();
      player0.getTreasureCount();
      player0.bonusCoins = 9;
      player0.totalPoints();
      DomGame domGame0 = new DomGame(9);
      // Undeclared exception!
      try { 
        domGame0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DomGame domGame0 = new DomGame(1);
      Player player0 = domGame0.getWinner();
      DomGame domGame1 = new DomGame(1);
      domGame1.rand = domGame0.rand;
      player0.buyAI(domGame1);
      int int0 = player0.VP;
      player0.takeTurn(domGame0);
      player0.totalPoints();
      player0.getAverageValue();
      player0.actions = 0;
      player0.takeTurn(domGame0);
      int int1 = player0.ID;
      player0.getActionCount();
      player0.getAverageValue();
      player0.fillHand(domGame1.rand);
      player0.buyCard(domGame1, 1, "");
      player0.takeTurn(domGame1);
      Player player1 = domGame0.getWinner();
      player1.actions = 2;
      player1.actionAI(domGame1);
      player1.bonusCoins = 0;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player(0, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      mockRandom0.ints(3, 2370);
      player0.buys = 0;
      mockRandom0.longs((long) 0, (-3215L), 1L);
      player0.getActionCount();
      player0.getCardCount();
      DomGame domGame0 = new DomGame((-1593));
      player0.takeTurn(domGame0);
      domGame0.setupTable();
      int int0 = player0.VP;
      Deck deck0 = player0.hand;
      player0.getActionCount();
      player0.discard = player0.hand;
      Card.Type.values();
      player0.discardToDraw(mockRandom0);
      player0.getCardCount();
      LinkedList<Deck> linkedList0 = new LinkedList<Deck>();
      linkedList0.add(player0.discard);
      domGame0.kingdomCards = (List<Deck>) linkedList0;
      player0.getTotalValue();
      linkedList0.add(player0.discard);
      deck0.size = 0;
      player0.getAverageValue();
      domGame0.basicCards = (List<Deck>) linkedList0;
      linkedList0.removeLast();
      // Undeclared exception!
      try { 
        player0.takeTurn(domGame0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }
}
