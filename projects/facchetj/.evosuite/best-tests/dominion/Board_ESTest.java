/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 07:55:30 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Board;
import dominion.Card;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Board board0 = new Board(1501);
      board0.giveCard(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Board board0 = new Board(17);
      board0.giveCard(17);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Board board0 = new Board(0);
      board0.setEmbargo(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Board board0 = new Board(3995);
      int[] intArray0 = new int[10];
      intArray0[0] = 3995;
      board0.pioche_number = intArray0;
      Card[] cardArray0 = new Card[8];
      board0.pioche_card = cardArray0;
      board0.giveCard(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Board board0 = new Board(218);
      Card card0 = board0.giveCard(218);
      card0.valeur = (-19708);
      Card[] cardArray0 = new Card[7];
      cardArray0[4] = card0;
      board0.pioche_card = cardArray0;
      board0.giveCard(4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Board board0 = new Board((-2738));
      Card[] cardArray0 = new Card[3];
      Card card0 = new Card((-2979));
      cardArray0[0] = card0;
      card0.prix = 762;
      board0.pioche_card = cardArray0;
      card0.prix = (-705);
      board0.giveCard(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Board board0 = new Board(5);
      Card card0 = board0.giveCard(5);
      assertFalse(board0.gameDone());
      assertEquals(3, card0.pointVictoire);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Board board0 = new Board(6);
      Card card0 = board0.giveCard(6);
      assertEquals(7, card0.id);
      assertFalse(board0.gameDone());
      assertNotNull(card0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Board board0 = new Board(0);
      Card[] cardArray0 = new Card[1];
      Card card0 = new Card(0);
      cardArray0[0] = card0;
      board0.pioche_card = cardArray0;
      Card card1 = board0.giveCard(0);
      assertFalse(board0.gameDone());
      assertEquals(0, card1.id);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Board board0 = new Board(4);
      board0.pioche_card = null;
      board0.getCards();
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Board board0 = new Board((-2755));
      Card[] cardArray0 = new Card[0];
      board0.pioche_card = cardArray0;
      board0.getCards();
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Board board0 = new Board(0);
      Card[] cardArray0 = new Card[1];
      Card card0 = new Card(0);
      cardArray0[0] = card0;
      board0.pioche_card = cardArray0;
      board0.getCardName(0);
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Board board0 = new Board(0);
      Card[] cardArray0 = new Card[2];
      Card card0 = board0.giveCard((-8914));
      cardArray0[0] = card0;
      card0.nom = "";
      assertEquals(-1, card0.getId());
      
      board0.pioche_card = cardArray0;
      board0.getCardName(0);
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Board board0 = new Board(0);
      board0.pioche_number = board0.embargo;
      int int0 = board0.getAvailability(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Board board0 = new Board(3995);
      assertTrue(board0.gameDone());
      
      int[] intArray0 = new int[10];
      intArray0[0] = 3995;
      board0.pioche_number = intArray0;
      int int0 = board0.getAvailability(0);
      assertEquals(3995, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Board board0 = new Board(3995);
      // Undeclared exception!
      try { 
        board0.setTrash((-1204), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1204
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Board board0 = new Board(3080);
      // Undeclared exception!
      try { 
        board0.setToDraw(3080, 3080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3080
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Board board0 = new Board(1);
      board0.embargo = null;
      // Undeclared exception!
      try { 
        board0.setEmbargo(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Board board0 = new Board((-3512));
      board0.pioche_card = null;
      // Undeclared exception!
      try { 
        board0.giveCard(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Board board0 = new Board(6);
      Card[] cardArray0 = new Card[1];
      board0.pioche_card = cardArray0;
      // Undeclared exception!
      try { 
        board0.giveCard(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Board board0 = new Board(6);
      // Undeclared exception!
      try { 
        board0.getToDraw(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Board board0 = new Board(3039);
      board0.pioche_card = null;
      // Undeclared exception!
      try { 
        board0.getCardName(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Board board0 = new Board(0);
      // Undeclared exception!
      try { 
        board0.getCardName((-1791));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1791
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Board board0 = new Board(0);
      board0.pioche_number = board0.pioche_number;
      board0.pioche_number = null;
      // Undeclared exception!
      try { 
        board0.getAvailability(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Board board0 = new Board(4);
      int[] intArray0 = new int[3];
      board0.pioche_number = intArray0;
      // Undeclared exception!
      try { 
        board0.getAvailability(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Board board0 = new Board(2010);
      board0.pioche_number = null;
      // Undeclared exception!
      try { 
        board0.gameDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Board board0 = new Board(218);
      int[] intArray0 = new int[1];
      board0.pioche_number = intArray0;
      // Undeclared exception!
      try { 
        board0.gameDone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Board board0 = new Board(218);
      boolean boolean0 = board0.gameDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Board board0 = new Board(0);
      boolean boolean0 = board0.gameDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Board board0 = new Board(0);
      assertFalse(board0.gameDone());
      
      board0.pioche_number = board0.copperToTrash;
      Card card0 = board0.giveCard(0);
      assertEquals((-1), card0.id);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Board board0 = new Board(0);
      Card card0 = board0.giveCard(0);
      assertFalse(board0.gameDone());
      assertNotNull(card0);
      assertEquals(1, card0.valeur);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Board board0 = new Board(0);
      board0.setTrash(0, 2553);
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Board board0 = new Board((-2755));
      board0.getCards();
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Board board0 = new Board(0);
      // Undeclared exception!
      try { 
        board0.setEmbargo(987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 987
         //
         assertThrownBy("dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Board board0 = new Board(0);
      board0.setToDraw(0, 543);
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Board board0 = new Board(0);
      board0.getToDraw(0);
      assertFalse(board0.gameDone());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Board board0 = new Board(218);
      int[] intArray0 = board0.getTrash();
      assertTrue(board0.gameDone());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Board board0 = new Board(3995);
      int int0 = board0.getAvailability(0);
      assertTrue(board0.gameDone());
      assertEquals((-27835), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Board board0 = new Board(0);
      String string0 = board0.getCardName(0);
      assertFalse(board0.gameDone());
      assertEquals("copper", string0);
      assertNotNull(string0);
  }
}
