/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 23:46:59 GMT 2017
 */

package Dominion.RandomTestDominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Dominion.RandomTestDominion.Board;
import Dominion.RandomTestDominion.Card;
import Dominion.RandomTestDominion.Player;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Board board0 = new Board(132);
      Player player0 = new Player(132);
      player0.vPoints = 132;
      player0.playK("", board0);
      List<Card> list0 = player0.hand;
      player0.turn(board0, ",!2ei/");
      board0.supply = list0;
      board0.gameEnd();
      List<Card> list1 = board0.supply;
      int[] intArray0 = new int[0];
      board0.em = intArray0;
      List<String> list2 = board0.embargo;
      board0.available(8);
      board0.em = intArray0;
      board0.curse = list0;
      board0.buy(132, "fF4rF1xAo>O+EC,SJ", player0.deck);
      board0.buy(0, "", player0.hand);
      board0.em = intArray0;
      Board board1 = new Board(8);
      board1.embargo = list2;
      int[] intArray1 = board1.em;
      board0.em = intArray0;
      Board board2 = new Board((-1));
      board2.gameEnd();
      int[] intArray2 = board1.em;
      int[] intArray3 = board0.em;
      board0.available((-1957));
      board2.gameEnd();
      board2.buy(5, "But they could not play it as they do not have any treasure cards", board0.supply);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Board board0 = new Board(0);
      List<String> list0 = board0.available((-965));
      board0.embargo = list0;
      board0.curse = null;
      board0.supply = null;
      // Undeclared exception!
      try { 
        board0.buy(0, "v}", (List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Board board0 = new Board(0);
      int[] intArray0 = board0.em;
      Player player0 = new Player(0);
      player0.deck = board0.curse;
      List<Card> list0 = player0.deck;
      board0.buy(0, "Province", list0);
      board0.curse = player0.hand;
      List<Card> list1 = player0.discard;
      board0.curse = player0.deck;
      board0.buy(0, "N?-Dh<Lt5Guw,~SCr", list1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Board board0 = new Board(0);
      List<String> list0 = board0.kList;
      board0.embargo = list0;
      board0.gameEnd();
      board0.embargo = list0;
      Board board1 = new Board(4);
      board1.supply = board0.supply;
      List<String> list1 = board1.kList;
      board1.curse = board0.curse;
      board0.embargo = list1;
      Board board2 = new Board(4);
      Board board3 = new Board(0);
      List<String> list2 = board3.kList;
      board3.gameEnd();
      Board board4 = new Board(0);
      board4.curse = board1.supply;
      int[] intArray0 = board0.em;
      Board board5 = new Board(0);
      board1.gameEnd();
      // Undeclared exception!
      board2.gameEnd();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Board board0 = new Board((-640));
      List<String> list0 = board0.available((-640));
      board0.available((-640));
      board0.kList = list0;
      board0.available(737);
      int[] intArray0 = board0.em;
      Player player0 = new Player(737);
      List<Card> list1 = player0.deck;
      board0.buy(12, "", list1);
      // Undeclared exception!
      try { 
        board0.gameEnd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Board board0 = new Board((-1232));
      List<Card> list0 = board0.supply;
      board0.curse = list0;
      int[] intArray0 = board0.em;
      board0.buy((-1232), "", list0);
      List<String> list1 = board0.embargo;
      board0.buy((-1232), "End of Player ", list0);
      board0.available((-1232));
      List<Card> list2 = board0.curse;
      Board board1 = new Board((-1232));
      board1.buy((-1232), (String) null, board0.supply);
      board1.buy((-1232), "Adventurer", list2);
      Board board2 = new Board(1119);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Board board0 = new Board(2);
      List<String> list0 = board0.embargo;
      board0.embargo = list0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      board0.em = intArray0;
      Board board1 = new Board(0);
      board1.supply = board0.curse;
      board1.gameEnd();
      List<Card> list1 = board1.curse;
      int[] intArray1 = board1.em;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Board board0 = new Board((-1051));
      Player player0 = new Player(0);
      List<Card> list0 = player0.hand;
      board0.curse = list0;
      board0.available((-1051));
      List<Card> list1 = board0.curse;
      board0.supply = list1;
      board0.gameEnd();
      List<Card> list2 = board0.supply;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Board board0 = new Board((-285));
      board0.buy((-285), "<{4#%+7>I#g", (List<Card>) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Board board0 = new Board(0);
      List<String> list0 = board0.available(3);
      board0.available(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 3;
      intArray0[8] = 3;
      board0.em = intArray0;
      Board board1 = new Board(0);
      board1.kList = list0;
      board1.buy(211, "Estate", board0.curse);
      List<Card> list1 = board1.curse;
      List<String> list2 = board1.kList;
      board0.gameEnd();
      board0.gameEnd();
      List<Card> list3 = board1.supply;
      Board board2 = new Board((-1151));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-992);
      Board board0 = new Board((-992));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      board0.kList = (List<String>) linkedList0;
      board0.available((-992));
      linkedList0.clone();
      board0.kList = null;
      String string0 = null;
      linkedList0.add((String) null);
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        board0.gameEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Board board0 = new Board(3);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      board0.em = intArray0;
      intArray0[1] = 3;
      board0.em = intArray0;
      List<String> list0 = board0.embargo;
      board0.embargo = list0;
      board0.gameEnd();
      Player player0 = new Player(7);
      List<Card> list1 = player0.discard;
      player0.turn(board0, "");
      board0.curse = list1;
      board0.embargo = list0;
      board0.em = intArray0;
      Board board1 = new Board((-2657));
      board0.supply = list1;
      assertEquals(9, list1.size());
      
      Board board2 = new Board(390);
      board1.em = board2.em;
      boolean boolean0 = board1.gameEnd();
      assertFalse(boolean0);
  }
}
