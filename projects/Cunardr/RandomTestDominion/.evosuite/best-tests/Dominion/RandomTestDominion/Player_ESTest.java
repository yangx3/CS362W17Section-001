/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 00:29:40 GMT 2017
 */

package Dominion.RandomTestDominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Dominion.RandomTestDominion.Board;
import Dominion.RandomTestDominion.Card;
import Dominion.RandomTestDominion.Player;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-428));
      player0.purchases = (-428);
      player0.actions = (-428);
      Card card0 = new Card("W@?KoU&Aa[('$Njlwb", (-428));
      player0.trash(card0);
      Board board0 = new Board((-428));
      player0.playK("Smithy", board0);
      player0.actions = (-1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-1046));
      Board board0 = new Board((-1));
      player0.hand = player0.deck;
      Card card0 = new Card("Great Hall");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      List<Card> list0 = player0.shuffle(linkedList0);
      player0.gain(card0, list0);
      player0.trash(card0);
      player0.discard = (List<Card>) linkedList0;
      int int0 = player0.purchases;
      player0.gain(card0, list0);
      player0.discardAll(player0.deck);
      player0.shuffle(player0.hand);
      player0.trash(card0);
      Board board1 = new Board(0);
      player0.discardAll(linkedList0);
      linkedList0.add(card0);
      Random.setNextRandom(7);
      player0.gain(card0, linkedList0);
      Random.setNextRandom((-1));
      player0.getMoney();
      player0.turn(board0, (String) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(0);
      List<Card> list0 = player0.deck;
      player0.discard = list0;
      Board board0 = new Board(0);
      Card card0 = new Card("Treasure", 0);
      player0.discard(card0);
      player0.purchases = 0;
      player0.playK("Cutpurse", board0);
      List<Card> list1 = player0.discard;
      player0.playK("Cutpurse", board0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(6);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      player0.opponents = (List<Player>) linkedList0;
      Card card0 = new Card("En:N*$;/?!KXQ}l1Pr", 0);
      LinkedList<Card> linkedList1 = new LinkedList<Card>();
      linkedList1.add(card0);
      Card card1 = new Card("@e");
      linkedList1.offerFirst(card1);
      player0.gain(card0, linkedList1);
      int int0 = player0.vPoints;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-89));
      int int0 = player0.purchases;
      player0.vPoints = (-89);
      Board board0 = new Board(0);
      List<Card> list0 = board0.supply;
      player0.hand = list0;
      player0.playerNum = 0;
      Player player1 = new Player(0);
      player0.vPoints = 0;
      player0.turnMoney = 0;
      player1.vPoints = 0;
      List<Card> list1 = player1.deck;
      player0.turnMoney = 0;
      player1.discard = player0.discard;
      player0.playK("U;<2z'BQ& ", board0);
      List<Card> list2 = player0.hand;
      player1.shuffle(list2);
      player1.turnMoney = 0;
      Player player2 = new Player(0);
      board0.gameEnd();
      player2.drawDeck(1114);
      int int1 = player2.turnMoney;
      player1.playK("Ambassador", board0);
      player0.playK("U;<2z'BQ& ", board0);
      player1.purchases = 0;
      Board board1 = new Board(1947);
      player0.turn(board1, "U;<2z'BQ& ");
      Board board2 = new Board(118);
      player0.playK("Ambassador", board2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(5250);
      List<Card> list0 = player0.hand;
      player0.discard = list0;
      Card card0 = new Card("}-8N");
      Card card1 = new Card("}-8N", 2);
      player0.discardAll(list0);
      Card.move(card1, player0.deck, player0.discard);
      List<Card> list1 = player0.hand;
      List<Player> list2 = player0.opponents;
      player0.opponents = list2;
      player0.hand = null;
      player0.gain(card0, list1);
      List<Card> list3 = player0.hand;
      Player player1 = new Player(0);
      player1.actions = 247;
      int int0 = player1.actions;
      player1.opponents = player0.opponents;
      // Undeclared exception!
      try { 
        player0.getMoney();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(181);
      Card card0 = new Card("Player  drew a ", 0);
      Card.draw(player0.deck, player0.deck, 0);
      card0.action(player0, 1611);
      Card card1 = new Card("Copper", 4);
      List<Card> list0 = player0.deck;
      Card.draw(list0, player0.deck, (-520));
      Card.move(card1, player0.deck, player0.hand);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      List<Card> list1 = player0.shuffle(linkedList0);
      player0.discard = list1;
      player0.discard(card0);
      Player player1 = new Player(0);
      Card card2 = new Card("Copper", (-994));
      Card.move(card0, player0.hand, player1.deck);
      player1.trash(card2);
      player1.hand = player0.discard;
      player1.turnMoney = 1611;
      Player player2 = new Player(0);
      player2.discard = player1.discard;
      int int0 = player0.playerNum;
      player2.gain(card2, player0.deck);
      int int1 = player1.actions;
      Board board0 = new Board(0);
      player0.playK(";u=y~-I,_:MkPp)> ", board0);
      player2.trash(card0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(2);
      // Undeclared exception!
      try { 
        player0.trash((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card card0 = new Card("", (-1268));
      linkedList0.add(card0);
      Card card1 = new Card("", (-1268));
      linkedList0.add(card1);
      Player.readCards(linkedList0);
      Player player0 = new Player((-1268));
      player0.discard(card1);
      Card.move(card0, linkedList0, linkedList0);
      int int0 = player0.purchases;
      Board board0 = new Board(0);
      board0.curse = player0.discard;
      player0.turn(board0, "Council Room");
      List<Card> list0 = player0.discard;
      LinkedList<Card> linkedList1 = new LinkedList<Card>();
      List<Card> list1 = player0.shuffle(linkedList1);
      player0.gain(card1, linkedList0);
      List<Card> list2 = player0.shuffle(list1);
      Card.draw(list2, list0, (-667));
      List<Card> list3 = player0.discard;
      player0.trash(card1);
      player0.hand = list2;
      player0.playK("Council Room", board0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(2005);
      List<Card> list0 = player0.deck;
      // Undeclared exception!
      try { 
        player0.gain((Card) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(0);
      // Undeclared exception!
      try { 
        player0.shuffle((List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-631));
      player0.purchases = (-631);
      player0.actions = (-2967);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      linkedList0.add((Card) null);
      linkedList0.pollLast();
      player0.shuffle(linkedList0);
      List<Player> list0 = player0.opponents;
      player0.getMoney();
      // Undeclared exception!
      try { 
        player0.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(5);
      Card card0 = new Card("xj^Y[U}5");
      player0.trash(card0);
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.discardAll((List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Player.readCards((List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0);
      List<Card> list0 = player0.hand;
      player0.discardAll(list0);
      int int0 = player0.actions;
      player0.drawDeck((-462));
      Player player1 = new Player((-3454));
      player0.deck = player1.deck;
      int int1 = player0.actions;
      player1.playerNum = (-959);
      player0.drawDeck(0);
      Board board0 = new Board((-400));
      board0.gameEnd();
      player0.playK("Embargo", board0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((-21));
      Player.readCards(player0.discard);
      Board board0 = new Board(0);
      player0.playK("Adventurer", board0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Player.readCards(linkedList0);
      Card card0 = new Card("[O>Xdop");
      linkedList0.offerFirst(card0);
      Player player0 = new Player((-463));
      Card card1 = new Card("[O>Xdop");
      player0.gain(card1, linkedList0);
      Board board0 = new Board(0);
      player0.turn(board0, "[O>Xdop");
      player0.hand = player0.discard;
      player0.trash(card1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-1050));
      Board board0 = new Board((-142));
      player0.playK("Baron", board0);
      player0.discard = null;
      int int0 = player0.turnMoney;
      // Undeclared exception!
      try { 
        player0.turn(board0, "Baron");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(227);
      Player player0 = new Player(227);
      Board board0 = new Board(30);
      List<Card> list0 = board0.supply;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      board0.em = intArray0;
      List<Card> list1 = player0.shuffle(list0);
      List<Card> list2 = player0.shuffle(list1);
      List<Card> list3 = player0.shuffle(list2);
      List<Card> list4 = board0.supply;
      player0.discard = list4;
      player0.getMoney();
      board0.curse = list3;
      int int0 = player0.playerNum;
      int int1 = player0.purchases;
      player0.shuffle(list3);
      player0.turn(board0, "Council Room");
      player0.playK("Feast", board0);
      player0.getMoney();
      int int2 = player0.vPoints;
      List<Card> list5 = player0.deck;
      player0.getMoney();
      player0.playK("Council Room", board0);
      player0.playK("Council Room", board0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(1912);
      int int0 = player0.turnMoney;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-1643));
      List<Card> list0 = player0.discard;
      Card card0 = new Card("ug");
      player0.discard(card0);
      Card card1 = new Card("Minion");
      player0.vPoints = (-1643);
      Board board0 = new Board(3);
      List<String> list1 = board0.available((-1643));
      board0.kList = list1;
      player0.playK("Minion", board0);
      player0.turn(board0, "ug");
      int int0 = player0.playerNum;
      player0.turn(board0, "PV&sGz 53k0pU;6LP%");
      List<Card> list2 = player0.hand;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(1984);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      linkedList0.offerFirst(player0);
      player0.opponents = (List<Player>) linkedList0;
      List<Card> list0 = player0.hand;
      List<Card> list1 = player0.shuffle(list0);
      player0.getMoney();
      player0.deck = list0;
      int int0 = player0.vPoints;
      Random.setNextRandom(2558);
      int int1 = player0.actions;
      Random.setNextRandom(16);
      Random.setNextRandom(0);
      player0.turnMoney = 16;
      Board board0 = new Board(2600);
      board0.curse = list1;
      player0.discardAll(list0);
      linkedList0.stream();
      player0.playK("Steward", board0);
      int int2 = player0.actions;
      player0.discardAll(list0);
      player0.opponents = (List<Player>) linkedList0;
      player0.opponents = (List<Player>) linkedList0;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((-89));
      int int0 = player0.purchases;
      player0.vPoints = (-89);
      Board board0 = new Board(0);
      List<Card> list0 = board0.supply;
      player0.hand = list0;
      player0.playerNum = 0;
      Player player1 = new Player(0);
      player0.vPoints = 0;
      player0.turnMoney = 0;
      player1.vPoints = 0;
      List<Card> list1 = player1.deck;
      player0.turnMoney = 0;
      Card card0 = new Card((String) null, (-89));
      player1.gain(card0, list0);
      player1.discard = player0.discard;
      player0.playK("U;<2z'BQ& ", board0);
      List<Card> list2 = player0.hand;
      player1.shuffle(list2);
      player1.turnMoney = 0;
      Player player2 = new Player(0);
      board0.gameEnd();
      player2.drawDeck(1114);
      int int1 = player2.playerNum;
      int int2 = player2.turnMoney;
      player1.playK("Ambassador", board0);
      player0.playK("U;<2z'BQ& ", board0);
      player1.purchases = 0;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(4094);
      player0.drawDeck(4094);
      player0.discard = null;
      Card card0 = new Card("N5$d");
      player0.actions = 4094;
      card0.buy(player0, 4094);
      card0.buy(player0, (-4786));
      // Undeclared exception!
      try { 
        player0.drawDeck(4094);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(0);
      List<Card> list0 = player0.deck;
      Player.readCards(list0);
      player0.playerNum = (-1955);
      Board board0 = new Board(0);
      Player player1 = new Player(0);
      board0.supply = player0.deck;
      player0.playK("Baron", board0);
      player0.playK("Baron", board0);
      player0.actions = 0;
      player0.playK("", board0);
      player0.drawDeck((-315));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(16);
      List<Card> list0 = player0.deck;
      Player.readCards(list0);
      player0.hand = list0;
      Board board0 = new Board(0);
      player0.turn(board0, "-r_k,VtB*:");
      List<Card> list1 = player0.discard;
      Card card0 = new Card("-r_k,VtB*:");
      player0.trash(card0);
      player0.shuffle(list0);
      player0.playK("Mine", (Board) null);
      player0.playK("Mine", board0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(0);
      List<Card> list0 = player0.deck;
      player0.discard = list0;
      Board board0 = new Board(0);
      Card card0 = new Card("Treasure", 0);
      player0.discard(card0);
      player0.actions = 0;
      player0.playK("Adventurer", board0);
      List<Card> list1 = player0.discard;
      player0.gain(card0, list1);
      player0.playK("Adventurer", board0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((-1046));
      Board board0 = new Board((-1));
      player0.hand = player0.deck;
      Card card0 = new Card("Great Hall");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      List<Card> list0 = player0.shuffle(linkedList0);
      player0.gain(card0, list0);
      player0.playK("Great Hall", board0);
      player0.trash(card0);
      player0.discard = (List<Card>) linkedList0;
      int int0 = player0.purchases;
      player0.gain(card0, list0);
      player0.discardAll(player0.deck);
      List<Card> list1 = player0.shuffle(player0.hand);
      player0.trash(card0);
      Board board1 = new Board(236);
      player0.discardAll(linkedList0);
      player0.hand = list1;
      Random.setNextRandom(7);
      player0.gain(card0, linkedList0);
      Random.setNextRandom(236);
      player0.playerNum = (-1046);
  }
}
