/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 00:31:58 GMT 2017
 */

package Dominion.RandomTestDominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Dominion.RandomTestDominion.Board;
import Dominion.RandomTestDominion.Card;
import Dominion.RandomTestDominion.Player;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Board board0 = new Board(3);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      board0.em = intArray0;
      intArray0[1] = 3;
      board0.em = intArray0;
      board0.embargo = board0.kList;
      board0.gameEnd();
      Player player0 = new Player(7);
      List<Card> list0 = player0.discard;
      player0.turn(board0, "");
      board0.curse = list0;
      board0.embargo = board0.kList;
      board0.em = intArray0;
      board0.supply = list0;
      Board board1 = new Board(390);
      board0.gameEnd();
      board1.supply = board0.supply;
      Random.setNextRandom((-2362));
      board0.gameEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Board board0 = new Board(1020);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card card0 = new Card("Estate", 1020);
      Card card1 = new Card("Estate", 8);
      Card.move(card1, board0.supply, board0.supply);
      linkedList0.add(card0);
      linkedList0.toArray();
      board0.supply = (List<Card>) linkedList0;
      List<Card> list0 = board0.curse;
      board0.buy((-417), "Estate", list0);
      List<Card> list1 = board0.supply;
      linkedList0.add(card1);
      List<Card> list2 = board0.supply;
      Board board1 = new Board(1020);
      List<Card> list3 = board0.supply;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Board board0 = new Board(4471);
      List<Card> list0 = board0.curse;
      board0.curse = list0;
      board0.gameEnd();
      board0.gameEnd();
      List<String> list1 = board0.available(4471);
      Board board1 = new Board(0);
      board0.curse = board1.curse;
      board0.embargo = list1;
      board0.em = board1.em;
      Board board2 = new Board(4471);
      board1.buy(1, "", board0.curse);
      board2.gameEnd();
      board0.supply = null;
      board2.gameEnd();
      int[] intArray0 = board0.em;
      // Undeclared exception!
      try { 
        board0.available(4471);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Board board0 = new Board(5);
      board0.gameEnd();
      board0.curse = null;
      int[] intArray0 = board0.em;
      board0.buy(5, "`<n", (List<Card>) null);
      board0.available(0);
      board0.em = intArray0;
      Board board1 = new Board(5);
      board0.em = intArray0;
      Board board2 = new Board(5);
      board0.supply = board2.curse;
      board2.supply = null;
      board1.gameEnd();
      // Undeclared exception!
      try { 
        board0.gameEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Board board0 = new Board(0);
      List<String> list0 = board0.available((-965));
      board0.embargo = list0;
      board0.curse = null;
      board0.supply = null;
      // Undeclared exception!
      try { 
        board0.buy(0, "v}", (List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dominion.RandomTestDominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Board board0 = new Board(132);
      Player player0 = new Player(132);
      player0.vPoints = 132;
      player0.playK("", board0);
      List<Card> list0 = player0.hand;
      player0.turn(board0, ",!2ei/");
      board0.supply = list0;
      // Undeclared exception!
      try { 
        board0.gameEnd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Board board0 = new Board(3);
      board0.em = board0.em;
      board0.em = board0.em;
      List<String> list0 = board0.embargo;
      board0.embargo = list0;
      board0.gameEnd();
      Player player0 = new Player(3);
      List<Card> list1 = player0.discard;
      player0.turn(board0, "");
      board0.embargo = list0;
      board0.em = board0.em;
      Board board1 = new Board((-2657));
      board0.supply = list1;
      Board board2 = new Board(60);
      board1.em = board2.em;
      board1.gameEnd();
      board1.available(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Board board0 = new Board(2);
      List<String> list0 = board0.kList;
      List<Card> list1 = board0.curse;
      board0.buy(2, "Embargo", list1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Board board0 = new Board(3);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      board0.em = intArray0;
      intArray0[1] = 3;
      board0.em = intArray0;
      List<String> list0 = board0.embargo;
      board0.embargo = list0;
      board0.gameEnd();
      Player player0 = new Player(7);
      List<Card> list1 = player0.discard;
      player0.turn(board0, "");
      board0.curse = list1;
      board0.embargo = list0;
      board0.em = intArray0;
      Board board1 = new Board((-2657));
      board0.supply = list1;
      Board board2 = new Board(390);
      board1.em = board2.em;
      board1.gameEnd();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Board board0 = new Board(1);
      List<String> list0 = board0.embargo;
      board0.embargo = list0;
      board0.available(1275);
      board0.gameEnd();
      Board board1 = new Board(1);
      board1.gameEnd();
      board1.buy(0, "9 yk)$k'", board0.curse);
      board1.curse = board0.supply;
      board0.available(1275);
      List<Card> list1 = board0.supply;
      int[] intArray0 = board0.em;
      Board board2 = new Board(2);
      board0.em = intArray0;
      board2.curse = board1.curse;
      board2.supply = board0.supply;
      board1.buy(0, "9 yk)$k'", board2.curse);
      board0.gameEnd();
      List<Card> list2 = board2.curse;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Board board0 = new Board(3);
      List<Card> list0 = board0.supply;
      board0.buy(3, "FBoE@YI", list0);
      boolean boolean0 = board0.gameEnd();
      assertFalse(boolean0);
      
      board0.buy(0, "FBoE@YI", list0);
      List<String> list1 = board0.available(3);
      assertEquals(6, list1.size());
      
      board0.curse = list0;
      List<String> list2 = board0.kList;
      List<String> list3 = board0.embargo;
      board0.buy(0, "G##)-1\\LB;gVhL;", list0);
      assertEquals(266, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Board board0 = new Board(0);
      List<String> list0 = board0.available(0);
      Board board1 = new Board((-2655));
      board1.kList = list0;
      board1.gameEnd();
      board1.kList = list0;
      List<Card> list1 = board0.supply;
      Board board2 = new Board((-2655));
      board1.kList = board0.embargo;
      List<String> list2 = board2.embargo;
      Board board3 = new Board(1);
      List<String> list3 = board3.embargo;
      int[] intArray0 = board3.em;
      board1.curse = board2.supply;
      board3.supply = board1.curse;
      assertEquals(0, board3.supply.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Board board0 = new Board(1044);
      List<String> list0 = board0.available(1044);
      board0.kList = list0;
      board0.embargo = list0;
      Player player0 = new Player(0);
      board0.buy(1044, "Steward", board0.curse);
      List<String> list1 = board0.available(0);
      board0.kList = list1;
      board0.gameEnd();
      board0.gameEnd();
      board0.kList = list0;
      List<String> list2 = board0.available(1044);
      assertNotSame(list2, list0);
  }
}
