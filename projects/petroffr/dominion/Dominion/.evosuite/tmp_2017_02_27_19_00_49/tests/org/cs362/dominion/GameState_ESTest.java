/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 03:03:05 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "Yjb5Q(");
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card card0 = Card.getCard(list0, card_CardName0);
      player0.gain(card0);
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState1, "Yjb5Q(");
      gameState0.addPlayer(player1);
      Player player2 = new Player((GameState) null, "The board game is embty you need to intialize the game!!!!");
      gameState0.addPlayer(player2);
      gameState0.addPlayer(player2);
      gameState0.addPlayer(player2);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState0.isGameOver();
      Card.CardName.values();
      gameState0.initializeGame();
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName.values();
      Randomness.totalCallsToRandom = 19;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = gameState0.gameBoard;
      HashMap<Card, Integer> hashMap1 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap1;
      hashMap1.remove((Object) list0, (Object) null);
      gameState0.players = null;
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(gameState0.cards, card_CardName0);
      Player player0 = new Player(gameState0, "Estate");
      // Undeclared exception!
      try { 
        gameState0.addPlayer(player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      gameState0.clone();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(arrayList0, card_CardName0);
      Integer integer0 = new Integer((-1746));
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      GameState gameState1 = new GameState((List<Card>) null);
      HashMap<Card, Integer> hashMap0 = gameState1.gameBoard;
      gameState0.gameBoard = hashMap0;
      gameState1.toString();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.clone();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(linkedList0, card_CardName0);
      linkedList0.offer((Card) null);
      gameState0.players = null;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      gameState1.players = gameState0.players;
      GameState gameState2 = gameState0.clone();
      gameState1.clone();
      gameState2.isGameOver();
      gameState1.toString();
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      Player player1 = player0.clone();
      player1.hand = (List<Card>) vector0;
      gameState0.addPlayer(player1);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      player1.drawCard();
      // Undeclared exception!
      try { 
        gameState1.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.toString();
      Player player0 = new Player((GameState) null, "|LumdmoCrYK:");
      Player player1 = player0.clone();
      gameState0.addPlayer(player1);
      Player player2 = new Player((GameState) null, "The board game is embty you need to intialize the game!!!!");
      Player player3 = player2.clone();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.playedCards = (List<Card>) linkedList0;
      player3.drawCard();
      linkedList0.add((Card) null);
      player3.numActions = 0;
      player2.deck = linkedList0;
      gameState0.addPlayer(player3);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState0.isGameOver();
      GameState gameState1 = gameState0.clone();
      Card.CardName.values();
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "Council_Room");
      Player player1 = player0.clone();
      gameState0.addPlayer(player1);
      gameState0.getWinners();
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player((GameState) null, "|LumdmoCrYK:");
      gameState0.addPlayer(player0);
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      gameState0.addPlayer(player1);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.CardName.values();
      // Undeclared exception!
      gameState0.initializeGame();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Randomness.totalCallsToRandom = (-5);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>((Map<? extends Card, ? extends Integer>) gameState0.gameBoard);
      HashMap<Card, Integer> hashMap1 = gameState0.gameBoard;
      hashMap1.remove((Object) list0, (Object) hashMap0);
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer((-5));
      card0.clone();
      gameState0.gameBoard.put(card0, integer0);
      gameState0.getWinners();
      Randomness.reset((-5));
      HashMap<Player, Integer> hashMap2 = new HashMap<Player, Integer>();
      Randomness.nextRandomInt((-4));
      gameState0.clone();
      gameState0.isGameOver();
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.initializeGame();
      assertNotSame(gameState1, gameState0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      Player player0 = new Player((GameState) null, "LumdmoCrYK");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      Card.CardName.values();
      // Undeclared exception!
      gameState0.initializeGame();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Randomness.totalCallsToRandom = 19;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = gameState0.gameBoard;
      HashMap<Card, Integer> hashMap1 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap1;
      hashMap1.remove((Object) list0, (Object) null);
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      Player player0 = new Player(gameState0, "Estate");
      gameState0.addPlayer(player0);
      Integer integer0 = new Integer(19);
      gameState0.gameBoard.put(card0, integer0);
      assertEquals(20, list0.size());
      
      Randomness.reset(19);
      GameState gameState1 = gameState0.clone();
      Randomness.nextRandomInt(20);
      Integer integer1 = new Integer(10);
      List<Card> list1 = gameState0.cards;
      HashMap<Player, Integer> hashMap2 = gameState0.play();
      assertEquals(1, hashMap2.size());
      
      List<Player> list2 = gameState0.players;
      GameState gameState2 = gameState1.clone();
      String string0 = gameState1.toString();
      assertEquals(" ---  --- Estate ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n\n --- gameBoard --- \nCards on the table: \nCard Name \t\t NumberCards: \n\t Province\t\t 19\n", string0);
      
      gameState0.toString();
      assertNotSame(gameState0, gameState2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      HashMap<Card, Integer> hashMap1 = gameState0.gameBoard;
      hashMap1.remove((Object) list0, (Object) gameState0.gameBoard);
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(0);
      Vector<Card> vector0 = new Vector<Card>();
      gameState0.gameBoard.put(card0, integer0);
      HashMap<Player, Integer> hashMap2 = gameState0.play();
      assertTrue(hashMap2.isEmpty());
      
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
      
      List<Card> list1 = gameState0.cards;
      assertFalse(list1.isEmpty());
      
      GameState gameState1 = gameState0.clone();
      GameState gameState2 = gameState0.clone();
      assertNotSame(gameState2, gameState1);
      
      int int0 = Randomness.totalCallsToRandom;
      List<Card> list2 = gameState2.cards;
      assertNotNull(list2);
      assertFalse(list2.isEmpty());
  }
}
