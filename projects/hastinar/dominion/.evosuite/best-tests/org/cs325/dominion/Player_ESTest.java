/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 14 08:48:51 GMT 2017
 */

package org.cs325.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.cs325.dominion.Card;
import org.cs325.dominion.GameState;
import org.cs325.dominion.Player;
import org.cs325.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((GameState) null, "yia;pF~QoHvm");
      player0.drawCard();
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs325.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      player0.endTurn();
      player0.discard = null;
      player0.playTtreasureCard();
      player0.playTtreasureCard();
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs325.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Randomness.totalCallsToRandom;
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, (-1), 0);
      player0.gain(card0);
      player0.drawCard();
      player0.scoreFor();
      player0.numBuys = 0;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((GameState) null, "1e(w@WQsEnH-$[GA");
      player0.buyCard();
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      List<Card> list0 = player0.discard;
      player0.playKingdomCard();
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 674, 674, (-176));
      Card.getCard(player0.deck, card_CardName0);
      linkedList0.offerLast(card0);
      int int0 = player0.numBuys;
      linkedList0.offerFirst(card0);
      linkedList0.offer(card0);
      player0.playKingdomCard();
      Card.Type.values();
      player0.playKingdomCard();
      int int1 = Randomness.totalCallsToRandom;
      player0.hand = list0;
      player0.initializePlayerTurn();
      Randomness.nextRandomInt(674);
      // Undeclared exception!
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 15, 15, 0);
      linkedList0.add(card0);
      Player player0 = new Player(gameState0, "dominion.Player:  ");
      linkedList0.toArray();
      player0.printStateGame();
      player0.discard = gameState0.cards;
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      player0.numActions = 15;
      gameState0.initializeGame();
      Randomness.totalCallsToRandom = 6;
      List<Card> list0 = player0.discard;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Card card1 = new Card(card_CardName0, card_Type0, 1, 1, 1);
      gameState0.toString();
      Random.setNextRandom(0);
      LinkedList<Card> linkedList1 = player0.deck;
      gameState0.initializeGame();
      player0.numActions = (-323);
      Randomness.nextRandomInt(4);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(3207, 3207);
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(vector0, card_Type0);
      GameState gameState0 = new GameState(list0);
      gameState0.play();
      Player player0 = new Player(gameState0, (String) null);
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.scoreFor();
      player0.discard = (List<Card>) vector0;
      List<Card> list1 = player0.hand;
      Card.CardName card_CardName0 = Card.CardName.Baron;
      player0.coins = 1;
      Card card0 = new Card(card_CardName0, card_Type0, (-29), 1, 3571);
      Integer integer0 = new Integer(12);
      card0.equals(integer0);
      player0.gain(card0);
      player0.discard(card0);
      player0.drawCard();
      player0.scoreFor();
      List<Card> list2 = player0.hand;
      Player player1 = new Player(gameState0, (String) null);
      player1.coins = 10;
      Card.Type.values();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(3207, 3207);
      Card.Type card_Type0 = Card.Type.VICTORY;
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.scoreFor();
      player0.discard = (List<Card>) vector0;
      List<Card> list0 = player0.hand;
      Card.CardName card_CardName0 = Card.CardName.Baron;
      player0.coins = 1;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 1, 3571);
      Integer integer0 = new Integer(12);
      card0.equals(integer0);
      player0.gain(card0);
      player0.discard(card0);
      player0.drawCard();
      player0.scoreFor();
      List<Card> list1 = player0.hand;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((GameState) null, "1e(w@WQsEnH-$[GA");
      player0.buyCard();
      List<Card> list0 = player0.discard;
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card.getCard(player0.deck, card_CardName0);
      Card.Type.values();
      int int0 = Randomness.totalCallsToRandom;
      player0.hand = list0;
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Player.actionPhase Card:");
      player0.buyCard();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.Type card_Type0 = Card.Type.TREASURE;
      gameState0.initializeGame();
      player0.scoreFor();
      Card card0 = new Card(card_CardName0, card_Type0, 3154, 3154, 15);
      GameState.addEmbargo(card0);
      player0.printStateGame();
      Randomness.nextRandomInt((-600));
      player0.toString();
      player0.discard(card0);
      Card card1 = player0.drawCard();
      player0.endTurn();
      int int0 = player0.numBuys;
      List<Card> list1 = player0.discard;
      player0.playKingdomCard();
      List<Card> list2 = player0.discard;
      player0.hand = list0;
      player0.discard(card1);
      player0.numBuys = 156;
      player0.discard(card0);
      player0.scoreFor();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("yu[EU,Mv%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs325.dominion.Card.Type.yu[EU,Mv%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Player.actionPhase Card:");
      player0.buyCard();
      player0.discard = list0;
      gameState0.initializeGame();
      player0.toString();
      Card card0 = player0.drawCard();
      player0.endTurn();
      int int0 = ObjectStreamConstants.baseWireHandle;
      player0.hand = list0;
      player0.discard(card0);
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.scoreFor();
      player0.coins = 4436;
      player0.toString();
      player0.playKingdomCard();
      player0.playKingdomCard();
      player0.endTurn();
      LinkedList<Card> linkedList0 = player0.deck;
      linkedList0.add((Card) null);
      linkedList0.pollFirst();
      player0.deck = linkedList0;
      player0.buyCard();
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.deck = linkedList0;
      linkedList0.remove((Object) card_Type0);
      linkedList0.clear();
      linkedList0.listIterator();
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "F?|tVB>bcP&Z!V");
      gameState0.play();
      player0.drawCard();
      gameState0.play();
      LinkedList<Card> linkedList1 = player0.deck;
      player0.playKingdomCard();
      player0.numActions = (-2056);
      player0.toString();
      player0.gain((Card) null);
      List<Card> list0 = player0.hand;
      GameState.addEmbargo((Card) null);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 62, 0, (-1855));
      Object object0 = new Object();
      card0.equals(object0);
      player0.discard(card0);
      gameState0.play();
      int int0 = player0.numActions;
      List<Card> list1 = player0.discard;
      player0.hand = list1;
      player0.playTtreasureCard();
      player0.endTurn();
      player0.drawCard();
      int int1 = Randomness.totalCallsToRandom;
      Randomness.random = null;
      Randomness.reset((-1916L));
      Player player1 = new Player(gameState0, "Give every other player a copy of a card");
      player0.toString();
      Player player2 = new Player(gameState0, "Give every other player a copy of a card");
      LinkedList<Card> linkedList0 = player2.deck;
      player2.deck = linkedList0;
      player2.toString();
      Player player3 = new Player(gameState0, "=================================--Give every other player a copy of a card--=================================Hand: []Discard: []Deck: []Played Cards: []NumActions: 0Coins: 0NumBuys: 0\n");
      List<Card> list2 = player3.hand;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "^eZ,7Hp0@P8)");
      player0.hand = gameState0.cards;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "u1ix~'EkE0o+048");
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((GameState) null, "yia;pF~QoHvm");
      player0.drawCard();
      player0.discard((Card) null);
      player0.playKingdomCard();
      player0.playTtreasureCard();
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((GameState) null, "C8% Y~-ZL");
      Card.CardName card_CardName0 = Card.CardName.Gardends;
      Card.getCard(player0.hand, card_CardName0);
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.Type.values();
      Player player0 = new Player((GameState) null, "w1M");
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs325.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "endTurn ");
      List<Card> list0 = player0.discard;
      player0.hand = list0;
      player0.initializePlayerTurn();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "dominion.Player:  ");
      player0.printStateGame();
      player0.numActions = 15;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 15, 15, 15);
      linkedList0.add(card0);
      Player player0 = new Player(gameState0, "dominion.Player:  ");
      player0.deck = linkedList0;
      List<Card> list0 = player0.hand;
      player0.scoreFor();
      player0.drawCard();
      player0.numActions = 15;
      player0.playKingdomCard();
      Random.setNextRandom(4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "TREASURE");
      boolean boolean0 = player0.gain((Card) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Player.actionPhase Card:");
      player0.buyCard();
      player0.toString();
      player0.drawCard();
      player0.endTurn();
      player0.hand = list0;
      player0.discard((Card) null);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs325.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((GameState) null, "p78^x2r4+QptP14#");
      player0.playTtreasureCard();
  }
}
