/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 03:59:28 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = (-3);
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      player0.hand = (List<Card>) linkedList0;
      List<Card> list0 = Card.createCards();
      linkedList0.addAll((Collection<? extends Card>) list0);
      gameState0.embargo = (-3);
      player0.playTtreasureCard();
      player0.coins = (-3);
      player0.endTurn();
      player0.scoreFor();
      player0.hand = list0;
      int int0 = player0.numBuys;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "M/Q[5X^VEU,N\"_");
      gameState0.addPlayer(player0);
      player0.coins = 0;
      player0.scoreFor();
      List<Card> list1 = player0.discard;
      player0.numBuys = (-389);
      Card.CardName.values();
      player0.playedCards = list0;
      List<Card> list2 = player0.Trash;
      player0.buyCard();
      player0.buyCard();
      Card.Type.values();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("M/Q[5X^VEU,N\"_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.M/Q[5X^VEU,N\"_
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = 10;
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      player0.hand = (List<Card>) linkedList0;
      List<Card> list0 = player0.playedCards;
      linkedList0.addAll((Collection<? extends Card>) list0);
      gameState0.embargo = 10;
      player0.deck = linkedList0;
      player0.playTtreasureCard();
      player0.coins = 10;
      player0.endTurn();
      int int0 = player0.numBuys;
      int int1 = player0.numBuys;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = 10;
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      List<Card> list0 = Card.createCards();
      linkedList0.addAll((Collection<? extends Card>) list0);
      gameState0.embargo = 10;
      player0.deck = linkedList0;
      player0.playTtreasureCard();
      player0.coins = 10;
      player0.endTurn();
      player0.scoreFor();
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Og^sk_94h<NEL82v");
      gameState0.embargo = 895;
      player0.discard = list0;
      player0.scoreFor();
      gameState0.addPlayer(player0);
      player0.discard = list0;
      Player player1 = new Player(gameState0, "Og^sk_94h<NEL82v");
      int int0 = player1.numBuys;
      int int1 = player1.numBuys;
      int int2 = player0.numBuys;
      player1.playKingdomCard();
      Card card0 = player0.drawCard();
      player1.discard(card0);
      player0.playKingdomCard();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Og^sk_94h<NEL82v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.Og^sk_94h<NEL82v
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "<6sC?j6 $^NMgdwPy%}");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      gameState0.play();
      player0.drawCard();
      player0.deck.add((Card) null);
      player0.discard = null;
      player0.Trash = null;
      player0.deck = linkedList0;
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      vector0.removeAllElements();
      vector0.removeElement(vector0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      vector0.trimToSize();
      gameState0.initializeGame();
      gameState0.embargo = (-783);
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-783), (-783), (-783));
      vector0.add(card0);
      Player player0 = new Player(gameState0, "Z#Q/sPh");
      player0.Trash = (List<Card>) vector0;
      gameState0.isGameOver();
      LinkedList<Card> linkedList0 = player0.deck;
      Randomness.nextRandomInt((-783));
      player0.numActions = (-783);
      player0.drawCard();
      player0.toString();
      // Undeclared exception!
      try { 
        player0.playTtreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Randomness.nextRandomInt(349);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "pZK#5/;B{R;");
      player0.toString();
      Card.CardName card_CardName0 = Card.CardName.cutpurse;
      Card card0 = Card.getCard(list0, card_CardName0);
      player0.discard(card0);
      Card card1 = player0.drawCard();
      player0.gain(card1);
      Randomness.reset(0L);
      player0.discard(card1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Randomness.reset(0L);
      GameState gameState0 = new GameState((List<Card>) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.embargo = (-1);
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, ".~sqq");
      int int0 = player0.numActions;
      String string0 = player0.player_username;
      player0.toString();
      HashMap<Card, Integer> hashMap1 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap1;
      player0.numActions = (-1);
      LinkedList<Card> linkedList0 = player0.deck;
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.playTtreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = 10;
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      player0.hand = (List<Card>) linkedList0;
      List<Card> list0 = Card.createCards();
      linkedList0.addAll((Collection<? extends Card>) list0);
      gameState0.embargo = 10;
      player0.playTtreasureCard();
      player0.playTtreasureCard();
      player0.coins = 10;
      player0.endTurn();
      player0.coins = 10;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("?Ot\"fhrN}KU-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.?Ot\"fhrN}KU-
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "P3");
      gameState0.embargo = 2678;
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.TREASURE;
      player0.numActions = 2678;
      player0.drawCard();
      vector0.add((Card) null);
      player0.coins = 0;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 2678, 1209);
      vector0.add(card0);
      List<Card> list0 = player0.Trash;
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      String string0 = player0.player_username;
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "WE FOUND COPPER!\n");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card card0 = Card.getCard(list0, card_CardName0);
      player0.discard(card0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 10, 0);
      arrayList0.add(card0);
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      player0.numActions = 0;
      gameState0.play();
      player0.numBuys = 319;
      player0.discard = (List<Card>) arrayList0;
      player0.coins = 319;
      Card card1 = player0.drawCard();
      arrayList0.add(card1);
      int int0 = player0.numActions;
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      arrayList0.parallelStream();
      gameState0.gameBoard = hashMap0;
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "1?_a[7&S");
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-2429), (-2429), (-2429));
      player0.gain(card0);
      player0.numBuys = (-2429);
      player0.scoreFor();
      player0.drawCard();
      player0.coins = 1407;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.isGameOver();
      gameState0.embargo = 0;
      gameState0.getWinners();
      Player player0 = new Player(gameState0, "fZcfXVIx8jX6BWX#+");
      gameState0.isGameOver();
      gameState0.isGameOver();
      player0.toString();
      player0.discard = list0;
      player0.coins = (-1147);
      player0.endTurn();
      player0.toString();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Card.CardName card_CardName0 = Card.CardName.embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      Card card1 = new Card(card_CardName0, card_Type0, 3644, 0, 0);
      card0.compareTo(card1);
      stack0.add(card0);
      Player player0 = new Player(gameState0, "Player coins before add: ");
      player0.gain(card0);
      player0.coins = 0;
      player0.drawCard();
      player0.hand = (List<Card>) stack0;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "\n");
      player0.numBuys = (-515);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "4hD");
      player0.playKingdomCard();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.Trash = (List<Card>) linkedList0;
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(player0.Trash, card_CardName0);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "7<gNQ{H");
      player0.Trash = (List<Card>) arrayList0;
      arrayList0.containsAll(player0.Trash);
      gameState0.addPlayer(player0);
      Randomness.reset(0);
      gameState0.isGameOver();
      Randomness.totalCallsToRandom = (-1493);
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, ",AI+Ib");
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = 10;
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      player0.hand = (List<Card>) linkedList0;
      List<Card> list0 = Card.createCards();
      linkedList0.addAll((Collection<? extends Card>) list0);
      gameState0.embargo = 10;
      player0.deck = linkedList0;
      player0.playTtreasureCard();
      player0.coins = 10;
      player0.endTurn();
      player0.scoreFor();
      int int0 = player0.numBuys;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = (-3);
      String string0 = "?Ot\"fhrN}KU-";
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      player0.hand = (List<Card>) linkedList0;
      List<Card> list0 = Card.createCards();
      linkedList0.addAll((Collection<? extends Card>) list0);
      player0.playKingdomCard();
      gameState0.embargo = (-3);
      player0.coins = (-3);
      player0.endTurn();
      int int0 = player0.coins;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      int int0 = player0.numBuys;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, "0");
      player0.deck = null;
      hashMap0.put((Card) null, (Integer) 0);
      player0.gain((Card) null);
      String string0 = player0.player_username;
      LinkedList<Card> linkedList0 = null;
      try {  
      linkedList0 = player0.deck;
      } catch(NullPointerException e) {}
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.embargo = gameState0.embargo;
      String string0 = "?Ot\"fhrN}KU-";
      Player player0 = new Player(gameState0, "?Ot\"fhrN}KU-");
      player0.hand = (List<Card>) linkedList0;
      gameState0.getWinners();
      player0.playTtreasureCard();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Og^sk_94h<NEL82v");
      gameState0.embargo = 895;
      player0.discard = list0;
      player0.scoreFor();
      gameState0.addPlayer(player0);
      player0.discard = list0;
      Player player1 = new Player(gameState0, "Og^sk_94h<NEL82v");
      int int0 = player1.numBuys;
      int int1 = player1.numBuys;
      int int2 = player0.numBuys;
      player1.playKingdomCard();
      player1.playKingdomCard();
      player0.playKingdomCard();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Og^sk_94h<NEL82v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.Og^sk_94h<NEL82v
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Randomness.totalCallsToRandom = (-2660);
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.hand = null;
      player0.toString();
      Card.Type.values();
      player0.hand = null;
      List<Card> list0 = player0.playedCards;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "M/Q[5X^VEU,N\"_");
      player0.coins = 0;
      player0.scoreFor();
      List<Card> list1 = player0.discard;
      Card.CardName.values();
      player0.playedCards = list0;
      player0.buyCard();
      player0.buyCard();
      Card.Type.values();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("M/Q[5X^VEU,N\"_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.M/Q[5X^VEU,N\"_
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }
}
