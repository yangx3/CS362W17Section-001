/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 03:57:16 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Cooper;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.addPlayer((Player) null);
      Player player0 = new Player(gameState0, "3i{-m%[8M$Ol3BAiWj");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 9, 3654);
      linkedList0.add(card0);
      Card card1 = Card.getCard(linkedList0, card_CardName0);
      Card.createCards();
      // Undeclared exception!
      try { 
        card1.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.Type card_Type0 = Card.Type.TREASURE;
      vector0.iterator();
      Card card0 = new Card(card_CardName0, card_Type0, (-4), 7, (-4));
      vector0.add(card0);
      Card.getCard(vector0, card_CardName0);
      card0.toString();
      vector0.add(card0);
      Card card1 = Card.getCard(vector0, card_CardName0);
      Card.Type card_Type1 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(vector0, card_Type1);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Z]'\"Cmeq<}X@X:Z");
      player0.playKingdomCard();
      LinkedList<Card> linkedList0 = player0.deck;
      player0.drawCard();
      linkedList0.listIterator();
      Card.filter(linkedList0, card_Type0);
      Card card2 = Card.getCard(vector0, card_CardName0);
      card1.equals(card2);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Cooper");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.Cooper
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 12, (-1282), 16);
      Integer integer0 = new Integer(649);
      Integer.divideUnsigned((-1282), (-1282));
      card0.equals(integer0);
      List<Card> list0 = Card.createCards();
      card0.getCardName();
      Card.CardName card_CardName1 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName1);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6v~78:(kE[tfW7^EoF$");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 9, (-2799), (-2799));
      card0.getTreasureValue();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Player's coins before entering playtreasure: ");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.embargo;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.cutpurse;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName.values();
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list1 = Card.filter(list0, card_Type0);
      Card.CardName.values();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card card0 = new Card(card_CardName0, card_Type0, 21, 4, 4);
      GameState gameState0 = new GameState(list1);
      Player player0 = new Player(gameState0, "#%MryIznmqW\"nW()");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.mine;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list1 = Card.filter(list0, card_Type0);
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list1, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Province;
      Card.getCard(list0, card_CardName1);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " |]i");
      Card.createCards();
      player0.numBuys = (-513);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.feast;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1), (-1), (-1));
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "gardens");
      card0.play(player0, gameState0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "_/^qGb%)AFun5F|OkX[");
      player0.discard = list0;
      gameState0.addPlayer(player0);
      Card card0 = player0.drawCard();
      card0.getCardName();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.ACTION;
      card0.play(player0, gameState0);
      Card.Type card_Type1 = Card.Type.ACTION;
      Card.filter(list0, card_Type1);
      Card card1 = new Card(card_CardName1, card_Type0, 0, 0, 0);
      player0.discard(card0);
      player0.toString();
      Card.Type card_Type2 = card0.getType();
      Card.createCards();
      card0.getScore();
      Card.createCards();
      Card.CardName card_CardName2 = Card.CardName.Smithy;
      Card card2 = new Card(card_CardName2, card_Type2, 0, 0, 0);
      Card.Type card_Type3 = Card.Type.VICTORY;
      Card card3 = new Card(card_CardName1, card_Type3, 1148, 5, 1148);
      card3.getScore();
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("_/^qGb%)AFun5F|OkX[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.CardName._/^qGb%)AFun5F|OkX[
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName.values();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list1 = Card.filter(list0, card_Type0);
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card card0 = new Card(card_CardName0, card_Type0, (-47), (-47), 2);
      Card.Type card_Type1 = Card.Type.ACTION;
      boolean boolean0 = card0.equals(card_Type1);
      assertFalse(boolean0);
      
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "zW)");
      int int0 = card0.score(player0);
      assertEquals(2, card0.getTreasureValue());
      assertFalse(list0.equals((Object)list1));
      assertEquals((-47), int0);
      assertEquals(-47, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "TURNS: ");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.gardens;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "-B+`}i+FBNiQ6");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Card.CardName card_CardName1 = Card.CardName.CouncilRoom;
      Card.getCard(list0, card_CardName1);
      Player player0 = new Player(gameState0, "^C");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-325), (-325), (-325));
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.isGameOver();
      Player player0 = new Player(gameState0, "numBuys: ");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      linkedList0.add(card0);
      linkedList0.add(card0);
      gameState0.getWinners();
      arrayList0.add(card0);
      player0.numActions = 1986;
      card0.play(player0, gameState0);
      card0.getCost();
      Card.CardName.values();
      Card.CardName.values();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("g+f(9&xG_XkG*vCdP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.g+f(9&xG_XkG*vCdP
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName.values();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1862), 2238, 2238);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.TREASURE;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.embargo;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 106, 106, (-2565));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      linkedList0.add(card0);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.add(card0);
      Player player0 = new Player(gameState0, "HAND: ");
      gameState0.embargo = (-2565);
      player0.playTtreasureCard();
      linkedList0.push(card0);
      gameState0.getWinners();
      player0.Trash = (List<Card>) linkedList0;
      player0.toString();
      int int0 = card0.score(player0);
      boolean boolean0 = card0.equals(card0);
      assertTrue(boolean0);
      
      List<Card> list0 = Card.filter(linkedList0, card_Type0);
      assertEquals(3, list0.size());
      
      int int1 = card0.getCost();
      assertTrue(int1 == int0);
      
      Card.getCard(linkedList0, card_CardName0);
      Card card1 = Card.getCard(linkedList0, card_CardName0);
      assertNotNull(card1);
      assertEquals(-2565, card1.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 7, 1564);
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "c8\"H[@hG|,");
      int int0 = card0.score(player0);
      assertEquals(1564, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 846, 846, 8);
      Card.createCards();
      card0.toString();
      card0.getType();
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName.values();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(list0, card_CardName0);
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, (-594));
      Stack<Card> stack0 = new Stack<Card>();
      ArrayList<Card> arrayList0 = new ArrayList<Card>((Collection<? extends Card>) stack0);
      Card.Type card_Type1 = Card.Type.VICTORY;
      boolean boolean0 = card0.equals(card_Type1);
      assertFalse(boolean0);
      
      arrayList0.add(card0);
      List<Card> list0 = Card.filter(arrayList0, card_Type1);
      assertEquals(0, list0.size());
      
      int int0 = card0.getScore();
      int int1 = card0.getCost();
      assertTrue(int1 == int0);
      
      card0.getCardName();
      assertEquals(-594, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.CardName.values();
      String string0 = "ENTERING LOOP\n";
      // Undeclared exception!
      try { 
        Card.Type.valueOf("ENTERING LOOP\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.ENTERING LOOP
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }


  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Integer integer0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.VICTORY;
      int int0 = 16;
      Card card0 = new Card(card_CardName0, card_Type0, 12, (-1282), 16);
      card0.toString();
      Integer integer0 = new Integer(649);
      Integer.divideUnsigned((-1282), (-1282));
      card0.equals(integer0);
      List<Card> list0 = Card.createCards();
      card0.getCardName();
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card.getCard(list0, card_CardName1);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6v~78:(kE[tfW7^EoF$");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 16;
      Integer.divideUnsigned((-1282), (-1282));
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.feast;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6v~78:(kE[tfW7^EoF$");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.salvager;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 3, 3, 0);
      card0.equals(card_Type0);
      card0.toString();
      Card.Type card_Type1 = card0.getType();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "h4 ---1");
      player0.playKingdomCard();
      Card.CardName card_CardName1 = Card.CardName.greathall;
      Card.Type card_Type2 = Card.Type.TREASURE;
      Card card1 = new Card(card_CardName1, card_Type2, 14, 3, 16);
      card0.compareTo(card1);
      card0.play(player0, gameState0);
      Card.CardName card_CardName2 = Card.CardName.Estate;
      Card.getCard(linkedList0, card_CardName2);
      Card card2 = new Card(card_CardName2, card_Type1, 0, 0, 0);
      linkedList0.add(card2);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("h4 ---1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.h4 ---1
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card.createCards();
      Card.Type[] card_TypeArray0 = Card.Type.values();
      Card.Type[] card_TypeArray1 = Card.Type.values();
      assertNotSame(card_TypeArray1, card_TypeArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      Card.createCards();
  }
}
