/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 19:27:05 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import dominion.Randomness;
import java.io.ObjectStreamConstants;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      int int0 = Randomness.totalCallsToRandom;
      int int1 = Randomness.totalCallsToRandom;
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " bought ");
      HashMap<Card, Integer> hashMap0 = gameState0.tokensPlaced;
      gameState0.gameBoard = hashMap0;
      player0.drawCard();
      Player player1 = player0.clone();
      HashMap<Card, Integer> hashMap1 = new HashMap<Card, Integer>();
      player1.discard = list0;
      player1.initializePlayerTurn();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      Player player0 = new Player(gameState0, "");
      gameState0.toString();
      Player player1 = new Player(gameState1, "The board game is empty you need to intialize the game!!!!");
      gameState1.addPlayer(player0);
      player1.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card.getCard(list1, card_CardName0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      gameState1.addPlayer(player1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card card0 = Card.getCard(list0, card_CardName0);
      int int0 = Randomness.totalCallsToRandom;
      Randomness.reset(0L);
      int int1 = Randomness.totalCallsToRandom;
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, " bought ");
      gameState0.addCard(card0);
      Player player1 = player0.clone();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      player1.discard = list0;
      gameState0.initializeGame();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card card0 = Card.getCard(list0, card_CardName0);
      Randomness.reset(0L);
      int int0 = Randomness.totalCallsToRandom;
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, " bought ");
      gameState0.addCard(card0);
      Player player1 = player0.clone();
      player1.gain(card0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState1.gameBoard = hashMap0;
      gameState0.initializeGame();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "+");
      player0.playKingdomCard((GameState) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      Player player0 = new Player(gameState0, "QtB]dq");
      player0.drawCard();
      gameState1.addCard((Card) null);
      gameState0.addCard((Card) null);
      gameState0.toString();
      Player player1 = new Player(gameState1, "The board game is empty you need to intialize the game!!!!");
      player1.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      Card.getCard(gameState1.cards, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Smithy;
      Card.getCard(list1, card_CardName1);
      Card.CardName card_CardName2 = Card.CardName.CouncilRoom;
      Card.getCard(list1, card_CardName2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "+");
      player0.playKingdomCard((GameState) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      gameState0.toString();
      Player player0 = new Player(gameState1, "d-LSN'r<#Y/");
      Integer integer0 = new Integer((-825));
      player0.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      Card.getCard(gameState1.cards, card_CardName0);
      gameState1.addPlayer(player0);
      Card.CardName card_CardName1 = Card.CardName.Smithy;
      Card.getCard(list1, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Randomness.nextRandomInt(17);
      Randomness.reset(0);
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      gameState0.toString();
      Player player0 = new Player(gameState1, "d-LSN'r<#Y/");
      Integer integer0 = new Integer((-825));
      player0.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      Card.getCard(gameState1.cards, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Smithy;
      Card.getCard(list1, card_CardName1);
      Card.CardName card_CardName2 = Card.CardName.CouncilRoom;
      Card.getCard(list1, card_CardName2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      gameState0.toString();
      Player player0 = new Player(gameState1, "d-LSN'r<#Y/");
      player0.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      Card.getCard(gameState1.cards, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.CouncilRoom;
      Card.getCard(list1, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player1.drawCard();
      gameState1.addCard((Card) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.takeCard(card_CardName0);
      gameState0.addCard((Card) null);
      List<Card> list0 = Card.createCards();
      gameState0.cards = list0;
      vector0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.getCard(vector0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Type card_Type0 = Card.Type.TREASURE;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card card0 = Card.getCard(vector0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayDeque<Card> arrayDeque0 = new ArrayDeque<Card>();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(arrayDeque0, card_Type0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Object object0 = new Object();
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is empty you need to intialize the game!!!!");
      player0.scoreFor();
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card.getCard(list1, card_CardName0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      gameState0.addPlayer(player0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      int int0 = Randomness.totalCallsToRandom;
      int int1 = Randomness.totalCallsToRandom;
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " bought ");
      Player player1 = player0.clone();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      player1.discard = list0;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      gameState0.toString();
      Player player0 = new Player(gameState1, "The board game is empty you need to intialize the game!!!!");
      player0.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.getCard(list1, card_CardName0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      gameState1.addPlayer(player0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      gameState0.toString();
      Player player0 = new Player(gameState1, "The board game is empty you need to intialize the game!!!!");
      player0.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list1, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Mine;
      Card.getCard(list1, card_CardName1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Object object0 = new Object();
      Player player0 = new Player(gameState0, "");
      gameState0.toString();
      Player player1 = new Player(gameState1, "The board game is empty you need to intialize the game!!!!");
      gameState1.addPlayer(player0);
      gameState0.cards = list0;
      player1.scoreFor();
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list1, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.CouncilRoom;
      Card.getCard(list1, card_CardName1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "+");
      player0.playKingdomCard((GameState) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = gameState0.cards;
      Object object0 = new Object();
      Player player0 = new Player(gameState0, "QtB]dq");
      player0.drawCard();
      gameState1.takeCard((Card) null);
      gameState0.toString();
      Player player1 = new Player(gameState1, "The board game is empty you need to intialize the game!!!!");
      gameState1.addPlayer(player0);
      int int0 = player0.coins;
      gameState1.getWinners();
      gameState1.addPlayer(player0);
      Object object1 = new Object();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.getCard(list1, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(list1, card_CardName1);
      player0.hand = gameState1.cards;
  }
}
