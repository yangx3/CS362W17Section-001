/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 19:26:36 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import dominion.Randomness;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.numActions = (-3970);
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.initializePlayerTurn();
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState0, "");
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.buyCard(gameState1, (-3970));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((GameState) null, "T{'$6");
      Player player1 = player0.clone();
      player1.numBuys = (-491);
      player1.buyCard((GameState) null, (-491));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.numActions = (-3970);
      player0.playKingdomCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Card$CardName");
      player0.coins = 20;
      Player player1 = player0.clone();
      player1.discard = list0;
      player1.drawCard();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, " ---");
      Player player1 = player0.clone();
      player1.discard = gameState1.cards;
      Card card0 = player1.drawCard();
      player0.discard(card0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player1.playedCards = list0;
      player1.endTurn();
      player1.drawCard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      List<Card> list0 = Card.createCards();
      player0.playedCards = list0;
      player0.endTurn();
      player0.endTurn();
      player0.initializePlayerTurn();
      player0.endTurn();
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "discards hand");
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "V9p5%h");
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.printHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player1.playedCards = list0;
      player1.endTurn();
      player1.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player1.playKingdomCard(gameState0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      List<Card> list0 = Card.createCards();
      player0.playedCards = list0;
      player0.endTurn();
      player0.endTurn();
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.playKingdomCard((GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>(0);
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      player0.gain((Card) null);
      Randomness.random = null;
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Randomness", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      List<Card> list0 = Card.createCards();
      player0.playedCards = list0;
      player0.discard = list0;
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      Stack<Card> stack0 = new Stack<Card>();
      player0.hand = (List<Card>) stack0;
      stack0.add((Card) null);
      Randomness.random = null;
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Randomness", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "993I,0v9j'U");
      player0.playedCards = null;
      // Undeclared exception!
      try { 
        player0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " ---");
      Card card0 = player0.drawCard();
      // Undeclared exception!
      try { 
        player0.discard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.printHand();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.playedCards = gameState0.cards;
      int int0 = player0.scoreFor();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Card$CardName");
      player0.coins = 20;
      Player player1 = player0.clone();
      player1.numBuys = 2147483645;
      // Undeclared exception!
      try { 
        player1.buyCard(gameState0, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Card$CardName");
      player0.coins = 20;
      player0.buyCard(gameState0, 20);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.buyCard(gameState0, (-107));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((GameState) null, "gq#[s|>");
      player0.coins = (-2051);
      player0.buyCard((GameState) null, (-4864));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      List<Card> list0 = Card.createCards();
      player0.playedCards = list0;
      player0.endTurn();
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "Village");
      player0.endTurn();
      player0.playKingdomCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((GameState) null, "T{'$6");
      player0.gain((Card) null);
      player0.endTurn();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      List<Card> list0 = Card.createCards();
      player0.playedCards = list0;
      player0.endTurn();
      player0.endTurn();
      GameState gameState0 = new GameState(list0);
      player0.playKingdomCard(gameState0);
      assertEquals(1, list0.size());
  }
}
