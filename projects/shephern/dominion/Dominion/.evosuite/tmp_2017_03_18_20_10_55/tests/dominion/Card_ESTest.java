/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 03:13:17 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import dominion.Randomness;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      gameState0.clone();
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(list0, card_CardName1);
      Card.CardName card_CardName2 = Card.CardName.Estate;
      Card.CardName.values();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Card.createCards();
      Player player0 = new Player(gameState0, "Pvp %a+u|OB~7dVm^");
      Player player1 = player0.clone();
      player1.discard = gameState0.cards;
      player0.toString();
      player1.scoreFor();
      player1.initializePlayerTurn();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Card.createCards();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~7dVm^");
      Player player1 = player0.clone();
      player1.numBuys = 8;
      player1.discard = gameState0.cards;
      player0.playedCards = list0;
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card card0 = Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      Player player1 = new Player(gameState1, "");
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      player1.toString();
      Card.getCard(list0, card_CardName1);
      // Undeclared exception!
      try { 
        player1.discard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Card.createCards();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~7dVm^");
      Player player1 = player0.clone();
      player1.numBuys = 8;
      player1.discard = gameState0.cards;
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.getCard(list0, card_CardName0);
      Object object0 = new Object();
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card.filter(list0, card_Type0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      Player player1 = new Player(gameState1, "");
      player0.drawCard();
      player1.numBuys = 17;
      player1.discard = gameState1.cards;
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.getCard(list0, card_CardName0);
      Randomness.random = null;
      Object object0 = new Object();
      Card.Type card_Type0 = Card.Type.TREASURE;
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, ".");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      Object object0 = new Object();
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card.filter(list0, card_Type0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName.values();
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Type card_Type0 = Card.Type.TREASURE;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayDeque<Card> arrayDeque0 = new ArrayDeque<Card>();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(arrayDeque0, card_Type0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card card0 = Card.getCard(vector0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~7dVm^");
      Card.CardName card_CardName1 = Card.CardName.CouncilRoom;
      gameState1.addPlayer(player0);
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.CardName.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      player0.coins = 12;
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Card.createCards();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~\"dVm^");
      Player player1 = player0.clone();
      player1.numBuys = 8;
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Card.createCards();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~7dVm^");
      Player player1 = player0.clone();
      gameState1.isGameOver();
      player1.numBuys = 8;
      player1.discard = gameState0.cards;
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~7dVm^");
      Player player1 = player0.clone();
      player1.discard = gameState0.cards;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Card.createCards();
      Player player0 = new Player(gameState0, "Pvp %a+u|OB~7dVm^");
      Player player1 = player0.clone();
      player1.discard = gameState0.cards;
      player0.toString();
      player1.scoreFor();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "Pvp %a+u|OB~7dVm^");
      int int0 = 17;
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName.values();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.Copper;
      gameState0.takeCard(card_CardName0);
      gameState0.takeCard((Card) null);
      arrayList0.add((Card) null);
      GameState gameState1 = new GameState((List<Card>) arrayList0);
      // Undeclared exception!
      try { 
        gameState1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Randomness.totalCallsToRandom = (-24);
  }
}
