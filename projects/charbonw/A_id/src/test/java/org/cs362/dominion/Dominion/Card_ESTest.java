/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:24:45 GMT 2017
 */

package org.cs362.dominion.Dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import org.cs362.dominion.Dominion.Card;
import org.cs362.dominion.Dominion.GameState;
import org.cs362.dominion.Dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.Type.values();
      Card card0 = Card.FEAST;
      Player player0 = new Player();
      // Undeclared exception!
      card0.play(player0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card card0 = Card.EMBARGO;
      Player player0 = new Player();
      card0.play(player0, 4);
      GameState gameState0 = null;
      try {
        gameState0 = new GameState(671, 1610, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.values();
      Card card0 = Card.GREATHALL;
      GameState gameState0 = new GameState((-1389), (-1389), false);
      Player player0 = new Player(";(", false, gameState0, 1363, 1363);
      gameState0.printBoard();
      card0.effect(player0);
      card0.effect(player0, 1363);
      player0.addDeck(card0);
      player0.playTurn((-3021));
      card0.effect(player0, 10);
      Card.Type.values();
      Card card1 = Card.CUTPURSE;
      player0.addField(card1);
      // Undeclared exception!
      try { 
        Card.valueOf("&Lh x|TYz}+Xa>.0&$h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.&Lh x|TYz}+Xa>.0&$h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.values();
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState((-3061), (-3061), true);
      Player player0 = new Player("", false, gameState0, 18, (-3061));
      // Undeclared exception!
      try { 
        card0.play(player0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card card0 = Card.CURSE;
      GameState gameState0 = new GameState((-4162), (-4162), true);
      Player player0 = new Player("LA_", true, gameState0, 0, 1028);
      card0.play(player0);
      Player player1 = new Player();
      player1.draw(true);
      card0.getVictory(player1);
      // Undeclared exception!
      try { 
        Card.valueOf("LA_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.LA_
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.values();
      Card card0 = Card.GARDENS;
      GameState gameState0 = new GameState((-2605), (-2605), false);
      Player player0 = new Player("1GQ6U", false, gameState0, (-2605), (-1));
      card0.play(player0, 3);
      Player player1 = new Player();
      card0.play(player1, (-1278));
      card0.effect(player1, 2246);
      Card card1 = Card.SMITHY;
      card0.equals(card1);
      card1.getType();
      card1.getVictory(player0);
      card0.getVictory(player1);
      card1.play(player0, (-2605));
      card0.effect(player1, 452);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.values();
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState((-1), (-1), true);
      Player player0 = new Player();
      // Undeclared exception!
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card card0 = Card.BARON;
      Player player0 = new Player("$9H9sC>@)(Z", true, (GameState) null, 42, 0);
      // Undeclared exception!
      try { 
        card0.effect(player0, (-532));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card card0 = Card.MINE;
      Player player0 = new Player();
      card0.effect(player0, 8);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.values();
      Card card0 = Card.BARON;
      Player player0 = new Player();
      card0.play(player0);
      Player player1 = new Player("", false, player0.gameState, (-74), (-1097));
      player1.actionPhase();
      // Undeclared exception!
      try { 
        card0.getDesc((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.values();
      Card card0 = Card.FEAST;
      Card card1 = Card.FEAST;
      card0.equals(card1);
      Player player0 = new Player();
      // Undeclared exception!
      card0.effect(player0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card card0 = Card.FEAST;
      Card.valueOf("COPPER");
      // Undeclared exception!
      try { 
        Card.valueOf("O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.O
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card card0 = Card.COPPER;
      card0.getType();
      Player player0 = new Player();
      card0.play(player0, 2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card card0 = Card.ESTATE;
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      GameState gameState0 = new GameState((-1258), 2, false);
      Player player0 = new Player("", false, gameState0, 2, 3);
      card0.effect(player0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.Type.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      card0.getType();
      Player player0 = new Player();
      card0.play(player0);
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState((-3846), 2, true);
      Player player0 = new Player("", true, gameState0, 1, 1);
      player0.printHand();
      ArrayList<GameState.Supply> arrayList0 = new ArrayList<GameState.Supply>();
      gameState0.supply = arrayList0;
      player0.shuffle();
      player0.addMoney(0, false);
      player0.addDiscard(card0);
      // Undeclared exception!
      try { 
        card0.effect(player0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card card0 = Card.VILLAGE;
      Player player0 = new Player();
      player0.prompt(0, 1746);
      card0.play(player0);
      player0.buyPhase();
      card0.getType();
      card0.effect(player0, 0);
      card0.play(player0, 0);
      card0.getDesc(player0);
      // Undeclared exception!
      try { 
        player0.chooseCard();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card card0 = Card.GREATHALL;
      Player player0 = new Player();
      player0.addDiscard(card0);
      player0.prompt((-1531), (-1531), 37);
      player0.buyPhase();
      card0.play(player0);
      card0.getType();
      Card.Type.values();
      card0.aOrAn();
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card card0 = Card.SMITHY;
      card0.effect((Player) null, 0);
      // Undeclared exception!
      try { 
        card0.effect((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Card$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.Type.values();
      Card.Type.values();
      Card card0 = Card.GOLD;
      // Undeclared exception!
      try { 
        card0.getDesc((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card card0 = Card.FEAST;
      Player player0 = new Player();
      card0.effect(player0, 13);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card card0 = Card.EMBARGO;
      Player player0 = new Player();
      card0.effect(player0);
      Player player1 = new Player();
      card0.play(player1);
      Card card1 = Card.TREASUREMAP;
      player0.addDeck(card1);
      // Undeclared exception!
      try { 
        Card.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card card0 = Card.EMBARGO;
      Player player0 = new Player();
      card0.play(player0);
      Card card1 = Card.CUTPURSE;
      card0.equals(card1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card card0 = Card.GOLD;
      card0.aOrAn();
      // Undeclared exception!
      try { 
        card0.play((Player) null, (-2515));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GameState gameState0 = new GameState(3, 3, false);
      Player player0 = new Player("%n%s %s %s %-15s %s%n", false, gameState0, (-3208), 40);
      Card card0 = player0.draw(false);
      card0.effect(player0);
      card0.getDesc(player0);
      card0.getVictory(player0);
      card0.getVictory(player0);
      Card.Type.values();
      Card card1 = Card.SILVER;
      card0.equals(card1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card card0 = Card.SMITHY;
      card0.aOrAn();
      Player player0 = new Player();
      card0.getDesc(player0);
      Player player1 = new Player();
      card0.play(player1);
      // Undeclared exception!
      try { 
        Card.valueOf("a ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.a 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      card0.aOrAn();
      Player player0 = new Player("an ", false, (GameState) null, (-1736), (-1736));
      // Undeclared exception!
      try { 
        card0.play(player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card card0 = Card.ESTATE;
      card0.aOrAn();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card card0 = Card.GOLD;
      GameState gameState0 = new GameState((-2543), (-2543), true);
      Player player0 = new Player("", true, gameState0, 2651, 13);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card card0 = Card.SILVER;
      Player player0 = new Player();
      card0.play(player0, 42);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState((-3362), (-3362), false);
      Player player0 = new Player("", false, gameState0, (-2194), (-861));
      card0.effect(player0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      Player player0 = new Player();
      player0.shuffle();
      player0.gain(3);
      card0.getDesc(player0);
      card0.effect(player0, 10);
      Card card1 = Card.SILVER;
      card0.equals(card1);
      card0.play(player0);
      player0.actionPhase();
      Card card2 = Card.DUCHY;
      player0.shuffle();
      card1.equals(card2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card.Type.values();
      Card card0 = Card.FEAST;
      String string0 = "?:JG?z";
      boolean boolean0 = true;
      int int0 = 0;
      int int1 = 8;
      boolean boolean1 = false;
      String string1 = "uPD7.,D|:r~1i]";
      int int2 = 3;
      GameState gameState0 = new GameState(0, 3, true);
      Player player0 = new Player("e>3W';'{c", true, gameState0, 0, 1367);
      // Undeclared exception!
      card0.effect(player0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      Card card1 = Card.DUCHY;
      card0.equals(card1);
      GameState gameState0 = new GameState(3, 3, false);
      Player player0 = new Player("Gain a card from the Supply costing less than $5 (1-", false, gameState0, 3, 4);
      card0.effect(player0);
      GameState gameState1 = new GameState((-795), (-795), false);
      Player player1 = new Player("Gain a card from the Supply costing less than $5 (1-", false, gameState1, (-795), (-795));
      card0.play(player1);
      card1.effect(player1);
      card0.play(player1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card card0 = Card.VILLAGE;
      GameState gameState0 = new GameState(1, (-1002), false);
      Player player0 = new Player("HuH\"<SE7", true, gameState0, (-1002), (-1028));
      card0.effect(player0, (-1002));
      card0.getType();
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card.values();
      Card.values();
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState((-1389), (-1389), false);
      Player player0 = new Player(" (", false, gameState0, 1363, 1363);
      gameState0.printBoard();
      card0.effect(player0, 1363);
      player0.addDeck(card0);
      player0.playTurn((-3021));
      card0.effect(player0, 10);
      Card.Type.values();
      Card card1 = Card.CUTPURSE;
      player0.addField(card1);
      // Undeclared exception!
      try { 
        Card.valueOf("&Lh x|TYz}+Xa>.0&$h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.&Lh x|TYz}+Xa>.0&$h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card card0 = Card.BARON;
      Player player0 = new Player();
      card0.play(player0, 1);
      assertEquals(2, player0.getBuys());
      assertEquals(0, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card card0 = Card.TREASUREMAP;
      GameState gameState0 = new GameState(0, 0, true);
      gameState0.addTrash(card0);
      Card card1 = Card.MINE;
      Player player0 = new Player("1*gqclpr-v", true, gameState0, 0, (-1));
      card0.getVictory(player0);
      Card.values();
      gameState0.printBoard();
      card0.getDesc(player0);
      card1.effect(player0, 0);
      card0.equals(card1);
      card0.play(player0);
      card1.aOrAn();
      card1.getType();
      card1.effect(player0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("1*gqclpr-v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Dominion.Card.Type.1*gqclpr-v
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
