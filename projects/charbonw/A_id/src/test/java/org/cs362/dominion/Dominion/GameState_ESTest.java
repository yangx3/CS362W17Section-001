/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:23:16 GMT 2017
 */

package org.cs362.dominion.Dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Pattern;
import org.cs362.dominion.Dominion.Card;
import org.cs362.dominion.Dominion.GameState;
import org.cs362.dominion.Dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState(0, 3, true);
      gameState0.newTurn();
      Card card0 = Card.GOLD;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState0.trash = arrayList0;
      gameState0.addSupply(12);
      gameState0.setEmbargo(3);
      gameState0.gameEnd();
      gameState0.addSupply(card0);
      gameState0.addTrash(card0);
      gameState0.removeSupply(card0);
      gameState0.printBoard();
      gameState0.getAmount(3);
      boolean boolean0 = gameState0.loud;
      gameState0.addSupply(card0);
      Card card1 = Card.BARON;
      gameState0.addSupply(card1);
      // Undeclared exception!
      try { 
        gameState0.getFaceCard((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState(0, 3, true);
      gameState0.newTurn();
      gameState0.supply = null;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState0.trash = arrayList0;
      // Undeclared exception!
      try { 
        gameState0.addSupply(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState(7, 0, false);
      Card card0 = Card.TREASUREMAP;
      gameState0.addTrash(card0);
      gameState0.gameEnd();
      gameState0.loud = true;
      ArrayList<GameState.Supply> arrayList0 = gameState0.supply;
      arrayList0.removeAll(gameState0.players);
      arrayList0.trimToSize();
      gameState0.supply = arrayList0;
      gameState0.loud = false;
      Integer integer0 = new Integer(0);
      Integer.compare((-888), 2);
      Integer.toUnsignedLong(7);
      arrayList0.remove((Object) integer0);
      gameState0.gameEnd();
      Card card1 = Card.COPPER;
      gameState0.addSupply(card1);
      gameState0.gameEnd();
      gameState0.gameEnd();
      gameState0.addSupply(card1);
      Card card2 = Card.ESTATE;
      gameState0.removeSupply(card2);
      gameState0.clean();
      gameState0.newTurn();
      gameState0.addTrash(card1);
      gameState0.addSupply(0);
      Scanner scanner0 = gameState0.scan;
      gameState0.findWinner();
      gameState0.supply = arrayList0;
      GameState gameState1 = null;
      try {
        gameState1 = new GameState(7, 0, true);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState(7, 0, false);
      Card card0 = Card.TREASUREMAP;
      gameState0.addTrash(card0);
      gameState0.gameEnd();
      gameState0.loud = true;
      ArrayList<GameState.Supply> arrayList0 = gameState0.supply;
      arrayList0.removeAll(gameState0.players);
      arrayList0.trimToSize();
      gameState0.supply = arrayList0;
      gameState0.supply = arrayList0;
      Integer integer0 = new Integer(0);
      Integer.compare((-888), 2);
      Integer.toUnsignedLong(7);
      gameState0.gameEnd();
      Card card1 = Card.COPPER;
      gameState0.addSupply(card1);
      gameState0.gameEnd();
      gameState0.gameEnd();
      gameState0.addSupply(card1);
      gameState0.clean();
      // Undeclared exception!
      try { 
        gameState0.newTurn();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState(7, 0, false);
      Card card0 = Card.TREASUREMAP;
      gameState0.addTrash(card0);
      gameState0.gameEnd();
      gameState0.loud = true;
      ArrayList<GameState.Supply> arrayList0 = gameState0.supply;
      arrayList0.trimToSize();
      gameState0.supply = arrayList0;
      gameState0.loud = false;
      Integer integer0 = new Integer(0);
      Integer.compare(0, 2);
      Integer.toUnsignedLong(7);
      SystemInUtil.addInputLine("test");
      arrayList0.remove((Object) integer0);
      gameState0.gameEnd();
      Card card1 = Card.COPPER;
      gameState0.addSupply(card1);
      gameState0.gameEnd();
      gameState0.gameEnd();
      gameState0.addSupply(card1);
      gameState0.clean();
      gameState0.addTrash(card1);
      gameState0.addSupply(0);
      Scanner scanner0 = gameState0.scan;
      gameState0.findWinner();
      gameState0.supply = arrayList0;
      GameState gameState1 = null;
      try {
        gameState1 = new GameState(7, 0, true);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VILLAGE");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P\"Uy4 GEBJXOQ48B");
      GameState gameState0 = new GameState(0, 0, true);
      ArrayList<Player> arrayList0 = gameState0.players;
      gameState0.players = arrayList0;
      Random.setNextRandom(0);
      arrayList0.iterator();
      gameState0.gameEnd();
      gameState0.getTrashSize();
      gameState0.players = arrayList0;
      Player player0 = new Player("VILLAGE", true, gameState0, 0, (-1478));
      player0.getVictory();
      gameState0.players.add(player0);
      arrayList0.add(player0);
      gameState0.getAmount(0);
      gameState0.clean();
      gameState0.players.clone();
      gameState0.getTrashSize();
      gameState0.addSupply(12);
      gameState0.supply = null;
      gameState0.players = arrayList0;
      // Undeclared exception!
      try { 
        gameState0.clean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GameState gameState0 = new GameState((-3166), 0, true);
      gameState0.trash = null;
      gameState0.scan = null;
      gameState0.clean();
      // Undeclared exception!
      try { 
        gameState0.findWinner();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState(0, (-915), false);
      gameState0.loud = false;
      // Undeclared exception!
      gameState0.findWinner();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState(0, 0, false);
      Card card0 = Card.PROVINCE;
      gameState0.printBoard();
      gameState0.supply = null;
      // Undeclared exception!
      try { 
        gameState0.addSupply(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState((-232), (-232), true);
      // Undeclared exception!
      try { 
        gameState0.getEmbargo((-232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameState gameState0 = new GameState(0, 0, false);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card card0 = Card.TREASUREMAP;
      arrayList0.add(card0);
      gameState0.trash = arrayList0;
      Card card1 = Card.CUTPURSE;
      arrayList0.trimToSize();
      gameState0.removeSupply(card1);
      Card card2 = Card.COPPER;
      arrayList0.add(card2);
      gameState0.findWinner();
      // Undeclared exception!
      try { 
        gameState0.getAmount(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState((-826), (-826), true);
      // Undeclared exception!
      try { 
        gameState0.getAmount((-826));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState((-144), (-144), true);
      gameState0.printBoard();
      gameState0.clean();
      Card card0 = Card.COUNCILROOM;
      gameState0.removeSupply(card0);
      gameState0.gameEnd();
      // Undeclared exception!
      try { 
        gameState0.addSupply(1608);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1608, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState((-3791), (-3791), true);
      gameState0.gameEnd();
      gameState0.getTrashSize();
      gameState0.gameEnd();
      gameState0.clean();
      Card card0 = Card.MINE;
      gameState0.addSupply(card0);
      gameState0.clean();
      gameState0.clean();
      // Undeclared exception!
      try { 
        gameState0.getEmbargo(1043);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1043, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState((-159), (-159), true);
      gameState0.clean();
      gameState0.gameEnd();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameState gameState0 = new GameState((-1363), (-1363), true);
      Card card0 = Card.PROVINCE;
      gameState0.addTrash(card0);
      // Undeclared exception!
      try { 
        gameState0.setEmbargo((-1363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState(9, 1, false);
      gameState0.printBoard();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameState gameState0 = new GameState(4, 4, false);
      gameState0.addSupply(4);
      gameState0.getAmount(4);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState0.trash = arrayList0;
      gameState0.gameEnd();
      gameState0.gameEnd();
      gameState0.gameEnd();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState(0, (-1266), false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameState gameState0 = new GameState((-2989), (-2989), true);
      gameState0.newTurn();
      Card card0 = Card.GREATHALL;
      gameState0.addTrash(card0);
      gameState0.printBoard();
      gameState0.sortSupply();
      boolean boolean0 = gameState0.loud;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameState gameState0 = null;
      try {
        gameState0 = new GameState(7, 95, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GameState gameState0 = new GameState(0, 0, true);
      Card card0 = Card.CURSE;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState0.trash = arrayList0;
      Card card1 = Card.GARDENS;
      Card card2 = Card.SMITHY;
      arrayList0.add(card2);
      arrayList0.add(card1);
      gameState0.addTrash(card0);
      arrayList0.add(card0);
      gameState0.printBoard();
      gameState0.addSupply(card0);
      gameState0.gameEnd();
      gameState0.addSupply(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState(0, 0, true);
      Card card0 = Card.SILVER;
      gameState0.addTrash(card0);
      gameState0.gameEnd();
      gameState0.printBoard();
      gameState0.getTrashSize();
      gameState0.clean();
      gameState0.newTurn();
      gameState0.findWinner();
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      gameState0.players = arrayList0;
      gameState0.getEmbargo(0);
      gameState0.getAmount(1);
      gameState0.removeSupply(card0);
      // Undeclared exception!
      try { 
        gameState0.setEmbargo(2805);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2805, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GameState gameState0 = new GameState(0, 3, true);
      gameState0.newTurn();
      Card card0 = Card.GOLD;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState0.addSupply(12);
      gameState0.setEmbargo(3);
      gameState0.gameEnd();
      gameState0.addSupply(card0);
      gameState0.addTrash(card0);
      gameState0.addSupply(3);
      gameState0.printBoard();
      gameState0.getAmount(3);
      boolean boolean0 = gameState0.loud;
      gameState0.addSupply(card0);
      int int0 = Pattern.CASE_INSENSITIVE;
      Card card1 = Card.BARON;
      gameState0.addSupply(card1);
      gameState0.getFaceCard(2);
      gameState0.findWinner();
      gameState0.clean();
      ArrayList<Player> arrayList1 = gameState0.players;
      assertFalse(arrayList1.isEmpty());
  }
}
