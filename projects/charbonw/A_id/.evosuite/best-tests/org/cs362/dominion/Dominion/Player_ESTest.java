/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 04:21:08 GMT 2017
 */

package org.cs362.dominion.Dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.cs362.dominion.Dominion.Card;
import org.cs362.dominion.Dominion.GameState;
import org.cs362.dominion.Dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player0 = new Player();
      player0.addMoney((-1), true);
      player0.buyPhase();
      player0.printHand();
      player0.draw();
      Card card0 = Card.AMBASSADOR;
      player0.getMoney();
      player0.cleanup();
      player0.cleanup();
      player0.addBuys((-1));
      player0.getDeckSize();
      player0.draw(false);
      Random.setNextRandom((-1));
      player0.getBuys();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState((-1675), (-1675), true);
      Player player0 = new Player("w;p", true, gameState0, (-1675), 1);
      player0.actionPhase();
      Card card0 = Card.ADVENTURER;
      player0.addHand(card0);
      player0.chooseCard();
      player0.chooseCard();
      player0.actionPhase();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((String) null, false, (GameState) null, 0, 0);
      Card card0 = Card.ESTATE;
      player0.addDeck(card0);
      player0.shuffle();
      Card card1 = Card.ESTATE;
      player0.handContains(card1);
      // Undeclared exception!
      try { 
        player0.actionPhase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player("", true, (GameState) null, 3161, 1662);
      // Undeclared exception!
      try { 
        player0.draw(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player("!S>aY\". !)", false, (GameState) null, 86, 86);
      Card card0 = Card.VILLAGE;
      player0.addHand(card0);
      player0.handContains(card0);
      // Undeclared exception!
      try { 
        player0.discard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((String) null, false, (GameState) null, 0, 0);
      // Undeclared exception!
      try { 
        player0.addBuys(1733);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((String) null, false, (GameState) null, 0, 0);
      Card card0 = Card.ESTATE;
      player0.addDeck(card0);
      player0.shuffle();
      // Undeclared exception!
      try { 
        player0.prompt(9, 0, 759);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player("", false, (GameState) null, 0, 42);
      // Undeclared exception!
      try { 
        player0.gain(42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState(0, 0, true);
      Player player0 = new Player("q&Uk(!*PH]A", true, gameState0, 2629, 0);
      player0.prompt(2629, 0, 0);
      Card card0 = Card.DUCHY;
      gameState0.addSupply(card0);
      player0.chooseCard();
      player0.printHand();
      gameState0.gameEnd();
      // Undeclared exception!
      try { 
        gameState0.setEmbargo(2243);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2243, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player("[D]", false, (GameState) null, 0, 1);
      Card card0 = Card.CURSE;
      // Undeclared exception!
      try { 
        player0.gain(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      player0.gameState = null;
      player0.cleanup();
      // Undeclared exception!
      try { 
        player0.printHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.buyPhase();
      Card card0 = Card.COPPER;
      player0.gain(card0);
      player0.buyPhase();
      player0.addField(card0);
      Card card1 = Card.CURSE;
      player0.addDeck(card1);
      player0.cleanup();
      player0.gain(card0);
      player0.getHand(0);
      player0.buyPhase();
      player0.addHand(card0);
      player0.addMoney(0);
      player0.draw(true);
      player0.getMoney();
      Card card2 = Card.PROVINCE;
      player0.reveal(card2);
      player0.draw(true);
      player0.printHand();
      player0.addBuys((-2627));
      player0.getVictory();
      player0.getActions();
      player0.shuffle();
      player0.addMoney((-2627), true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      player0.shuffle();
      Card card0 = Card.TREASUREMAP;
      player0.printHand();
      player0.addDeck(card0);
      player0.printHand();
      player0.playField(card0);
      player0.clean();
      player0.addMoney((-710), true);
      player0.addBuys((-710));
      player0.getBuys();
      player0.draw();
      player0.actionPhase();
      player0.playTurn(1586);
      player0.clean();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((String) null, false, (GameState) null, 0, 0);
      // Undeclared exception!
      try { 
        player0.prompt(1152, 847);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.PROVINCE;
      player0.print((String) null);
      player0.addDiscard(card0);
      player0.getVictory();
      player0.shuffle();
      player0.gain(card0);
      player0.addActions(5);
      Card card1 = player0.draw();
      card1.effect(player0, 5);
      card1.play(player0);
      card1.play(player0, 6);
      player0.gain(card0);
      player0.handContains(card1);
      player0.gain(6);
      player0.addMoney((-521), true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameState gameState0 = new GameState((-661), 5, false);
      Player player0 = new Player("", true, gameState0, 5, 1);
      player0.addActions((-661));
      Card card0 = Card.SMITHY;
      player0.addField(card0);
      gameState0.findWinner();
      player0.getVictory();
      player0.prompt(5, (-3086), (-661));
      player0.getActions();
      player0.clean();
      player0.getBuys();
      player0.getActions();
      player0.getVictory();
      player0.getBuys();
      player0.addMoney(1, false);
      player0.shuffle();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      player0.clean();
      player0.addActions(1447);
      Card card0 = Card.SILVER;
      Card card1 = Card.COPPER;
      player0.discard(card1);
      player0.clean();
      player0.draw(false);
      player0.addDeck(card0);
      player0.getBuys();
      // Undeclared exception!
      try { 
        player0.getHand(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player("", true, (GameState) null, (-420), (-420));
      // Undeclared exception!
      try { 
        player0.buyPhase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState((-1168), (-1168), true);
      Player player0 = new Player((String) null, false, gameState0, 0, 0);
      player0.printHand();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.MINE;
      Card card1 = Card.COUNCILROOM;
      player0.addDeck(card1);
      player0.gain(card0);
      player0.draw(true);
      player0.getVictory();
      Card card2 = Card.BARON;
      player0.gain(card2);
      Card card3 = Card.MINE;
      player0.reveal(card3);
      player0.addHand(card3);
      Card card4 = Card.PROVINCE;
      player0.addDeck(card4);
      player0.trash(card0);
      player0.gain(card0);
      player0.getHandSize();
      player0.prompt(8, (-3551));
      player0.trash(card3);
      player0.addBuys(8);
      player0.getMoney();
      player0.prompt((-2475), 1788);
      player0.discard(card4);
      player0.getMoney();
      player0.addDiscard(card2);
      player0.addActions(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.GARDENS;
      player0.addHand(card0);
      player0.chooseCard();
      Card card1 = Card.CURSE;
      player0.addField(card1);
      player0.getBuys();
      Card card2 = Card.COUNCILROOM;
      player0.playField(card2);
      Card card3 = Card.SMITHY;
      player0.addHand(card3);
      player0.addActions(1);
      player0.getVictory();
      player0.returnSupply(card2);
      player0.addHand(card2);
      player0.gain(1);
      player0.addMoney(1, false);
      player0.getBuys();
      Card card4 = Card.SILVER;
      player0.trash(card4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player("BARON", false, (GameState) null, (-880), 812);
      // Undeclared exception!
      try { 
        player0.playTurn(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState((-59), (-59), true);
      Player player0 = new Player("", true, gameState0, 6, (-59));
      player0.prompt((-59), 2, 2);
      Card card0 = Card.ESTATE;
      player0.addField(card0);
      player0.draw();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player();
      player0.cleanup();
      player0.clean();
      Card card0 = Card.EMBARGO;
      Card card1 = Card.CUTPURSE;
      player0.returnSupply(card1);
      Card card2 = Card.VILLAGE;
      player0.playField(card2);
      player0.gameState = null;
      player0.addField(card0);
      player0.addMoney((-1));
      // Undeclared exception!
      try { 
        player0.addActions((-989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.SILVER;
      player0.playField(card0);
      Card card1 = Card.BARON;
      player0.reveal(card1);
      player0.draw(false);
      Card card2 = Card.SILVER;
      player0.returnSupply(card2);
      Card card3 = Card.VILLAGE;
      player0.addField(card3);
      player0.playField(card1);
      player0.prompt((-2643), (-2643), (-2348));
      Card card4 = Card.GOLD;
      player0.returnSupply(card4);
      player0.addDeck(card1);
      player0.printHand();
      player0.addActions(2254);
      player0.shuffle();
      player0.shuffle();
      player0.cleanup();
      player0.shuffle();
      Card card5 = Card.BARON;
      player0.gain(card5);
      GameState gameState0 = new GameState((-2643), 0, true);
      gameState0.clean();
      Card card6 = Card.GARDENS;
      gameState0.addTrash(card6);
      Player player1 = new Player((String) null, false, gameState0, 0, 2);
      // Undeclared exception!
      try { 
        player1.prompt((-55), 12);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player("[D]", true, (GameState) null, 65, 65);
      // Undeclared exception!
      try { 
        player0.chooseCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player();
      player0.shuffle();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.addMoney((-2943));
      player0.buyPhase();
      player0.getDeckSize();
      player0.addMoney((-2943), false);
      player0.getHandSize();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GameState gameState0 = new GameState(0, 0, true);
      Player player0 = new Player("ld{omd;Sm$z+AP&$m+3", true, gameState0, 0, 0);
      ArrayList<Player> arrayList0 = gameState0.players;
      player0.prompt(0, 1075);
      gameState0.players = arrayList0;
      player0.getActions();
      arrayList0.iterator();
      gameState0.gameEnd();
      player0.addBuys(139);
      Card card0 = Card.FEAST;
      player0.actionPhase();
      player0.addDeck(card0);
      // Undeclared exception!
      try { 
        player0.getHand(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player();
      player0.getVictory();
      player0.addMoney(0);
      Card card0 = Card.DUCHY;
      player0.addHand(card0);
      player0.returnSupply(card0);
      player0.getVictory();
      Player player1 = new Player();
      Card card1 = Card.BARON;
      player1.addHand(card1);
      player1.handContains(card1);
      // Undeclared exception!
      try { 
        player1.gain(5086);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5086, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.ESTATE;
      player0.addHand(card0);
      Card card1 = Card.BARON;
      player0.getVictory();
      player0.prompt(1, 65, 0);
      player0.discard(card1);
      player0.addHand(card0);
      player0.print("`?@");
      player0.printHand();
      // Undeclared exception!
      try { 
        player0.prompt((-3115), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.DUCHY;
      player0.addMoney(2121);
      player0.addHand(card0);
      Card card1 = Card.TREASUREMAP;
      player0.discard(card1);
      // Undeclared exception!
      try { 
        player0.gain((-3512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player();
      player0.prompt((-2028), 0, 32);
      Card card0 = Card.VILLAGE;
      player0.trash(card0);
      player0.addHand(card0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player("an ", true, (GameState) null, 4144, 4144);
      Card card0 = Card.SILVER;
      // Undeclared exception!
      try { 
        player0.reveal(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.MINE;
      player0.addHand(card0);
      player0.gain(card0);
      player0.playField(card0);
      player0.shuffle();
      Card card1 = Card.CUTPURSE;
      player0.discard(card1);
      player0.addMoney((-2943));
      player0.buyPhase();
      player0.getDeckSize();
      player0.addMoney((-2943), false);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GameState gameState0 = new GameState(0, (-1211), false);
      gameState0.sortSupply();
      Card card0 = Card.SILVER;
      gameState0.addTrash(card0);
      Player player0 = new Player("", false, gameState0, (-436), 1514);
      player0.cleanup();
      Card card1 = player0.draw();
      player0.printHand();
      Card card2 = Card.COPPER;
      card1.getDesc(player0);
      player0.trash(card2);
      player0.clean();
      player0.getDiscardSize();
      player0.print("-fjhG=71Ul");
      card1.getDesc(player0);
      player0.prompt(2255, 20);
      card1.effect(player0);
      gameState0.loud = true;
      Player player1 = new Player();
      player0.discard(card1);
      player0.addMoney(0);
      player1.addField(card0);
      player1.print("");
      player0.addHand(card2);
      Player player2 = new Player("", true, gameState0, 2255, 0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.DUCHY;
      player0.clean();
      player0.addDiscard(card0);
      player0.reveal(card0);
      player0.getVictory();
      player0.cleanup();
      player0.addBuys(0);
      player0.actionPhase();
      player0.getBuys();
      player0.addHand(card0);
      GameState gameState0 = new GameState(3, 3, false);
      player0.gameState = gameState0;
      player0.playTurn(1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player();
      player0.clean();
      player0.gain(2);
      Card card0 = Card.PROVINCE;
      player0.playField(card0);
      Card card1 = Card.CUTPURSE;
      player0.returnSupply(card1);
      player0.draw(true);
      player0.addDiscard(card1);
      Card card2 = player0.getHand(0);
      player0.getDiscardSize();
      card2.effect(player0);
      player0.getBuys();
      player0.clean();
      player0.addField(card2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player("E", false, (GameState) null, (-3080), 0);
      // Undeclared exception!
      try { 
        player0.print("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      player0.getFieldSize();
      player0.clean();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.MINE;
      player0.addHand(card0);
      player0.discard(card0);
      player0.addActions(2002);
      player0.draw(true);
      GameState gameState0 = null;
      try {
        gameState0 = new GameState(2002, 2002, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.cs362.dominion.Dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player("*'1|e^q[O2", true, (GameState) null, (-3521), (-3521));
      // Undeclared exception!
      try { 
        player0.clean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GameState gameState0 = new GameState(0, 1, false);
      Player player0 = new Player("Trash ", false, gameState0, (-743), 1296);
      Card card0 = Card.EMBARGO;
      Card card1 = Card.SILVER;
      player0.discard(card1);
      player0.trash(card0);
      player0.getVictory();
      // Undeclared exception!
      try { 
        player0.getHand((-743));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GameState gameState0 = new GameState((-156), (-156), true);
      Player player0 = new Player("\nActions: ", true, gameState0, 1112, 0);
      player0.print("");
      gameState0.gameEnd();
      player0.addBuys((-3175));
      player0.prompt((-3175), (-2370));
      Card card0 = Card.SILVER;
      player0.gain(card0);
      player0.clean();
      player0.getVictory();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player();
      player0.print("");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player();
      Random.setNextRandom(11);
      Card card0 = Card.BARON;
      player0.gain(card0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.COUNCILROOM;
      player0.returnSupply(card0);
      player0.addBuys(4);
      player0.clean();
      player0.playTurn(4);
      player0.clean();
      Player player1 = new Player();
      Card card1 = Card.COPPER;
      player1.discard(card1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player();
      player0.prompt(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.GARDENS;
      player0.prompt(2511, 944, 0);
      player0.discard(card0);
      player0.getMoney();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom((-888));
      GameState gameState0 = new GameState((-888), (-888), false);
      SystemInUtil.addInputLine(")\n");
      Player player0 = new Player(")\n", false, gameState0, (-13), (-13));
      player0.buyPhase();
      Card card0 = Card.SILVER;
      player0.reveal(card0);
      Card card1 = Card.GREATHALL;
      player0.prompt((-13), (-971));
      ArrayList<Player> arrayList0 = gameState0.players;
      Player player1 = new Player();
      arrayList0.add(player1);
      gameState0.players = arrayList0;
      player0.addField(card1);
      player0.actionPhase();
      player0.buyPhase();
      player0.buyPhase();
      player0.shuffle();
      player0.actionPhase();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 86;
      Player player0 = new Player("!S>aY\". !)", false, (GameState) null, 86, 86);
      Card card0 = Card.VILLAGE;
      player0.addHand(card0);
      player0.handContains(card0);
      int int1 = 42;
      int int2 = (-80);
      // Undeclared exception!
      try { 
        player0.draw();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.cs362.dominion.Dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.FEAST;
      player0.addHand(card0);
      player0.prompt((-1357), (-1357));
      player0.chooseCard();
      Card card1 = Card.BARON;
      player0.addField(card1);
      player0.playTurn((-1357));
      player0.shuffle();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "testPlayer");
      player0.addMoney((-1), true);
      player0.buyPhase();
      player0.printHand();
      player0.draw();
      player0.draw();
      player0.getMoney();
      player0.cleanup();
      player0.addBuys((-1));
      player0.getDeckSize();
      player0.draw(false);
      player0.getDiscardSize();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player();
      player0.shuffle();
      player0.clean();
      Card card0 = Card.ESTATE;
      player0.printHand();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Card card1 = Card.DUCHY;
      player0.playField(card1);
      player0.returnSupply(card0);
      player0.prompt(2525, (-1417));
      player0.handContains(card0);
      player0.getActions();
      int int0 = Pattern.COMMENTS;
      player0.clean();
      player0.playTurn((-144));
      player0.getVictory();
      Card card2 = Card.VILLAGE;
      player0.addMoney(0);
      player0.playField(card2);
      player0.getDiscardSize();
      player0.shuffle();
      GameState gameState0 = null;
      try {
        gameState0 = new GameState(771, 0, true);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GameState gameState0 = new GameState((-1675), (-1675), true);
      Player player0 = new Player("w;p", true, gameState0, (-267), 2);
      player0.actionPhase();
      // Undeclared exception!
      try { 
        player0.getHand(1866);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1866, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GameState gameState0 = new GameState((-1675), (-1675), true);
      Player player0 = new Player("w;p", true, gameState0, (-267), 1);
      player0.actionPhase();
      player0.chooseCard();
      player0.chooseCard();
      player0.printHand();
      player0.buyPhase();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GameState gameState0 = new GameState(32, 0, false);
      Player player0 = new Player("", false, gameState0, 32, 32);
      player0.cleanup();
      Card card0 = Card.FEAST;
      player0.addMoney(7);
      player0.addHand(card0);
      player0.buyPhase();
      Card card1 = Card.SILVER;
      gameState0.removeSupply(card1);
      int int0 = Pattern.COMMENTS;
      player0.getFieldSize();
      gameState0.printBoard();
      player0.actionPhase();
      gameState0.clean();
      player0.draw(false);
      player0.reveal(card0);
      player0.chooseCard();
      player0.gain(0);
      player0.getDiscardSize();
      player0.actionPhase();
      player0.getHandSize();
      Card card2 = Card.DUCHY;
      player0.clean();
      player0.discard(card2);
      player0.getDeckSize();
      player0.cleanup();
      Card card3 = Card.FEAST;
      player0.trash(card3);
      // Undeclared exception!
      try { 
        player0.gain(3364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3364, Size: 17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GameState gameState0 = new GameState(32, 0, false);
      Player player0 = new Player("", false, gameState0, 32, 32);
      player0.cleanup();
      Card card0 = Card.FEAST;
      player0.addMoney(7);
      player0.addHand(card0);
      player0.buyPhase();
      Card card1 = Card.SILVER;
      gameState0.removeSupply(card1);
      int int0 = Pattern.COMMENTS;
      int int1 = Pattern.UNICODE_CHARACTER_CLASS;
      gameState0.printBoard();
      player0.actionPhase();
      gameState0.clean();
      player0.draw(false);
      player0.reveal(card0);
      player0.chooseCard();
      player0.gain(0);
      player0.getDiscardSize();
      player0.actionPhase();
      player0.getHandSize();
      Card card2 = Card.DUCHY;
      player0.clean();
      player0.discard(card2);
      player0.getDeckSize();
      player0.cleanup();
      Card card3 = Card.FEAST;
      player0.trash(card3);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.shuffle();
      Card card0 = Card.CUTPURSE;
      player0.discard(card0);
      player0.addMoney((-2943));
      player0.buyPhase();
      player0.getDeckSize();
      player0.addMoney((-2943), false);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = Card.GREATHALL;
      player0.returnSupply(card0);
      player0.playTurn(0);
      player0.gain(0);
      Card card1 = player0.draw();
      player0.prompt(11, 0, 4);
      player0.gain(0);
      player0.addBuys(65);
      player0.getHandSize();
      player0.addDiscard(card1);
      player0.playTurn(1);
      player0.prompt(60, 5);
      player0.addMoney((-1));
      player0.chooseCard();
      assertEquals(-1, player0.getMoney());
  }
}
