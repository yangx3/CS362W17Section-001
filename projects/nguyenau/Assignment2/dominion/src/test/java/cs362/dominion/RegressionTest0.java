
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    java.util.Random random0 = null;
    cs362.dominion.Randomness.random = random0;

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.Type type1 = cs362.dominion.Card.Type.TREASURE;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type1.equals(cs362.dominion.Card.Type.TREASURE));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    cs362.dominion.PlayDominion playDominion0 = new cs362.dominion.PlayDominion();

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    cs362.dominion.mainRandomness mainRandomness_instance0 = new cs362.dominion.mainRandomness();

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.CardName cardName1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filterName(iterable_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.Type type1 = cs362.dominion.Card.Type.VICTORY;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type1.equals(cs362.dominion.Card.Type.VICTORY));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    cs362.dominion.Randomness.totalCallsToRandom = (byte)-1;

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    java.util.Random random0 = cs362.dominion.Randomness.random;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(random0);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    cs362.dominion.Randomness.reset((long)'a');

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = player2.addToDeck(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 8);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.CardName cardName1 = cs362.dominion.Card.CardName.Embargo;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filterName(iterable_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + cs362.dominion.Card.CardName.Embargo + "'", cardName1.equals(cs362.dominion.Card.CardName.Embargo));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.CardName cardName1 = cs362.dominion.Card.CardName.GreatHall;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filterName(iterable_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + cs362.dominion.Card.CardName.GreatHall + "'", cardName1.equals(cs362.dominion.Card.CardName.GreatHall));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    cs362.dominion.Randomness.reset(0L);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    cs362.dominion.Randomness.totalCallsToRandom = ' ';

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.Type type1 = cs362.dominion.Card.Type.ACTION;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + cs362.dominion.Card.Type.ACTION + "'", type1.equals(cs362.dominion.Card.Type.ACTION));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    long long0 = cs362.dominion.Randomness.SEED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 0L);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    cs362.dominion.mainCard mainCard_instance0 = new cs362.dominion.mainCard();

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    cs362.dominion.mainPlayer mainPlayer_instance0 = new cs362.dominion.mainPlayer();

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    int i0 = cs362.dominion.Randomness.totalCallsToRandom;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 32);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 60);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    cs362.dominion.Randomness.reset((long)(byte)0);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 60);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    cs362.dominion.Randomness.totalCallsToRandom = (short)10;

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 26);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 9);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    cs362.dominion.Randomness.totalCallsToRandom = 26;

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = cs362.dominion.Randomness.nextRandomInt(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    cs362.dominion.Randomness.totalCallsToRandom = 60;

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    cs362.dominion.Randomness.reset((long)0);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card7 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    cs362.dominion.Randomness.reset((long)(short)1);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    cs362.dominion.Randomness.totalCallsToRandom = (short)0;

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    cs362.dominion.Randomness.reset((long)(byte)-1);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    cs362.dominion.Randomness.totalCallsToRandom = 'a';

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    cs362.dominion.Randomness.totalCallsToRandom = 0;

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 5);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    cs362.dominion.Randomness.reset((long)(short)0);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    cs362.dominion.Randomness.totalCallsToRandom = (byte)10;

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    cs362.dominion.Randomness.reset((long)100);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName7.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    cs362.dominion.Randomness.totalCallsToRandom = (short)-1;

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    cs362.dominion.Randomness.totalCallsToRandom = 1;

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.Type type7 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type7.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = player2.addToDeck(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 10);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    cs362.dominion.Randomness.totalCallsToRandom = (byte)100;

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card15 = cs362.dominion.Randomness.randomMember(list_card14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card17 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    cs362.dominion.Randomness.reset(10L);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = player2.addToDeck(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    cs362.dominion.Randomness.reset((long)60);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 23);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    cs362.dominion.Randomness.totalCallsToRandom = (-1);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b4 = player2.addToDeck(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    cs362.dominion.Randomness.totalCallsToRandom = 100;

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card12 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card10, cardName11);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card13 = cs362.dominion.Randomness.randomMember(list_card12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName11.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    cs362.dominion.Randomness.reset((long)(byte)10);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card12 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card10, cardName11);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Adventurer;
    cs362.dominion.Card card14 = cs362.dominion.Card.getCard(list_card10, cardName13);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card15 = cs362.dominion.Randomness.randomMember(list_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName11.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Adventurer + "'", cardName13.equals(cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 16);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card17 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card[] card_array11 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card12, card_array11);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card15 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName23);
    cs362.dominion.Card.Type type26 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, type26);
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card10, type26);
    cs362.dominion.Card[] card_array29 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card30, card_array29);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card33 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card30, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card30, cardName34);
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard(list_card10, cardName34);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card37 = cs362.dominion.Randomness.randomMember(list_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName14.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type26.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName32.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName34.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 93);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    cs362.dominion.Randomness.totalCallsToRandom = (byte)0;

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card17 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    cs362.dominion.Randomness.totalCallsToRandom = 8;

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    cs362.dominion.Randomness.totalCallsToRandom = 32;

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    java.util.List<cs362.dominion.Card> list_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card9 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card7, cardName8);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card10 = cs362.dominion.Card.getCard(list_card0, cardName8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName6.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName8.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    cs362.dominion.Randomness.totalCallsToRandom = 16;

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b4 = player2.addToDeck(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    cs362.dominion.Randomness.totalCallsToRandom = '4';

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 61);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName16);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card19 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card17, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Silver;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard(list_card17, cardName20);
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard(list_card6, cardName20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName7.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName14.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName16.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName20.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName7.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    cs362.dominion.Randomness.totalCallsToRandom = (byte)1;

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    cs362.dominion.Randomness.totalCallsToRandom = 5;

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playKingdomCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card10 = cs362.dominion.Card.getCard(list_card8, cardName9);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card11 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName7.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName9.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card21 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    cs362.dominion.Randomness.reset((long)' ');

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    cs362.dominion.Randomness.totalCallsToRandom = (short)1;

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card9 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card7, cardName8);
    cs362.dominion.Card[] card_array10 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card11, card_array10);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card14 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card11, cardName13);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card11, cardName15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card20 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card18, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName33);
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName33);
    cs362.dominion.Card.Type type36 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, type36);
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card20, type36);
    cs362.dominion.Card[] card_array39 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card40, card_array39);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card43 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card40, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName44);
    cs362.dominion.Card card46 = cs362.dominion.Card.getCard(list_card20, cardName44);
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card7, cardName44);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName(iterable_card0, cardName44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName6.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName8.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName13.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName15.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName17.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName19.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName26.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type36.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName42.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName44.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.Type type7 = null;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    java.util.List<cs362.dominion.Card> list_card0 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card1 = cs362.dominion.Randomness.randomMember(list_card0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 85);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 9);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card3 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    cs362.dominion.Randomness.reset((long)(byte)100);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card.Type type21 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type21);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card23 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type21.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Silver;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName16);
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card6, cardName16);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card19 = cs362.dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName16.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    cs362.dominion.Randomness.reset((long)'#');

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName20);
    cs362.dominion.Card[] card_array22 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card23, card_array22);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card26 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card23, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card23, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card[] card_array30 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card31, card_array30);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card34 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card31, cardName33);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card31, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card36, cardName37);
    cs362.dominion.Card[] card_array39 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card40, card_array39);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card43 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card40, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName44);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName46);
    cs362.dominion.Card[] card_array48 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card49, card_array48);
    cs362.dominion.Card.CardName cardName51 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card52 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card49, cardName51);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card54 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card49, cardName53);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card56 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card54, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card56, cardName57);
    cs362.dominion.Card.CardName cardName59 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card60 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card58, cardName59);
    cs362.dominion.Card card61 = cs362.dominion.Card.getCard(list_card47, cardName59);
    cs362.dominion.Card card62 = cs362.dominion.Card.getCard(list_card38, cardName59);
    cs362.dominion.Card[] card_array63 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card64, card_array63);
    cs362.dominion.Card.CardName cardName66 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card67 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card64, cardName66);
    cs362.dominion.Card.CardName cardName68 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card69 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card64, cardName68);
    cs362.dominion.Card.Type type70 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card71 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card64, type70);
    java.util.List<cs362.dominion.Card> list_card72 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card38, type70);
    java.util.List<cs362.dominion.Card> list_card73 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, type70);
    java.util.List<cs362.dominion.Card> list_card74 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card14, type70);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card75 = cs362.dominion.Randomness.randomMember(list_card14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName25.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName27.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName33.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName35.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName37.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName42.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName44.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName46.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName51.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName53.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName55.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName57.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName66.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName68.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    org.junit.Assert.assertTrue("'" + type70 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type70.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card.Type type21 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card24 = cs362.dominion.Card.getCard(list_card16, cardName23);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card25 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type21.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName23.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card13, cardName14);
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard(list_card6, cardName14);
    cs362.dominion.Card[] card_array17 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card18, card_array17);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card18, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName24);
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName24);
    cs362.dominion.Card[] card_array27 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card28, card_array27);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card28, cardName30);
    cs362.dominion.Card[] card_array32 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card33, card_array32);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card33, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName37);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card38, cardName39);
    java.util.List<cs362.dominion.Card> list_card41 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card28, cardName39);
    cs362.dominion.Card.Type type42 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card28, type42);
    cs362.dominion.Card.Type type44 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card43, type44);
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card6, type44);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card47 = cs362.dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName12.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName14.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName20.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName24.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName35.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName37.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName39.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type42.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type44.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b4 = player2.addToDeck(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.playKingdomCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = player2.addToDeck(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card17 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    cs362.dominion.Randomness.reset((long)5);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    cs362.dominion.Randomness.reset((long)3);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName33);
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName33);
    cs362.dominion.Card.Type type36 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, type36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card39 = cs362.dominion.Card.getCard(list_card37, cardName38);
    cs362.dominion.Card.CardName cardName40 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard(list_card37, cardName40);
    cs362.dominion.Card.Type type42 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card37, type42);
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type42);
    cs362.dominion.Card[] card_array45 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card46, card_array45);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card46, cardName48);
    cs362.dominion.Card.CardName cardName50 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card51 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card46, cardName50);
    cs362.dominion.Card[] card_array52 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card53, card_array52);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card56 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card53, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card53, cardName57);
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card46, cardName57);
    cs362.dominion.Card.Type type60 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card61 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card46, type60);
    cs362.dominion.Card.CardName cardName62 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card63 = cs362.dominion.Card.getCard(list_card61, cardName62);
    cs362.dominion.Card.CardName cardName64 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card65 = cs362.dominion.Card.getCard(list_card61, cardName64);
    cs362.dominion.Card[] card_array66 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card67 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card67, card_array66);
    cs362.dominion.Card.CardName cardName69 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card70 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card67, cardName69);
    cs362.dominion.Card.CardName cardName71 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card72 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card67, cardName71);
    cs362.dominion.Card[] card_array73 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card74 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card74, card_array73);
    cs362.dominion.Card.CardName cardName76 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card77 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card74, cardName76);
    cs362.dominion.Card.CardName cardName78 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card79 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card74, cardName78);
    java.util.List<cs362.dominion.Card> list_card80 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card67, cardName78);
    cs362.dominion.Card.Type type81 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card82 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card67, type81);
    cs362.dominion.Card.CardName cardName83 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card84 = cs362.dominion.Card.getCard(list_card82, cardName83);
    cs362.dominion.Card.CardName cardName85 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card86 = cs362.dominion.Card.getCard(list_card82, cardName85);
    cs362.dominion.Card.Type type87 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card88 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card82, type87);
    java.util.List<cs362.dominion.Card> list_card89 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card61, type87);
    java.util.List<cs362.dominion.Card> list_card90 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card44, type87);
    cs362.dominion.Card.Type type91 = null;
    java.util.List<cs362.dominion.Card> list_card92 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card44, type91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName26.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type36.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName38.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName40.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type42.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName48.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName50.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName55.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName57.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type60.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName62.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName64.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName69.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName71.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName76.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName78.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type81.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    org.junit.Assert.assertTrue("'" + cardName83 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName83.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card84);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName85.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card86);
    org.junit.Assert.assertTrue("'" + type87 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type87.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 18);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    cs362.dominion.Randomness.totalCallsToRandom = 85;

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    cs362.dominion.Randomness.totalCallsToRandom = 61;

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card.Type type11 = cs362.dominion.Card.Type.ACTION;
    java.util.List<cs362.dominion.Card> list_card12 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card10, type11);
    cs362.dominion.Card[] card_array13 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card14, card_array13);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card17 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card14, cardName16);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card19 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card14, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card14, cardName20);
    cs362.dominion.Card[] card_array22 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card23, card_array22);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card26 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card23, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card23, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card28, cardName29);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card30, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName33);
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard(list_card21, cardName33);
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card12, cardName33);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card37 = cs362.dominion.Randomness.randomMember(list_card36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + cs362.dominion.Card.Type.ACTION + "'", type11.equals(cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName16.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName20.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName25.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName27.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName29.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.Type type12 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, type12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type12);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card15 = cs362.dominion.Randomness.randomMember(list_card14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type12.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    cs362.dominion.Randomness.reset((long)(-1));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str8 = player2.toString();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.Type type7 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName16);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card19 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card17, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card19, cardName20);
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName20);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card23 = cs362.dominion.Randomness.randomMember(list_card22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type7.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName14.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName16.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.buyCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 53);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = cs362.dominion.Randomness.nextRandomInt((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card.CardName cardName1 = cs362.dominion.Card.CardName.Curse;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card2 = cs362.dominion.Card.filterName(iterable_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + cs362.dominion.Card.CardName.Curse + "'", cardName1.equals(cs362.dominion.Card.CardName.Curse));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    cs362.dominion.Randomness.reset((long)(byte)1);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    cs362.dominion.Randomness.totalCallsToRandom = 10;

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card24, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card28, cardName29);
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard(list_card17, cardName29);
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard(list_card8, cardName29);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName38);
    cs362.dominion.Card.Type type40 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card41 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, type40);
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card8, type40);
    cs362.dominion.Card.Type type43 = null;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card8, type43);
    cs362.dominion.Card[] card_array45 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card46, card_array45);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card46, cardName48);
    cs362.dominion.Card[] card_array50 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card51, card_array50);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card54 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card51, cardName53);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card56 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card51, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card56, cardName57);
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card46, cardName57);
    cs362.dominion.Card[] card_array60 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card61, card_array60);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card64 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card61, cardName63);
    cs362.dominion.Card[] card_array65 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card66, card_array65);
    cs362.dominion.Card.CardName cardName68 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card69 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card66, cardName68);
    cs362.dominion.Card.CardName cardName70 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card71 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card66, cardName70);
    cs362.dominion.Card.CardName cardName72 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card73 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card71, cardName72);
    java.util.List<cs362.dominion.Card> list_card74 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card61, cardName72);
    cs362.dominion.Card card75 = cs362.dominion.Card.getCard(list_card59, cardName72);
    cs362.dominion.Card.CardName cardName76 = null;
    java.util.List<cs362.dominion.Card> list_card77 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName76);
    cs362.dominion.Card.CardName cardName78 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card79 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName78);
    cs362.dominion.Card card80 = cs362.dominion.Card.getCard(list_card8, cardName78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName16.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName23.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName25.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName27.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName38.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type40.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName48.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName53.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName55.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName57.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName63.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName68.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName70.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName72.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName78.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card[] card_array11 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card12, card_array11);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card15 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName14);
    cs362.dominion.Card[] card_array16 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card17, card_array16);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card17, cardName19);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card17, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card22, cardName23);
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName23);
    cs362.dominion.Card[] card_array26 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card27, card_array26);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card27, cardName29);
    cs362.dominion.Card[] card_array31 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card32, card_array31);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card32, cardName34);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card32, cardName36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card37, cardName38);
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName38);
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard(list_card25, cardName38);
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard(list_card10, cardName38);
    cs362.dominion.Card.CardName cardName43 = null;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card10, cardName43);
    cs362.dominion.Card[] card_array45 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card46, card_array45);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card46, cardName48);
    cs362.dominion.Card[] card_array50 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card51, card_array50);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card54 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card51, cardName53);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card56 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card51, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card56, cardName57);
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card46, cardName57);
    cs362.dominion.Card[] card_array60 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card61, card_array60);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card64 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card61, cardName63);
    cs362.dominion.Card[] card_array65 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card66, card_array65);
    cs362.dominion.Card.CardName cardName68 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card69 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card66, cardName68);
    cs362.dominion.Card.CardName cardName70 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card71 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card66, cardName70);
    cs362.dominion.Card.CardName cardName72 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card73 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card71, cardName72);
    java.util.List<cs362.dominion.Card> list_card74 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card61, cardName72);
    cs362.dominion.Card card75 = cs362.dominion.Card.getCard(list_card59, cardName72);
    cs362.dominion.Card.CardName cardName76 = null;
    java.util.List<cs362.dominion.Card> list_card77 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName76);
    cs362.dominion.Card[] card_array78 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card79 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card79, card_array78);
    cs362.dominion.Card.CardName cardName81 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card82 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card79, cardName81);
    cs362.dominion.Card[] card_array83 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card84 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b85 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card84, card_array83);
    cs362.dominion.Card.CardName cardName86 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card87 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card84, cardName86);
    cs362.dominion.Card.CardName cardName88 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card89 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card84, cardName88);
    cs362.dominion.Card.CardName cardName90 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card91 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card89, cardName90);
    java.util.List<cs362.dominion.Card> list_card92 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card79, cardName90);
    cs362.dominion.Card.CardName cardName93 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card94 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card79, cardName93);
    java.util.List<cs362.dominion.Card> list_card95 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card77, cardName93);
    cs362.dominion.Card card96 = cs362.dominion.Card.getCard(list_card10, cardName93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName14.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName19.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName21.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName23.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName29.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName34.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName36.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName38.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName48.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName53.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName55.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName57.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName63.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName68.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName70.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName72.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName81.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName86.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName88.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    org.junit.Assert.assertTrue("'" + cardName90 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName90.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    org.junit.Assert.assertTrue("'" + cardName93 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName93.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card96);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card24, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card28, cardName29);
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard(list_card17, cardName29);
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard(list_card8, cardName29);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName38);
    cs362.dominion.Card.Type type40 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card41 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, type40);
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card8, type40);
    cs362.dominion.Card[] card_array43 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card44, card_array43);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card47 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card44, cardName46);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card49 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card44, cardName48);
    cs362.dominion.Card.CardName cardName50 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card51 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card44, cardName50);
    cs362.dominion.Card.CardName cardName52 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card53 = cs362.dominion.Card.getCard(list_card51, cardName52);
    cs362.dominion.Card card54 = cs362.dominion.Card.getCard(list_card8, cardName52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName16.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName23.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName25.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName27.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName38.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type40.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName46.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName48.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName50.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName52.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    cs362.dominion.Randomness.reset((long)61);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName24);
    cs362.dominion.Card.Type type26 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, type26);
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type26);
    cs362.dominion.Card.CardName cardName29 = null;
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard(list_card16, cardName29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName24.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type26.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    player2.buyCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = player2.addToDeck(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    player2.playTreasureCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 65);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.buyCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 60);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card[] card_array24 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card25, card_array24);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card28 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card25, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card25, cardName29);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card30, cardName31);
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName31);
    cs362.dominion.Card.Type type34 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, type34);
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type34);
    cs362.dominion.Card.CardName cardName37 = null;
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard(list_card16, cardName37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName27.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName29.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName31.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type34.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card24, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card28, cardName29);
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard(list_card17, cardName29);
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard(list_card8, cardName29);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName38);
    cs362.dominion.Card.Type type40 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card41 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, type40);
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card8, type40);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card43 = cs362.dominion.Randomness.randomMember(list_card42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName16.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName23.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName25.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName27.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName38.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type40.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = player2.addToDeck(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card[] card_array20 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card21, card_array20);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card24 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card21, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card21, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard(list_card14, cardName27);
    cs362.dominion.Card.CardName cardName31 = null;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName31);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card44, cardName45);
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName45);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName48);
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName48);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card57, cardName58);
    cs362.dominion.Card.CardName cardName60 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card61 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName60);
    cs362.dominion.Card.Type type62 = cs362.dominion.Card.Type.ACTION;
    java.util.List<cs362.dominion.Card> list_card63 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card61, type62);
    java.util.List<cs362.dominion.Card> list_card64 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card32, type62);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card65 = cs362.dominion.Randomness.randomMember(list_card32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName23.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName25.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName27.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName43.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName45.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName48.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName56.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName58.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName60.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + cs362.dominion.Card.Type.ACTION + "'", type62.equals(cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 9);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    cs362.dominion.Randomness.reset((long)26);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    cs362.dominion.Randomness.reset((long)'4');

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card.CardName cardName19 = null;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card27, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card[] card_array32 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card33, card_array32);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card33, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName37);
    cs362.dominion.Card[] card_array39 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card40, card_array39);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card43 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card40, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName44);
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName44);
    cs362.dominion.Card.Type type47 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, type47);
    java.util.List<cs362.dominion.Card> list_card49 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card31, type47);
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type47);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card51 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName26.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName28.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName35.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName37.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName42.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName44.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type47.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName16);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card19 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card17, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card19, cardName20);
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard(list_card8, cardName20);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card23 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName7.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName14.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName16.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    java.lang.String str10 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str10.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    cs362.dominion.Randomness.reset((long)16);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.Type type12 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, type12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type12);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard(list_card14, cardName15);
    cs362.dominion.Card[] card_array17 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card18, card_array17);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card18, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName22);
    cs362.dominion.Card[] card_array24 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card25, card_array24);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card28 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card25, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card25, cardName29);
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName29);
    cs362.dominion.Card.Type type32 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, type32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard(list_card33, cardName34);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard(list_card33, cardName36);
    cs362.dominion.Card.Type type38 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card33, type38);
    cs362.dominion.Card[] card_array40 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card41, card_array40);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card44 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card41, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card41, cardName45);
    cs362.dominion.Card.CardName cardName47 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card46, cardName47);
    cs362.dominion.Card.CardName cardName49 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card48, cardName49);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card[] card_array58 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card59, card_array58);
    cs362.dominion.Card.CardName cardName61 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card62 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card59, cardName61);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card64 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card59, cardName63);
    java.util.List<cs362.dominion.Card> list_card65 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName63);
    cs362.dominion.Card.Type type66 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card67 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, type66);
    java.util.List<cs362.dominion.Card> list_card68 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card50, type66);
    java.util.List<cs362.dominion.Card> list_card69 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card39, type66);
    cs362.dominion.Card[] card_array70 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card71 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card71, card_array70);
    cs362.dominion.Card.CardName cardName73 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card74 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card71, cardName73);
    cs362.dominion.Card[] card_array75 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card76 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card76, card_array75);
    cs362.dominion.Card.CardName cardName78 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card79 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card76, cardName78);
    cs362.dominion.Card.CardName cardName80 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card81 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card76, cardName80);
    cs362.dominion.Card.Type type82 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card83 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card76, type82);
    java.util.List<cs362.dominion.Card> list_card84 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card71, type82);
    cs362.dominion.Card.CardName cardName85 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card86 = cs362.dominion.Card.getCard(list_card84, cardName85);
    cs362.dominion.Card card87 = cs362.dominion.Card.getCard(list_card39, cardName85);
    java.util.List<cs362.dominion.Card> list_card88 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName85);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card89 = cs362.dominion.Randomness.randomMember(list_card14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type12.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName15.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName20.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName27.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type32.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName34.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName36.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type38.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName43.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName45.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName47.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName49.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName61.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    org.junit.Assert.assertTrue("'" + type66 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type66.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    org.junit.Assert.assertTrue("'" + cardName73 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName73.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName78.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    org.junit.Assert.assertTrue("'" + cardName80 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName80.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    org.junit.Assert.assertTrue("'" + type82 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type82.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName85.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    cs362.dominion.Randomness.reset((long)10);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card10 = cs362.dominion.Card.getCard(list_card8, cardName9);
    cs362.dominion.Card[] card_array11 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card12, card_array11);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card15 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName16);
    cs362.dominion.Card.Type type18 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card19 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, type18);
    cs362.dominion.Card[] card_array20 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card21, card_array20);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card24 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card21, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card21, cardName25);
    cs362.dominion.Card[] card_array27 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card28, card_array27);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card28, cardName30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card28, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card33, cardName34);
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard(list_card26, cardName34);
    cs362.dominion.Card[] card_array37 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card38, card_array37);
    cs362.dominion.Card.CardName cardName40 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card38, cardName40);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card38, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card38, cardName44);
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName44);
    cs362.dominion.Card card47 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName44);
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName44);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card49 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName7.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName9.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName14.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName16.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type18.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName23.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName25.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName32.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName34.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName40.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName42.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName44.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card19 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card[] card_array11 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card12, card_array11);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card15 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName23);
    cs362.dominion.Card.Type type26 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, type26);
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card10, type26);
    cs362.dominion.Card[] card_array29 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card30, card_array29);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card33 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card30, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card30, cardName34);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card35, cardName36);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName45);
    cs362.dominion.Card[] card_array47 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card48, card_array47);
    cs362.dominion.Card.CardName cardName50 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card51 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card48, cardName50);
    cs362.dominion.Card.CardName cardName52 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card53 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card48, cardName52);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card55 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card53, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card55, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card57, cardName58);
    cs362.dominion.Card card60 = cs362.dominion.Card.getCard(list_card46, cardName58);
    cs362.dominion.Card card61 = cs362.dominion.Card.getCard(list_card37, cardName58);
    java.util.List<cs362.dominion.Card> list_card62 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card28, cardName58);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Cooper;
    cs362.dominion.Card card64 = cs362.dominion.Card.getCard(list_card62, cardName63);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card65 = cs362.dominion.Randomness.randomMember(list_card62);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName14.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type26.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName32.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName34.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName36.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName43.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName45.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName50.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName52.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName54.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName56.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName63.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card.CardName cardName19 = null;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card27, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card[] card_array32 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card33, card_array32);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card33, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName37);
    cs362.dominion.Card[] card_array39 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card40, card_array39);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card43 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card40, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName44);
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName44);
    cs362.dominion.Card.Type type47 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, type47);
    java.util.List<cs362.dominion.Card> list_card49 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card31, type47);
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type47);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName58);
    cs362.dominion.Card card60 = cs362.dominion.Card.getCard(list_card16, cardName58);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card61 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName26.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName28.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName35.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName37.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName42.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName44.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type47.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName58.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.lang.String str8 = player2.toString();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    cs362.dominion.Randomness.totalCallsToRandom = 53;

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    cs362.dominion.Card card3 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    cs362.dominion.Randomness.reset((long)53);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    cs362.dominion.Randomness.reset((long)15);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.playKingdomCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName7.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName20);
    cs362.dominion.Card[] card_array22 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card23, card_array22);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card26 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card23, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card23, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card[] card_array30 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card31, card_array30);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card34 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card31, cardName33);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card31, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card36, cardName37);
    cs362.dominion.Card[] card_array39 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card40, card_array39);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card43 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card40, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName44);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName46);
    cs362.dominion.Card[] card_array48 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card49, card_array48);
    cs362.dominion.Card.CardName cardName51 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card52 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card49, cardName51);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card54 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card49, cardName53);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card56 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card54, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card56, cardName57);
    cs362.dominion.Card.CardName cardName59 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card60 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card58, cardName59);
    cs362.dominion.Card card61 = cs362.dominion.Card.getCard(list_card47, cardName59);
    cs362.dominion.Card card62 = cs362.dominion.Card.getCard(list_card38, cardName59);
    cs362.dominion.Card[] card_array63 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card64, card_array63);
    cs362.dominion.Card.CardName cardName66 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card67 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card64, cardName66);
    cs362.dominion.Card.CardName cardName68 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card69 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card64, cardName68);
    cs362.dominion.Card.Type type70 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card71 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card64, type70);
    java.util.List<cs362.dominion.Card> list_card72 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card38, type70);
    java.util.List<cs362.dominion.Card> list_card73 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, type70);
    java.util.List<cs362.dominion.Card> list_card74 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card14, type70);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card75 = cs362.dominion.Randomness.randomMember(list_card74);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName25.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName27.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName33.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName35.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName37.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName42.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName44.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName46.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName51.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName53.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName55.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName57.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName66.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName68.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    org.junit.Assert.assertTrue("'" + type70 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type70.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    cs362.dominion.Randomness.reset((long)93);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    cs362.dominion.Randomness.totalCallsToRandom = 23;

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    cs362.dominion.Randomness.reset((long)8);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    java.util.List<cs362.dominion.Card> list_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card8 = cs362.dominion.Card.getCard(list_card0, cardName6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    java.util.List<cs362.dominion.Card> list_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card[] card_array6 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card7, card_array6);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card10 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card7, cardName9);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card12 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card7, cardName11);
    cs362.dominion.Card.Type type13 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card7, type13);
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, type13);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card17 = cs362.dominion.Card.getCard(list_card15, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    cs362.dominion.Card[] card_array25 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card26, card_array25);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card29 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card26, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card26, cardName30);
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName30);
    cs362.dominion.Card.Type type33 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, type33);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard(list_card34, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard(list_card34, cardName37);
    cs362.dominion.Card.Type type39 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card34, type39);
    cs362.dominion.Card[] card_array41 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card42, card_array41);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card45 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card42, cardName44);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card42, cardName46);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card49 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card47, cardName48);
    cs362.dominion.Card.CardName cardName50 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card51 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card49, cardName50);
    cs362.dominion.Card[] card_array52 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card53, card_array52);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card56 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card53, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card53, cardName57);
    cs362.dominion.Card[] card_array59 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card60, card_array59);
    cs362.dominion.Card.CardName cardName62 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card63 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card60, cardName62);
    cs362.dominion.Card.CardName cardName64 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card65 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card60, cardName64);
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card53, cardName64);
    cs362.dominion.Card.Type type67 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card68 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card53, type67);
    java.util.List<cs362.dominion.Card> list_card69 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card51, type67);
    java.util.List<cs362.dominion.Card> list_card70 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card40, type67);
    cs362.dominion.Card[] card_array71 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card72 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card72, card_array71);
    cs362.dominion.Card.CardName cardName74 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card75 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card72, cardName74);
    cs362.dominion.Card[] card_array76 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card77 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card77, card_array76);
    cs362.dominion.Card.CardName cardName79 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card80 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card77, cardName79);
    cs362.dominion.Card.CardName cardName81 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card82 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card77, cardName81);
    cs362.dominion.Card.Type type83 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card84 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card77, type83);
    java.util.List<cs362.dominion.Card> list_card85 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card72, type83);
    cs362.dominion.Card.CardName cardName86 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card87 = cs362.dominion.Card.getCard(list_card85, cardName86);
    cs362.dominion.Card card88 = cs362.dominion.Card.getCard(list_card40, cardName86);
    java.util.List<cs362.dominion.Card> list_card89 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName86);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card90 = cs362.dominion.Card.getCard(list_card0, cardName86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName11.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type13.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName16.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName28.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type33.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName35.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName37.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type39.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName44.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName46.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName48.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName50.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName55.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName57.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName62.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName64.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    org.junit.Assert.assertTrue("'" + type67 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type67.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName74.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName79.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName81.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    org.junit.Assert.assertTrue("'" + type83 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type83.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName86.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    cs362.dominion.Randomness.reset((long)23);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName33);
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName33);
    cs362.dominion.Card.Type type36 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, type36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card39 = cs362.dominion.Card.getCard(list_card37, cardName38);
    cs362.dominion.Card.CardName cardName40 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard(list_card37, cardName40);
    cs362.dominion.Card.Type type42 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card37, type42);
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type42);
    cs362.dominion.Card.CardName cardName45 = null;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card16, cardName45);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card47 = cs362.dominion.Randomness.randomMember(list_card46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName26.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type36.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName38.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName40.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type42.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card[] card_array11 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card12, card_array11);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card15 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName14);
    cs362.dominion.Card[] card_array16 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card17, card_array16);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card17, cardName19);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card17, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card22, cardName23);
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName23);
    cs362.dominion.Card[] card_array26 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card27, card_array26);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card27, cardName29);
    cs362.dominion.Card[] card_array31 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card32, card_array31);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card32, cardName34);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card32, cardName36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card37, cardName38);
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName38);
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard(list_card25, cardName38);
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard(list_card10, cardName38);
    cs362.dominion.Card.CardName cardName43 = null;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card10, cardName43);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card45 = cs362.dominion.Randomness.randomMember(list_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName14.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName19.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName21.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName23.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName29.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName34.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName36.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName38.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    cs362.dominion.Randomness.reset((long)(short)-1);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 9);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card.CardName cardName19 = null;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card27, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card[] card_array32 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card33, card_array32);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card33, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName37);
    cs362.dominion.Card[] card_array39 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card40, card_array39);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card43 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card40, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card40, cardName44);
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, cardName44);
    cs362.dominion.Card.Type type47 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card33, type47);
    java.util.List<cs362.dominion.Card> list_card49 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card31, type47);
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type47);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card51 = cs362.dominion.Randomness.randomMember(list_card50);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName26.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName28.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName35.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName37.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName42.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName44.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type47.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Silver;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card9 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName7.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    int i1 = cs362.dominion.Randomness.nextRandomInt(65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 60);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = player2.addToDeck(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card9 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card7, cardName8);
    cs362.dominion.Card[] card_array10 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card11, card_array10);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card14 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card11, cardName13);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card11, cardName15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card11, cardName17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card25, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card27, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard(list_card18, cardName30);
    cs362.dominion.Card card33 = cs362.dominion.Card.getCard(list_card9, cardName30);
    cs362.dominion.Card[] card_array34 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card35, card_array34);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card35, cardName37);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card35, cardName39);
    cs362.dominion.Card.Type type41 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card35, type41);
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card9, type41);
    cs362.dominion.Card.Type type44 = null;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card9, type44);
    cs362.dominion.Card[] card_array46 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card47, card_array46);
    cs362.dominion.Card.CardName cardName49 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card50 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card47, cardName49);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card57, cardName58);
    java.util.List<cs362.dominion.Card> list_card60 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card47, cardName58);
    cs362.dominion.Card card61 = cs362.dominion.Card.getCard(list_card45, cardName58);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card62 = cs362.dominion.Card.filterName(iterable_card0, cardName58);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName6.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName8.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName13.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName15.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName17.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName24.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName26.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName28.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName37.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName39.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type41.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName49.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName56.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName58.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.playKingdomCard();
    java.lang.String str4 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }

    cs362.dominion.Randomness.reset((long)(short)10);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card[] card_array20 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card21, card_array20);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card24 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card21, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card21, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard(list_card14, cardName27);
    cs362.dominion.Card.CardName cardName31 = null;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Duchy;
    cs362.dominion.Card card34 = cs362.dominion.Card.getCard(list_card14, cardName33);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card35 = cs362.dominion.Randomness.randomMember(list_card14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName23.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName25.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName27.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Duchy + "'", cardName33.equals(cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.Type type12 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, type12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName22);
    cs362.dominion.Card[] card_array24 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card25, card_array24);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card28 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card25, cardName27);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card30 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card25, cardName29);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card30, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName33);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card34, cardName35);
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard(list_card23, cardName35);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card44, cardName45);
    cs362.dominion.Card.CardName cardName47 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card46, cardName47);
    cs362.dominion.Card[] card_array49 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card50, card_array49);
    cs362.dominion.Card.CardName cardName52 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card53 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card50, cardName52);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card55 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card50, cardName54);
    cs362.dominion.Card[] card_array56 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card57, card_array56);
    cs362.dominion.Card.CardName cardName59 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card60 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card57, cardName59);
    cs362.dominion.Card.CardName cardName61 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card62 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card57, cardName61);
    java.util.List<cs362.dominion.Card> list_card63 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card50, cardName61);
    cs362.dominion.Card.Type type64 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card65 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card50, type64);
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card48, type64);
    java.util.List<cs362.dominion.Card> list_card67 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card23, type64);
    java.util.List<cs362.dominion.Card> list_card68 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type64);
    cs362.dominion.Card.CardName cardName69 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card70 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName69);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card71 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type12.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName22.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName27.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName29.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName31.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName33.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName43.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName45.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName47.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName52.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName54.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName59.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName61.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type64.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName69.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card13, cardName14);
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard(list_card6, cardName14);
    cs362.dominion.Card[] card_array17 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card18, card_array17);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card18, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName24);
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName24);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card27 = cs362.dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName12.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName14.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName20.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName24.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Silver;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName16);
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card6, cardName16);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card6, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName33);
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName33);
    cs362.dominion.Card.Type type36 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, type36);
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card6, type36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName16.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName19.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName26.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type36.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card15 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str9 = player2.toString();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str9.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card[] card_array16 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card17, card_array16);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card17, cardName19);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card17, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card22, cardName23);
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard(list_card15, cardName23);
    cs362.dominion.Card[] card_array26 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card27, card_array26);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card27, cardName29);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName33);
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName33);
    cs362.dominion.Card[] card_array36 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card37, card_array36);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card40 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card37, cardName39);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card37, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card42, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card44, cardName45);
    cs362.dominion.Card card47 = cs362.dominion.Card.getCard(list_card15, cardName45);
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName45);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card49 = cs362.dominion.Randomness.randomMember(list_card48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName14.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName19.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName21.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName23.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName29.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName31.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName33.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName39.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName41.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName43.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName45.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    java.lang.String str8 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }

    cs362.dominion.Randomness.reset((long)1);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    player2.playTreasureCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }

    cs362.dominion.Randomness.totalCallsToRandom = 9;

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card[] card_array20 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card21, card_array20);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card24 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card21, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card21, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard(list_card14, cardName27);
    cs362.dominion.Card.CardName cardName31 = null;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName31);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card44, cardName45);
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName45);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName48);
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName48);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card57, cardName58);
    cs362.dominion.Card.CardName cardName60 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card61 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName60);
    cs362.dominion.Card.Type type62 = cs362.dominion.Card.Type.ACTION;
    java.util.List<cs362.dominion.Card> list_card63 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card61, type62);
    java.util.List<cs362.dominion.Card> list_card64 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card50, type62);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card65 = cs362.dominion.Randomness.randomMember(list_card50);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName23.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName25.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName27.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName43.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName45.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName48.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName56.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName58.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName60.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + cs362.dominion.Card.Type.ACTION + "'", type62.equals(cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card12 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card10, cardName11);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Adventurer;
    cs362.dominion.Card card14 = cs362.dominion.Card.getCard(list_card10, cardName13);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName20);
    cs362.dominion.Card[] card_array22 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card23, card_array22);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card26 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card23, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card23, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card.Type type30 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, type30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card33 = cs362.dominion.Card.getCard(list_card31, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard(list_card31, cardName34);
    cs362.dominion.Card.Type type36 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card31, type36);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card44, cardName45);
    cs362.dominion.Card.CardName cardName47 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card46, cardName47);
    cs362.dominion.Card[] card_array49 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card50, card_array49);
    cs362.dominion.Card.CardName cardName52 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card53 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card50, cardName52);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card55 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card50, cardName54);
    cs362.dominion.Card[] card_array56 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card57, card_array56);
    cs362.dominion.Card.CardName cardName59 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card60 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card57, cardName59);
    cs362.dominion.Card.CardName cardName61 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card62 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card57, cardName61);
    java.util.List<cs362.dominion.Card> list_card63 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card50, cardName61);
    cs362.dominion.Card.Type type64 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card65 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card50, type64);
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card48, type64);
    java.util.List<cs362.dominion.Card> list_card67 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card37, type64);
    java.util.List<cs362.dominion.Card> list_card68 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card10, type64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName11.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Adventurer + "'", cardName13.equals(cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName25.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName27.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type30.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName32.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName34.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type36.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName43.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName45.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName47.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName52.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName54.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName59.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName61.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type64.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card12 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card10, cardName11);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card12, cardName13);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card15 = cs362.dominion.Randomness.randomMember(list_card12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName11.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName13.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    player2.buyCard();
    java.lang.String str10 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str10.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    cs362.dominion.Card card4 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Silver;
    cs362.dominion.Card card12 = cs362.dominion.Card.getCard(list_card8, cardName11);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card13 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName11.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    java.lang.String str4 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }

    cs362.dominion.Randomness.totalCallsToRandom = '#';

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str9 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str9.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.playKingdomCard();
    java.lang.String str4 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    java.lang.String str7 = player2.toString();
    player2.playKingdomCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.lang.String str8 = player2.toString();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }

    java.lang.Iterable<cs362.dominion.Card> iterable_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    cs362.dominion.Card[] card_array8 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card9, card_array8);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card12 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card9, cardName11);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card9, cardName13);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName15);
    cs362.dominion.Card card17 = cs362.dominion.Card.getCard(list_card7, cardName15);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName25);
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card7, cardName25);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName33);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card34, cardName35);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card38 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card36, cardName37);
    cs362.dominion.Card card39 = cs362.dominion.Card.getCard(list_card7, cardName37);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName(iterable_card0, cardName37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName6.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName11.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName13.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName15.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName25.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName33.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName35.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName37.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    player2.buyCard();
    java.lang.String str10 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str10.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playTreasureCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    java.lang.String str5 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName15);
    cs362.dominion.Card[] card_array17 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card18, card_array17);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card18, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card23, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card25, cardName26);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card39 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName38);
    cs362.dominion.Card.CardName cardName40 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card41 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card39, cardName40);
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName40);
    cs362.dominion.Card[] card_array43 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card44, card_array43);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card47 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card44, cardName46);
    cs362.dominion.Card[] card_array48 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card49, card_array48);
    cs362.dominion.Card.CardName cardName51 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card52 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card49, cardName51);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card54 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card49, cardName53);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card56 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card54, cardName55);
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card44, cardName55);
    cs362.dominion.Card card58 = cs362.dominion.Card.getCard(list_card42, cardName55);
    cs362.dominion.Card card59 = cs362.dominion.Card.getCard(list_card27, cardName55);
    cs362.dominion.Card card60 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName55);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card61 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName15.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName20.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName22.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName24.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName26.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName38.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName40.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName46.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName51.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName53.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName55.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }

    cs362.dominion.Randomness.totalCallsToRandom = 93;

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName16);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card19 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card17, cardName18);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card21 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card19, cardName20);
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard(list_card8, cardName20);
    cs362.dominion.Card[] card_array23 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card24, card_array23);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card27 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card24, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card24, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card31, cardName32);
    cs362.dominion.Card[] card_array34 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card35, card_array34);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card35, cardName37);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card35, cardName39);
    cs362.dominion.Card[] card_array41 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card42, card_array41);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card45 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card42, cardName44);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card42, cardName46);
    java.util.List<cs362.dominion.Card> list_card48 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card35, cardName46);
    cs362.dominion.Card.Type type49 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card35, type49);
    java.util.List<cs362.dominion.Card> list_card51 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card33, type49);
    java.util.List<cs362.dominion.Card> list_card52 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card8, type49);
    cs362.dominion.Card[] card_array53 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card54, card_array53);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card57 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card54, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card54, cardName58);
    cs362.dominion.Card.CardName cardName60 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card61 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName60);
    cs362.dominion.Card[] card_array62 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card63, card_array62);
    cs362.dominion.Card.CardName cardName65 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card66 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card63, cardName65);
    cs362.dominion.Card.CardName cardName67 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card68 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card63, cardName67);
    cs362.dominion.Card[] card_array69 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card70 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card70, card_array69);
    cs362.dominion.Card.CardName cardName72 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card73 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card70, cardName72);
    cs362.dominion.Card.CardName cardName74 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card75 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card70, cardName74);
    java.util.List<cs362.dominion.Card> list_card76 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card63, cardName74);
    cs362.dominion.Card.Type type77 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card78 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card63, type77);
    cs362.dominion.Card.CardName cardName79 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card80 = cs362.dominion.Card.getCard(list_card78, cardName79);
    cs362.dominion.Card.CardName cardName81 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card82 = cs362.dominion.Card.getCard(list_card78, cardName81);
    cs362.dominion.Card.Type type83 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card84 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card78, type83);
    java.util.List<cs362.dominion.Card> list_card85 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card61, type83);
    java.util.List<cs362.dominion.Card> list_card86 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card52, type83);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card87 = cs362.dominion.Randomness.randomMember(list_card52);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName7.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName14.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName16.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName26.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName28.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName30.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName32.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName37.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName39.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName44.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName46.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type49.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName56.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName58.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName60.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName65.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName67.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName72.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card73);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName74.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    org.junit.Assert.assertTrue("'" + type77 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type77.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName79.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName81.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card82);
    org.junit.Assert.assertTrue("'" + type83 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type83.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = player2.addToDeck(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }

    cs362.dominion.Randomness.reset((long)(short)100);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName15);
    cs362.dominion.Card.Type type17 = null;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type17);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card19 = cs362.dominion.Randomness.randomMember(list_card18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName15.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card25, cardName26);
    cs362.dominion.Card card28 = cs362.dominion.Card.getCard(list_card16, cardName26);
    cs362.dominion.Card[] card_array29 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card30, card_array29);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card33 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card30, cardName32);
    cs362.dominion.Card[] card_array34 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card35, card_array34);
    cs362.dominion.Card.CardName cardName37 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card35, cardName37);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card35, cardName39);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card40, cardName41);
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card30, cardName41);
    cs362.dominion.Card.Type type44 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card30, type44);
    cs362.dominion.Card.Type type46 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card45, type46);
    cs362.dominion.Card.CardName cardName48 = null;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard(list_card45, cardName48);
    cs362.dominion.Card[] card_array50 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card51, card_array50);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card54 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card51, cardName53);
    cs362.dominion.Card.CardName cardName55 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card56 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card51, cardName55);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card58 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card56, cardName57);
    cs362.dominion.Card.CardName cardName59 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card60 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card58, cardName59);
    cs362.dominion.Card[] card_array61 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card62 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card62, card_array61);
    cs362.dominion.Card.CardName cardName64 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card65 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card62, cardName64);
    cs362.dominion.Card.CardName cardName66 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card67 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card62, cardName66);
    cs362.dominion.Card[] card_array68 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card69 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card69, card_array68);
    cs362.dominion.Card.CardName cardName71 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card72 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card69, cardName71);
    cs362.dominion.Card.CardName cardName73 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card74 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card69, cardName73);
    java.util.List<cs362.dominion.Card> list_card75 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card62, cardName73);
    cs362.dominion.Card.Type type76 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card77 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card62, type76);
    java.util.List<cs362.dominion.Card> list_card78 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card60, type76);
    java.util.List<cs362.dominion.Card> list_card79 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card45, type76);
    java.util.List<cs362.dominion.Card> list_card80 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName24.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName26.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName32.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName37.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName39.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName41.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type44.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type46.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName53.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName55.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName57.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName59.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName64.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName66.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName71.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    org.junit.Assert.assertTrue("'" + cardName73 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName73.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + type76 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type76.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playKingdomCard();
    player2.buyCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = player2.addToDeck(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.buyCard();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }

    cs362.dominion.Randomness.totalCallsToRandom = 3;

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }

    java.util.List<cs362.dominion.Card> list_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    cs362.dominion.Card[] card_array8 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card9, card_array8);
    cs362.dominion.Card.CardName cardName11 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card12 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card9, cardName11);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card9, cardName13);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName15);
    cs362.dominion.Card card17 = cs362.dominion.Card.getCard(list_card7, cardName15);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    cs362.dominion.Card[] card_array25 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card26, card_array25);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card29 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card26, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card26, cardName30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card31, cardName32);
    cs362.dominion.Card card34 = cs362.dominion.Card.getCard(list_card24, cardName32);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard(list_card24, cardName35);
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard(list_card7, cardName35);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard(list_card0, cardName35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName6.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName11.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName13.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName15.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName23.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName28.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName30.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName32.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName35.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playTreasureCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card13, cardName14);
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard(list_card6, cardName14);
    cs362.dominion.Card[] card_array17 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card18, card_array17);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card18, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName24);
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName24);
    cs362.dominion.Card[] card_array27 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card28, card_array27);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card28, cardName30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card28, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card33, cardName34);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card37 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card35, cardName36);
    cs362.dominion.Card card38 = cs362.dominion.Card.getCard(list_card6, cardName36);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Gardens;
    java.util.List<cs362.dominion.Card> list_card40 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName39);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card41 = cs362.dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName12.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName14.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName20.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName24.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName32.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName34.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Gardens + "'", cardName39.equals(cs362.dominion.Card.CardName.Gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card25, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card27, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card.Type type32 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card29, type32);
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type32);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card35 = cs362.dominion.Randomness.randomMember(list_card34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName24.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName26.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName28.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type32.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card25, cardName26);
    cs362.dominion.Card[] card_array28 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card29, card_array28);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card32 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card29, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName33);
    cs362.dominion.Card.CardName cardName35 = cs362.dominion.Card.CardName.Silver;
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card29, cardName35);
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard(list_card25, cardName35);
    cs362.dominion.Card.CardName cardName38 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card39 = cs362.dominion.Card.getCard(list_card25, cardName38);
    cs362.dominion.Card card40 = cs362.dominion.Card.getCard(list_card16, cardName38);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card41 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName24.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName26.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName31.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName35.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName38.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard(list_card16, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card.Type type21 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type21);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card23 = cs362.dominion.Randomness.randomMember(list_card22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName17.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type21.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = player2.addToDeck(card7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    player2.buyCard();
    java.lang.String str10 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str10.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card.CardName cardName19 = null;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard(list_card16, cardName19);
    cs362.dominion.Card[] card_array21 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card22, card_array21);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card22, cardName24);
    cs362.dominion.Card.CardName cardName26 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card22, cardName26);
    cs362.dominion.Card.CardName cardName28 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card27, cardName28);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card31 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card29, cardName30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card31, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Adventurer;
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard(list_card31, cardName34);
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard(list_card16, cardName34);
    cs362.dominion.Card[] card_array37 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card38, card_array37);
    cs362.dominion.Card.CardName cardName40 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card38, cardName40);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card38, cardName42);
    cs362.dominion.Card.CardName cardName44 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card43, cardName44);
    cs362.dominion.Card[] card_array46 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card47, card_array46);
    cs362.dominion.Card.CardName cardName49 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card50 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card47, cardName49);
    cs362.dominion.Card.CardName cardName51 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card52 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card47, cardName51);
    cs362.dominion.Card.CardName cardName53 = cs362.dominion.Card.CardName.Silver;
    java.util.List<cs362.dominion.Card> list_card54 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card47, cardName53);
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard(list_card43, cardName53);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card57 = cs362.dominion.Card.getCard(list_card43, cardName56);
    cs362.dominion.Card card58 = cs362.dominion.Card.getCard(list_card16, cardName56);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card59 = cs362.dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName24.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName26.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName28.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Adventurer + "'", cardName34.equals(cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName40.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName42.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName44.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName49.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName51.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName53.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName56.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    player2.buyCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = player2.addToDeck(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.Type type17 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card16, type17);
    cs362.dominion.Card[] card_array19 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card20, card_array19);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card23 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card20, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card20, cardName24);
    cs362.dominion.Card[] card_array26 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card27, card_array26);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card27, cardName29);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName33);
    cs362.dominion.Card card35 = cs362.dominion.Card.getCard(list_card25, cardName33);
    cs362.dominion.Card[] card_array36 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card37, card_array36);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card40 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card37, cardName39);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card37, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card37, cardName43);
    java.util.List<cs362.dominion.Card> list_card45 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card25, cardName43);
    cs362.dominion.Card[] card_array46 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card47, card_array46);
    cs362.dominion.Card.CardName cardName49 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card50 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card47, cardName49);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card57, cardName58);
    java.util.List<cs362.dominion.Card> list_card60 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card47, cardName58);
    cs362.dominion.Card.Type type61 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card62 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card47, type61);
    cs362.dominion.Card.Type type63 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card64 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card62, type63);
    java.util.List<cs362.dominion.Card> list_card65 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card25, type63);
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card18, type63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type17.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName22.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName24.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName29.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName31.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName33.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName39.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName41.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName43.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName49.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName56.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName58.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type61.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + type63 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type63.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card[] card_array15 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card16, card_array15);
    cs362.dominion.Card.CardName cardName18 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card19 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card16, cardName18);
    cs362.dominion.Card[] card_array20 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card21, card_array20);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card24 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card21, cardName23);
    cs362.dominion.Card.CardName cardName25 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card26 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card21, cardName25);
    cs362.dominion.Card.CardName cardName27 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card26, cardName27);
    java.util.List<cs362.dominion.Card> list_card29 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card16, cardName27);
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard(list_card14, cardName27);
    cs362.dominion.Card.CardName cardName31 = null;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card14, cardName31);
    cs362.dominion.Card[] card_array33 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card34, card_array33);
    cs362.dominion.Card.CardName cardName36 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName36);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName43);
    cs362.dominion.Card.CardName cardName45 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card46 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card44, cardName45);
    java.util.List<cs362.dominion.Card> list_card47 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card34, cardName45);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card49 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card34, cardName48);
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName48);
    cs362.dominion.Card[] card_array51 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card52, card_array51);
    cs362.dominion.Card.CardName cardName54 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card55 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card52, cardName54);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card57 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName56);
    cs362.dominion.Card[] card_array58 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card59, card_array58);
    cs362.dominion.Card.CardName cardName61 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card62 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card59, cardName61);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card64 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card59, cardName63);
    java.util.List<cs362.dominion.Card> list_card65 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card52, cardName63);
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card32, cardName63);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card67 = cs362.dominion.Randomness.randomMember(list_card32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName18.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName23.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName25.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName27.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName36.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName43.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName45.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName48.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName54.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName61.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card10 = cs362.dominion.Card.getCard(list_card8, cardName9);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card11 = cs362.dominion.Randomness.randomMember(list_card8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName7.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName9.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    java.lang.String str7 = player2.toString();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card6, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card10 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName9);
    cs362.dominion.Card[] card_array11 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card12, card_array11);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card15 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card12, cardName14);
    cs362.dominion.Card.CardName cardName16 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card17 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName16);
    cs362.dominion.Card[] card_array18 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card19, card_array18);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card22 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card19, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card19, cardName23);
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, cardName23);
    cs362.dominion.Card.Type type26 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card12, type26);
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card10, type26);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card29 = cs362.dominion.Randomness.randomMember(list_card28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName7.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName9.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName14.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName21.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type26.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str8.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = player2.addToDeck(card8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.playKingdomCard();
    player2.playKingdomCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.CardName cardName7 = cs362.dominion.Card.CardName.Silver;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName7);
    cs362.dominion.Card.CardName cardName9 = cs362.dominion.Card.CardName.Cutpurse;
    cs362.dominion.Card card10 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName9);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card11 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + cs362.dominion.Card.CardName.Silver + "'", cardName7.equals(cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + cs362.dominion.Card.CardName.Cutpurse + "'", cardName9.equals(cs362.dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    cs362.dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card[] card_array5 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card6, card_array5);
    cs362.dominion.Card.CardName cardName8 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card9 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card6, cardName8);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card11 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card6, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card11, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Minion;
    cs362.dominion.Card card16 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName15);
    cs362.dominion.Card.Type type17 = null;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type17);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card19 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName8.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName10.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName12.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName15.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = player2.addToDeck(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.Type type7 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card.CardName cardName14 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card15 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName14);
    cs362.dominion.Card[] card_array16 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card17, card_array16);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card20 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card17, cardName19);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card17, cardName21);
    cs362.dominion.Card.CardName cardName23 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card24 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card22, cardName23);
    cs362.dominion.Card card25 = cs362.dominion.Card.getCard(list_card15, cardName23);
    cs362.dominion.Card[] card_array26 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card27, card_array26);
    cs362.dominion.Card.CardName cardName29 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card30 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card27, cardName29);
    cs362.dominion.Card.CardName cardName31 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card32 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName31);
    cs362.dominion.Card.CardName cardName33 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card34 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card27, cardName33);
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card15, cardName33);
    cs362.dominion.Card card36 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName33);
    cs362.dominion.Card[] card_array37 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card38, card_array37);
    cs362.dominion.Card.CardName cardName40 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card41 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card38, cardName40);
    cs362.dominion.Card.CardName cardName42 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card43 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card38, cardName42);
    cs362.dominion.Card[] card_array44 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card45, card_array44);
    cs362.dominion.Card.CardName cardName47 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card48 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card45, cardName47);
    cs362.dominion.Card.CardName cardName49 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card50 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card45, cardName49);
    cs362.dominion.Card.CardName cardName51 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card52 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card50, cardName51);
    cs362.dominion.Card card53 = cs362.dominion.Card.getCard(list_card43, cardName51);
    cs362.dominion.Card[] card_array54 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card55, card_array54);
    cs362.dominion.Card.CardName cardName57 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card58 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card55, cardName57);
    cs362.dominion.Card.CardName cardName59 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card60 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card55, cardName59);
    cs362.dominion.Card.CardName cardName61 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card62 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card55, cardName61);
    java.util.List<cs362.dominion.Card> list_card63 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card43, cardName61);
    cs362.dominion.Card[] card_array64 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card65 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card65, card_array64);
    cs362.dominion.Card.CardName cardName67 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card68 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card65, cardName67);
    cs362.dominion.Card.CardName cardName69 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card70 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card65, cardName69);
    cs362.dominion.Card.CardName cardName71 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card72 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card70, cardName71);
    cs362.dominion.Card.CardName cardName73 = cs362.dominion.Card.CardName.Mine;
    java.util.List<cs362.dominion.Card> list_card74 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card72, cardName73);
    cs362.dominion.Card card75 = cs362.dominion.Card.getCard(list_card43, cardName73);
    cs362.dominion.Card.CardName cardName76 = cs362.dominion.Card.CardName.Gardens;
    java.util.List<cs362.dominion.Card> list_card77 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card43, cardName76);
    cs362.dominion.Card card78 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName76);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card79 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type7.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName14.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName19.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName21.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName23.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName29.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName31.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName33.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName40.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName42.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName47.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName49.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName51.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName57.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName61.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName67.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName69.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName71.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    org.junit.Assert.assertTrue("'" + cardName73 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName73.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + cs362.dominion.Card.CardName.Gardens + "'", cardName76.equals(cs362.dominion.Card.CardName.Gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card[] card_array7 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card8, card_array7);
    cs362.dominion.Card.CardName cardName10 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card11 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card8, cardName10);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card13 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card8, cardName12);
    java.util.List<cs362.dominion.Card> list_card14 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName12);
    cs362.dominion.Card.Type type15 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type15);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Minion;
    java.util.List<cs362.dominion.Card> list_card18 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName17);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card19 = cs362.dominion.Randomness.randomMember((java.util.List<cs362.dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName10.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type15.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Minion + "'", cardName17.equals(cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }

    cs362.dominion.Card[] card_array0 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card1, card_array0);
    cs362.dominion.Card.CardName cardName3 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card4 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card1, cardName3);
    cs362.dominion.Card.CardName cardName5 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card6 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, cardName5);
    cs362.dominion.Card.Type type7 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card8 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card1, type7);
    cs362.dominion.Card[] card_array9 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card10, card_array9);
    cs362.dominion.Card.CardName cardName12 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card13 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card10, cardName12);
    cs362.dominion.Card[] card_array14 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card15, card_array14);
    cs362.dominion.Card.CardName cardName17 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card18 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card15, cardName17);
    cs362.dominion.Card.CardName cardName19 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card20 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card15, cardName19);
    cs362.dominion.Card.CardName cardName21 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card22 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card20, cardName21);
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, cardName21);
    cs362.dominion.Card.Type type24 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card10, type24);
    cs362.dominion.Card.Type type26 = cs362.dominion.Card.Type.TREASURE;
    java.util.List<cs362.dominion.Card> list_card27 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card25, type26);
    java.util.List<cs362.dominion.Card> list_card28 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)list_card8, type26);
    cs362.dominion.Card[] card_array29 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card30, card_array29);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card33 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card30, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card30, cardName34);
    cs362.dominion.Card[] card_array36 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card37, card_array36);
    cs362.dominion.Card.CardName cardName39 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card40 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card37, cardName39);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card42 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card37, cardName41);
    cs362.dominion.Card.CardName cardName43 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card44 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card42, cardName43);
    cs362.dominion.Card card45 = cs362.dominion.Card.getCard(list_card35, cardName43);
    cs362.dominion.Card[] card_array46 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card47, card_array46);
    cs362.dominion.Card.CardName cardName49 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card50 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card47, cardName49);
    cs362.dominion.Card.CardName cardName51 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card52 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card47, cardName51);
    cs362.dominion.Card[] card_array53 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card54, card_array53);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card57 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card54, cardName56);
    cs362.dominion.Card.CardName cardName58 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card59 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card54, cardName58);
    cs362.dominion.Card.CardName cardName60 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card61 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card59, cardName60);
    cs362.dominion.Card card62 = cs362.dominion.Card.getCard(list_card52, cardName60);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Province;
    cs362.dominion.Card card64 = cs362.dominion.Card.getCard(list_card52, cardName63);
    cs362.dominion.Card card65 = cs362.dominion.Card.getCard(list_card35, cardName63);
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card8, cardName63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName3.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName5.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type7.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName12.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName17.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName19.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName21.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type24.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + cs362.dominion.Card.Type.TREASURE + "'", type26.equals(cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName32.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName34.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName39.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName41.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName43.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName49.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName51.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName56.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName58.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName60.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Province + "'", cardName63.equals(cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    player2.playKingdomCard();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.initializePlayerTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    player2.playKingdomCard();
    player2.playTreasureCard();
    java.lang.String str9 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str6.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str9.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.endTurn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str7.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str5 = player2.toString();
    cs362.dominion.Card card6 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str3.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str5.equals(" --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.buyCard();
    cs362.dominion.Card card9 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }

    java.util.List<cs362.dominion.Card> list_card0 = null;
    cs362.dominion.Card[] card_array1 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card2, card_array1);
    cs362.dominion.Card.CardName cardName4 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card5 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName4);
    cs362.dominion.Card.CardName cardName6 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card7 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, cardName6);
    cs362.dominion.Card.Type type8 = cs362.dominion.Card.Type.VICTORY;
    java.util.List<cs362.dominion.Card> list_card9 = cs362.dominion.Card.filter((java.lang.Iterable<cs362.dominion.Card>)arraylist_card2, type8);
    cs362.dominion.Card[] card_array10 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card11, card_array10);
    cs362.dominion.Card.CardName cardName13 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card14 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card11, cardName13);
    cs362.dominion.Card.CardName cardName15 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card16 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card11, cardName15);
    cs362.dominion.Card[] card_array17 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card18, card_array17);
    cs362.dominion.Card.CardName cardName20 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card21 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card18, cardName20);
    cs362.dominion.Card.CardName cardName22 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card23 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card18, cardName22);
    cs362.dominion.Card.CardName cardName24 = cs362.dominion.Card.CardName.Cooper;
    java.util.List<cs362.dominion.Card> list_card25 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card23, cardName24);
    cs362.dominion.Card card26 = cs362.dominion.Card.getCard(list_card16, cardName24);
    cs362.dominion.Card[] card_array27 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card28, card_array27);
    cs362.dominion.Card.CardName cardName30 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card31 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card28, cardName30);
    cs362.dominion.Card.CardName cardName32 = cs362.dominion.Card.CardName.Gold;
    java.util.List<cs362.dominion.Card> list_card33 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card28, cardName32);
    cs362.dominion.Card.CardName cardName34 = cs362.dominion.Card.CardName.Feast;
    java.util.List<cs362.dominion.Card> list_card35 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card28, cardName34);
    java.util.List<cs362.dominion.Card> list_card36 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card16, cardName34);
    cs362.dominion.Card card37 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName34);
    cs362.dominion.Card[] card_array38 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card39, card_array38);
    cs362.dominion.Card.CardName cardName41 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card42 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card39, cardName41);
    cs362.dominion.Card[] card_array43 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card44, card_array43);
    cs362.dominion.Card.CardName cardName46 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card47 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card44, cardName46);
    cs362.dominion.Card.CardName cardName48 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card49 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card44, cardName48);
    cs362.dominion.Card.CardName cardName50 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card51 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card49, cardName50);
    java.util.List<cs362.dominion.Card> list_card52 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card39, cardName50);
    cs362.dominion.Card[] card_array53 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card54, card_array53);
    cs362.dominion.Card.CardName cardName56 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card57 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card54, cardName56);
    cs362.dominion.Card[] card_array58 = new cs362.dominion.Card[] {  };
    java.util.ArrayList<cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Card>)arraylist_card59, card_array58);
    cs362.dominion.Card.CardName cardName61 = cs362.dominion.Card.CardName.Mine;
    cs362.dominion.Card card62 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card59, cardName61);
    cs362.dominion.Card.CardName cardName63 = cs362.dominion.Card.CardName.Village;
    java.util.List<cs362.dominion.Card> list_card64 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card59, cardName63);
    cs362.dominion.Card.CardName cardName65 = cs362.dominion.Card.CardName.Baron;
    java.util.List<cs362.dominion.Card> list_card66 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)list_card64, cardName65);
    java.util.List<cs362.dominion.Card> list_card67 = cs362.dominion.Card.filterName((java.lang.Iterable<cs362.dominion.Card>)arraylist_card54, cardName65);
    cs362.dominion.Card card68 = cs362.dominion.Card.getCard(list_card52, cardName65);
    cs362.dominion.Card card69 = cs362.dominion.Card.getCard((java.util.List<cs362.dominion.Card>)arraylist_card2, cardName65);
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Card card70 = cs362.dominion.Card.getCard(list_card0, cardName65);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName4.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName6.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + cs362.dominion.Card.Type.VICTORY + "'", type8.equals(cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName13.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName15.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName20.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName22.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + cs362.dominion.Card.CardName.Cooper + "'", cardName24.equals(cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName30.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + cs362.dominion.Card.CardName.Feast + "'", cardName34.equals(cs362.dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName41.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName46.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName48.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName50.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName56.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + cs362.dominion.Card.CardName.Mine + "'", cardName61.equals(cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + cs362.dominion.Card.CardName.Village + "'", cardName63.equals(cs362.dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + cs362.dominion.Card.CardName.Baron + "'", cardName65.equals(cs362.dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, "hi!");
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playKingdomCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.BoardQuery();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }

    cs362.dominion.GameState gameState0 = null;
    cs362.dominion.Player player2 = new cs362.dominion.Player(gameState0, " ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n");
    player2.buyCard();
    java.lang.String str4 = player2.toString();
    cs362.dominion.Card card5 = null;
    // The following exception was thrown during execution in test generation
    try {
    player2.discard(card5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"+ "'", str4.equals(" ---  ---  ---  --- hi! --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n --- \n --- --------------------------- --- \nHand:\t\t [ ] \nDiscard:\t [ ] \n0Deck:\t\t [ ] \nPlayed Cards:\t [ ] \nActions Left:\t 0\nCoins:\t\t 0\nBuys Left:\t 0\n\n"));

  }

}
