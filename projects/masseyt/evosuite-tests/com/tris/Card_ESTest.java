/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 13:51:04 PST 2017
 */

package com.tris;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.GREAT_HALL;
      Card card0 = Card.getCard(list0, card_Name0);
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, " za");
      int int0 = card0.points(player0);
      assertEquals(3, card0.getCost());
      assertEquals(0, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, 0, 0, 7, "");
      int int0 = card0.getCost();
      assertEquals(0, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.FEAST;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, (-591), (-3372), (-46), (String) null);
      int int0 = card0.getCost();
      assertEquals((-591), int0);
  }

  @Test
  public void test03()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.DUTCHY;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Game game0 = new Game(arrayList0);
      HashMap<Card, Integer> hashMap0 = game0.trash;
      Card card0 = Card.getCardBoard(hashMap0, card_Name0);
      assertNull(card0);
  }

  @Test
  public void test04()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, 0, 0, 7, "");
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Integer integer0 = new Integer(7);
      hashMap0.put(card0, integer0);
      Card card1 = Card.getCardBoard(hashMap0, card_Name0);
      assertNotNull(card1);
      assertEquals(0, card1.getCost());
  }

  @Test
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      HashMap<Card, Integer> hashMap0 = game0.trash;
      game0.board = hashMap0;
      game0.initGame();
      Card.Name card_Name0 = Card.Name.GOLD;
      Card card0 = Card.getCardBoard(hashMap0, card_Name0);
      assertEquals(17, hashMap0.size());
      assertEquals(6, card0.getCost());
  }

  @Test
  public void test06()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.DUTCHY;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-1), (-1738), (-1738), "O):E)EpYk-+V");
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      arrayList0.add(card0);
      Card card1 = Card.getCard(arrayList0, card_Name0);
      assertEquals(-1, card1.getCost());
      assertNotNull(card1);
  }

  @Test
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.DUTCHY;
      Card card0 = Card.getCard(list0, card_Name0);
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "");
      int int0 = card0.points(player0);
      assertEquals(5, card0.getCost());
      assertEquals(3, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, (-350), (-350), (-350), " (-");
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      Player player0 = new Player(game0, " (-");
      player0.discard(card0);
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.info((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.CUTPURSE;
      // Undeclared exception!
      try { 
        Card.getCardBoard((HashMap<Card, Integer>) null, card_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card.Name card_Name0 = Card.Name.FEAST;
      arrayList0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.getCard(arrayList0, card_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 46, 46, 46, (String) null);
      card0.getType();
      assertEquals(46, card0.getCost());
  }

  @Test
  public void test14()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.DUTCHY;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-1), (-1738), (-1738), "O):E)EpYk-+V");
      card0.getName();
      assertEquals(-1, card0.getCost());
  }

  @Test
  public void test15()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 46, 46, 46, (String) null);
      Card.info(card0);
      assertEquals(46, card0.getCost());
  }

  @Test
  public void test16()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.BARON;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-1253), (-1253), (-1253), "Skipping Buy Phase...");
      Card.info(card0);
      assertEquals(-1253, card0.getCost());
  }

  @Test
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list1 = Card.filter(list0, card_Type0);
      assertEquals(3, list1.size());
  }

  @Test
  public void test18()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.BARON;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-1253), (-1253), (-1253), "Skipping Buy Phase...");
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Integer integer0 = new Integer(1420);
      hashMap0.put(card0, integer0);
      Card card1 = Card.getCardBoard(hashMap0, card_Name0);
      assertNotNull(card1);
      assertEquals(-1253, card1.getCost());
  }

  @Test
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.GOLD;
      Card card0 = Card.getCard(list0, card_Name0);
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "");
      card0.play(player0, game0);
      assertEquals(6, card0.getCost());
  }

  @Test
  public void test20()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.VILLAGE;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-402), (-402), (-402), " (-");
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      Player player0 = new Player(game0, " (-");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.REMODEL;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 0, 0, 5, "");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Player player0 = new Player((Game) null, "");
      Game game0 = new Game(linkedList0);
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.GREAT_HALL;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 409, 409, 409, "");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      Player player0 = new Player(game0, "SILVER");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.GARDENS;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 409, 409, 1389, "");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      Player player0 = new Player(game0, "SILVER");
      card0.play(player0, game0);
      assertEquals(409, card0.getCost());
  }

  @Test
  public void test24()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.AMBASSADOR;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, 417, (-349), 46, "");
      Game game0 = new Game((List<Card>) null);
      Player player0 = new Player(game0, "");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         assertThrownBy("java.util.Random", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.GREAT_HALL;
      Card card0 = new Card(card_Name0, card_Type0, (-250), (-250), (-250), " za");
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, " za");
      int int0 = card0.points(player0);
      assertEquals((-250), int0);
      assertEquals(-250, card0.getCost());
  }

  @Test
  public void test26()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.GOLD;
      Card card0 = Card.getCard(list0, card_Name0);
      assertNotNull(card0);
      
      int int0 = card0.getCost();
      assertEquals(6, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.MINE;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 409, 409, 1389, "");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      Player player0 = new Player(game0, "");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }
}
