/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 25 10:12:09 PST 2017
 */

package com.tris;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Game game0 = new Game((List<Card>) null);
      Player player0 = new Player(game0, "");
      int int0 = player0.score();
      assertEquals(0, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, (String) null);
      player0.hand = list0;
      player0.buy();
  }

  @Test
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "O/");
      player0.discard = list0;
      Card card0 = player0.draw();
      //  // Unstable assertion: assertEquals(4, card0.getCost());
  }

  @Test
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "eGC7L,AcRO<=(^OIB|\"");
      // Undeclared exception!
      try { 
        Card.Type.valueOf("KwmA 9EqII42T=F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.tris.Card.Type.KwmA 9EqII42T=F
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Game game0 = new Game(vector0);
      String string0 = "";
      Card.Name card_Name0 = Card.Name.GREAT_HALL;
      // Undeclared exception!
      try { 
        Card.getCardBoard((HashMap<Card, Integer>) null, card_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "CHECKING FOR GAME OVER: PROVINCES LEFT: ");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      Card.Name card_Name0 = Card.Name.PROVINCE;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, 12, (-1250), 9, "CHECKING FOR GAME OVER: PROVINCES LEFT: ");
      linkedList0.add(card0);
      // Undeclared exception!
      try { 
        player0.initPlayer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Game game0 = new Game((List<Card>) null);
      Player player0 = new Player(game0, "QPX-k");
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.score();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Player.listCards((List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Game game0 = new Game((List<Card>) null);
      Player player0 = new Player(game0, "");
      Card.Name card_Name0 = Card.Name.REMODEL;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, 2362, 2362, 10, "/~{");
      // Undeclared exception!
      try { 
        player0.gain(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Player player0 = new Player((Game) null, "");
      // Undeclared exception!
      try { 
        player0.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "\n");
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "\n");
      player0.played = list0;
      player0.endTurn();
  }

  @Test
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, (String) null);
      player0.hand = list0;
      player0.endTurn();
      assertEquals(5, list0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.generate();
      List<Card> list1 = Player.listCards(list0);
      assertEquals(20, list1.size());
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Game game0 = new Game(arrayList0);
      Player player0 = new Player(game0, (String) null);
      player0.actions = 1538;
      player0.playAction();
  }

  @Test
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, (String) null);
      player0.playAction();
  }

  @Test
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, ";z4[{|b\";K4gS");
      player0.discard = list0;
      int int0 = player0.score();
      assertEquals(12, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "eGC7L,AcRO<=(^OIB|\"");
      player0.played = list0;
      player0.playAction();
  }

  @Test
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, (String) null);
      player0.hand = list0;
      player0.playAction();
  }

  @Test
  public void test19()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      Player player0 = new Player(game0, ".GJW1Cf7_*t");
      Card.Name card_Name0 = Card.Name.DUTCHY;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 0, (-2355), 0, "AbWt");
      player0.discard(card0);
      int int0 = player0.score();
      assertEquals((-2355), int0);
  }

  @Test
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, ";z4[{|b\";K4gS");
      game0.addPlayer(player0);
      game0.initGame();
  }
}
