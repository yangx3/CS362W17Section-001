/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 11 20:03:16 GMT 2017
 */

package com.tris;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tris.Card;
import com.tris.Game;
import com.tris.Player;
import com.tris.Randomness;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Randomness.random = null;
      Card.Name card_Name0 = Card.Name.AMBASSADOR;
      Card.getCard(list0, card_Name0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Name card_Name0 = Card.Name.VILLAGE;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 6, 6, 6, "BWjHo*56scQ;OV?H");
      Player player0 = new Player((Game) null, "BWjHo*56scQ;OV?H");
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      game0.embargo = hashMap0;
      stack0.iterator();
      game0.embargo = hashMap0;
      stack0.add(card0);
      card0.text = null;
      player0.discard = (List<Card>) stack0;
      card0.play(player0, (Game) null);
      card0.getName();
      Card.generate();
      Card.Name.values();
      card0.value = 6;
      assertEquals(6, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.ESTATE;
      Card card0 = Card.getCard(list0, card_Name0);
      Randomness.nextRandomInt(13);
      Game game0 = new Game(list0);
      HashMap<Card, Integer> hashMap0 = game0.board;
      Integer integer0 = new Integer(3551);
      hashMap0.put(card0, integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        Card.getCardBoard(hashMap0, card_Name0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.FEAST;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 0, (-173), (-173), ">Y");
      Randomness.totalCallsToRandom = (-173);
      Card.Type card_Type1 = Card.Type.VICTORY;
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      card0.play((Player) null, game0);
      card0.type = card_Type1;
      card0.value = (-173);
      stack0.add(card0);
      card0.points((Player) null);
      int int0 = Randomness.totalCallsToRandom;
      Card card1 = new Card((Card.Name) null, card_Type1, 1659, (-173), 1659, ">Y");
      card0.play((Player) null, game0);
      card1.getName();
      // Undeclared exception!
      try { 
        Card.Name.valueOf("2*82198L?0=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.tris.Card.Name.2*82198L?0=
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player.listCards(list0);
      Card.Type.values();
      HashMap<Card, Integer> hashMap0 = game0.embargo;
      Integer integer0 = new Integer(0);
      Card.Name card_Name0 = Card.Name.GREAT_HALL;
      Card.getCardBoard(hashMap0, card_Name0);
      Card.Name card_Name1 = Card.Name.GREAT_HALL;
      Card.getCard(list0, card_Name1);
      Card.Name.values();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.random = (Random) mockRandom0;
      Player player0 = new Player(game0, "            CARDS IN HAND: ");
      player0.discard = list0;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.MINE;
      Player player0 = new Player((Game) null, "Deck is empty. Reshuffling.");
      Randomness.totalCallsToRandom = (-689);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-689), (-1242), 0, "TREASURE");
      linkedList0.add(card0);
      Card card1 = Card.getCard(linkedList0, card_Name0);
      assertEquals(-689, card1.getCost());
      assertNotNull(card1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Vector<Card> vector0 = new Vector<Card>();
      Card.Type.values();
      Integer integer0 = new Integer(0);
      Card.Name card_Name0 = Card.Name.GARDENS;
      Card.getCard(list0, card_Name0);
      Card.Name.values();
      Player player0 = new Player(game0, "            CARDS IN HAND: ");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.Type.values();
      Card.generate();
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 0, 617, 617, "CG{");
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "CG{");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Randomness.totalCallsToRandom = (-210);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.reset(0L);
      Randomness.totalCallsToRandom = 14;
      Card.Name card_Name0 = Card.Name.MINE;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, (-210), 14, 15, "");
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(card0, integer0);
      Card card1 = Card.getCardBoard(hashMap0, card_Name0);
      assertNotNull(card1);
      
      Card.info(card0);
      assertEquals(-210, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.GOLD;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, 19, 5, 19, (String) null);
      card0.value = 5;
      int int0 = card0.points((Player) null);
      assertEquals(19, card0.getCost());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.COUNCIL_ROOM;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, (-1500), (-1500), (-1500), "Your current hand: ");
      int int0 = card0.value;
      Randomness.nextRandomInt((-1500));
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Card.Name card_Name1 = Card.Name.AMBASSADOR;
      Card.getCardBoard(hashMap0, card_Name1);
      // Undeclared exception!
      try { 
        Card.info((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.AMBASSADOR;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, 2740, 2432, 0, "oC|1;ay<-{m&&Nje*f6");
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "oC|1;ay<-{m&&Nje*f6");
      game0.listBoard();
      Card.generate();
      player0.score();
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Randomness.totalCallsToRandom = 6;
      Randomness.totalCallsToRandom = 6;
      Card.Name card_Name0 = Card.Name.FEAST;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 55, 6, 6, "CURRENT TURN: ");
      Card.Name card_Name1 = Card.Name.REMODEL;
      card0.name = card_Name1;
      card0.value = (-2093);
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-1812), (-1812), (-1812), "xD)TTT9B");
      card0.getCost();
      List<Card> list0 = Card.generate();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SILVER;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, 0, 2411, 2411, "+");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      HashMap<Card, Integer> hashMap0 = game0.trash;
      game0.board = hashMap0;
      HashMap<Card, Integer> hashMap1 = game0.board;
      Card.getCardBoard(hashMap1, card_Name0);
      int int0 = card0.getCost();
      assertEquals(0, int0);
      
      Card.Name card_Name1 = Card.Name.REMODEL;
      Card card1 = new Card(card_Name1, card_Type0, 0, (-1930), 0, "+");
      assertEquals(0, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.ADVENTURER;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, (-1242), 0, 0, "Deck is empty. Reshuffling.");
      Player player0 = new Player((Game) null, "Deck is empty. Reshuffling.");
      Card.info(card0);
      // Undeclared exception!
      try { 
        card0.play(player0, (Game) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Randomness.reset(178L);
      Card.Name card_Name0 = Card.Name.VILLAGE;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 13, 9, 1, "");
      card0.getType();
      assertEquals(13, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      HashMap<Card, Integer> hashMap0 = game0.trash;
      hashMap0.entrySet();
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.COPPER;
      Card card0 = Card.getCard(list0, card_Name0);
      linkedList0.add(card0);
      Card.Name card_Name1 = Card.Name.REMODEL;
      Card.getCardBoard(hashMap0, card_Name1);
      Card.Type[] card_TypeArray0 = Card.Type.values();
      assertNotNull(card_TypeArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SMITHY;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.COUNCIL_ROOM;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 4, 0, 4, "({'57(K}4I1 1");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      Player player0 = new Player(game0, "g:ud@o@a|");
      int int0 = card0.points(player0);
      assertEquals(4, card0.getCost());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.ADVENTURER;
      // Undeclared exception!
      try { 
        Card.getCardBoard((HashMap<Card, Integer>) null, card_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.SILVER;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, 6, 6, 6, (String) null);
      card0.type = card_Type0;
      card0.getType();
      card0.points = 1546;
      assertEquals(6, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.Name card_Name0 = Card.Name.VILLAGE;
      Card.getCard(vector0, card_Name0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Randomness.random = null;
      Card.Name card_Name0 = Card.Name.CUTPURSE;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, 2, 2, 2, " - ");
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      Player player0 = new Player(game0, " - ");
      game0.addPlayer(player0);
      linkedList0.add(card0);
      card0.play(player0, game0);
      Card card1 = new Card(card_Name0, card_Type0, 2, 2, 2, " - ");
      Card.info(card1);
      Player player1 = new Player((Game) null, " - ");
      player1.buys = 130;
      card0.cost = 6457;
      Card.Name card_Name1 = card0.name;
      assertEquals(Card.Name.CUTPURSE, card_Name1);
      
      // Undeclared exception!
      try { 
        Card.Name.valueOf("            CARDS IN PLAYED: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.tris.Card.Name.            CARDS IN PLAYED: 
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.AMBASSADOR;
      Card.getCard(list0, card_Name0);
      Randomness.reset(1879L);
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "");
      player0.hand = list0;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.Name.values();
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Card.Name card_Name0 = Card.Name.EMBARGO;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 11, 11, 11, "");
      Card.Type card_Type1 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type1);
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "g,^{");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Randomness.totalCallsToRandom = 15;
      Card.Name card_Name0 = Card.Name.COUNCIL_ROOM;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-2164), 15, 15, "");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "AMBASSADOR");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Name card_Name0 = Card.Name.VILLAGE;
      Card.Type card_Type0 = Card.Type.VICTORY;
      int int0 = 6;
      Card card0 = new Card(card_Name0, card_Type0, 6, 6, 6, "BWjHo*56scQ;OV?H");
      Player player0 = new Player((Game) null, "BWjHo*56scQ;OV?H");
      Stack<Card> stack0 = new Stack<Card>();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      String string0 = null;
      card0.text = null;
      // Undeclared exception!
      try { 
        card0.play(player0, (Game) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.MINE;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, 2971, 2971, 2971, "");
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>((Comparator<? super Card>) null);
      Card.Type card_Type1 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type1);
      card0.getCost();
      Game game0 = new Game(list0);
      Player player0 = new Player(game0, "YD");
      // Undeclared exception!
      try { 
        card0.play(player0, game0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.FEAST;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 0, (-173), (-173), ">Y");
      Randomness.totalCallsToRandom = (-173);
      Card.Type card_Type1 = Card.Type.ACTION;
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      card0.play((Player) null, game0);
      card0.type = card_Type1;
      card0.value = (-173);
      int int0 = card0.points((Player) null);
      assertEquals((-173), int0);
      
      int int1 = Randomness.totalCallsToRandom;
      card0.play((Player) null, game0);
      assertEquals(0, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card.Type.values();
      Randomness.nextRandomInt(5);
      Card.Name card_Name0 = Card.Name.COPPER;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_Name0, card_Type0, 2112, 2112, 30, ".dJ${ceVl7GR");
      card0.name = card_Name0;
      card0.name = card_Name0;
      card0.getName();
      Randomness.reset((-2036L));
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Game game0 = new Game(arrayList0);
      game0.cards = (List<Card>) arrayList0;
      Player player0 = new Player(game0, ".dJ${ceVl7GR");
      card0.play(player0, game0);
      card0.points = 30;
      assertEquals(2112, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.CUTPURSE;
      Card.Type card_Type0 = Card.Type.ACTION;
      int int0 = 2;
      Card card0 = new Card(card_Name0, card_Type0, 2, 2, 2, " - ");
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      Player player0 = new Player(game0, " - ");
      linkedList0.add(card0);
      card0.play(player0, game0);
      Card card1 = new Card(card_Name0, card_Type0, 2, 2, 2, " - ");
      Card.info(card1);
      card0.cost = 6457;
      Card.Name card_Name1 = card0.name;
      // Undeclared exception!
      try { 
        Card.Name.valueOf("            CARDS IN PLAYED: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.tris.Card.Name.            CARDS IN PLAYED: 
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Randomness.random = null;
      Card.Name card_Name0 = Card.Name.BARON;
      Card.getCard(list0, card_Name0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Card.Name card_Name0 = Card.Name.ADVENTURER;
      Card.getCard(list0, card_Name0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      Player.listCards(list0);
      Card.Type.values();
      HashMap<Card, Integer> hashMap0 = game0.embargo;
      Integer integer0 = new Integer(0);
      Card.Name card_Name0 = Card.Name.FEAST;
      Card.getCardBoard(hashMap0, card_Name0);
      Card.Name card_Name1 = Card.Name.GREAT_HALL;
      Card.getCard(list0, card_Name1);
      Card.Name.values();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.random = (Random) mockRandom0;
      Player player0 = new Player(game0, "            CARDS IN HAND: ");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card.Name card_Name0 = Card.Name.REMODEL;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, (-1261), 0, 0, "Deck is empty. Reshuffling.");
      Player player0 = new Player((Game) null, "Deck is empty. Reshuffling.");
      Card.info(card0);
      // Undeclared exception!
      try { 
        card0.play(player0, (Game) null);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }
}
