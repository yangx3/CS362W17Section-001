/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 11 20:05:31 GMT 2017
 */

package com.tris;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tris.Card;
import com.tris.Game;
import com.tris.Player;
import com.tris.Randomness;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Name.values();
      Randomness.nextRandomInt((-325));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      HashMap<Card, Integer> hashMap0 = game0.embargo;
      hashMap0.values();
      game0.board = hashMap0;
      Card.Name card_Name0 = Card.Name.GOLD;
      Card.getCardBoard(game0.board, card_Name0);
      game0.isGameOver();
      Integer integer0 = new Integer(10);
      hashMap0.put((Card) null, integer0);
      game0.isGameOver();
      Randomness.reset((-325));
      game0.isGameOver();
      game0.embargo = hashMap0;
      assertFalse(game0.embargo.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      HashMap<Card, Integer> hashMap0 = game0.board;
      Card.Name card_Name0 = Card.Name.PROVINCE;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_Name0, card_Type0, (-176), (-1444), (-176), "");
      Integer integer0 = new Integer(1);
      hashMap0.put(card0, integer0);
      game0.embargo = hashMap0;
      List<Card> list0 = game0.listBoard();
      assertEquals(1, list0.size());
      
      Randomness.nextRandomInt(373);
      int int0 = game0.getRemaining(card0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Randomness.nextRandomInt((-2514));
      int int0 = Randomness.totalCallsToRandom;
      Randomness.nextRandomInt(1);
      ArrayDeque<Card> arrayDeque0 = new ArrayDeque<Card>();
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(arrayDeque0, card_Type0);
      Game game0 = new Game(list0);
      game0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        game0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      stack0.listIterator(0);
      Game game0 = new Game(stack0);
      Card.Name card_Name0 = Card.Name.ESTATE;
      Card.Type card_Type0 = Card.Type.TREASURE;
      game0.play();
      List<Card> list0 = stack0.subList(0, 0);
      Card card0 = new Card(card_Name0, card_Type0, 0, 0, (-5079), "");
      card0.points = (-5079);
      HashMap<Card, Integer> hashMap0 = game0.board;
      Card.Name card_Name1 = Card.Name.CURSE;
      Integer integer0 = new Integer(0);
      hashMap0.clear();
      hashMap0.put(card0, integer0);
      Card.getCardBoard(hashMap0, card_Name1);
      stack0.addElement(card0);
      game0.getWinners();
      game0.isGameOver();
      HashMap<Card, Integer> hashMap1 = new HashMap<Card, Integer>();
      game0.trash = hashMap1;
      Game game1 = new Game(list0);
      // Undeclared exception!
      try { 
        game1.play();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      linkedList0.spliterator();
      Game game0 = new Game(linkedList0);
      linkedList0.parallelStream();
      List<Card> list0 = game0.listBoard();
      HashMap<Card, Integer> hashMap0 = game0.board;
      game0.embargo = hashMap0;
      game0.listEmbargo();
      Card.Name.values();
      Card.Name card_Name0 = Card.Name.ADVENTURER;
      Card.getCard(list0, card_Name0);
      hashMap0.put((Card) null, (Integer) null);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      game0.getWinners();
      // Undeclared exception!
      try { 
        game0.listEmbargo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      List<Card> list0 = Player.listCards(arrayList0);
      Game game0 = new Game(list0);
      game0.board = null;
      game0.getWinners();
      // Undeclared exception!
      try { 
        game0.listBoard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      game0.embargo = null;
      game0.isGameOver();
      game0.play();
      game0.board = null;
      // Undeclared exception!
      try { 
        Card.Name.valueOf("e,b{bz!-.(~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.tris.Card.Name.e,b{bz!-.(~
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Game game0 = new Game((List<Card>) null);
      HashMap<Card, Integer> hashMap0 = game0.trash;
      game0.embargo = hashMap0;
      // Undeclared exception!
      try { 
        game0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Game game0 = new Game((List<Card>) null);
      Stack<Player> stack0 = new Stack<Player>();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      game0.trash = hashMap0;
      game0.players = (List<Player>) stack0;
      // Undeclared exception!
      try { 
        game0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.generate();
      List<Card> list1 = Player.listCards(list0);
      Game game0 = new Game(list1);
      Player player0 = new Player(game0, "");
      player0.buy();
      game0.addPlayer(player0);
      HashMap<Card, Integer> hashMap0 = game0.board;
      game0.board = hashMap0;
      Game game1 = new Game(list0);
      game1.getWinners();
      Card.Name card_Name0 = Card.Name.CURSE;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_Name0, card_Type0, 30, 0, 30, "");
      Integer integer0 = new Integer(30);
      hashMap0.put(card0, integer0);
      Randomness.nextRandomInt(4);
      Randomness.random = null;
      game0.play();
      game1.getWinners();
      Game game2 = new Game(list0);
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      game1.players = (List<Player>) arrayList0;
      game1.listBoard();
      // Undeclared exception!
      try { 
        Card.Name.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.tris.Card.Name.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Game game0 = new Game(arrayList0);
      HashMap<Player, Integer> hashMap0 = game0.getWinners();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.generate();
      Game game0 = new Game(list0);
      List<Card> list1 = game0.listBoard();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Game game0 = new Game((List<Card>) null);
      // Undeclared exception!
      try { 
        game0.initGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Name.values();
      Randomness.nextRandomInt((-325));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Game game0 = new Game(linkedList0);
      HashMap<Card, Integer> hashMap0 = game0.embargo;
      hashMap0.values();
      game0.board = hashMap0;
      Card.Name card_Name0 = Card.Name.GOLD;
      Card.getCardBoard(game0.board, card_Name0);
      Integer integer0 = new Integer(0);
      hashMap0.put((Card) null, integer0);
      game0.isGameOver();
      linkedList0.toArray();
      Randomness.reset((-325));
      game0.isGameOver();
      game0.embargo = hashMap0;
      assertFalse(game0.embargo.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Game game0 = new Game(arrayList0);
      game0.play();
      // Undeclared exception!
      try { 
        game0.initGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      game0.play();
      Player player0 = new Player(game0, " (");
      game0.addPlayer(player0);
      List<Player> list0 = game0.players;
      game0.getWinners();
      game0.listEmbargo();
      Game game1 = new Game(stack0);
      game1.play();
      // Undeclared exception!
      try { 
        game1.initGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Game game0 = new Game(stack0);
      game0.play();
      Card.Name card_Name0 = Card.Name.MINE;
      Card.Type card_Type0 = Card.Type.VICTORY;
      int int0 = 2159;
      String string0 = " (";
      Card card0 = new Card(card_Name0, card_Type0, 2159, 9, 0, " (");
      Card.Name card_Name1 = Card.Name.VILLAGE;
      Card card1 = new Card(card_Name1, card_Type0, 2159, 0, 2159, " (");
      // Undeclared exception!
      try { 
        game0.getRemaining(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.tris.Game", e);
      }
  }
}
