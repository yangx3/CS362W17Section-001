/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 23:36:24 GMT 2017
 */

package com.mycompany.marksprousedominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mycompany.marksprousedominion.Card;
import com.mycompany.marksprousedominion.Player;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(1, card0);
      player0.addCard(1, card0);
      player0.resetVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setVictory(571);
      player0.addCard(0, card0);
      player0.addCard(1, card0);
      player0.resetVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(2, card0);
      player0.addCard(1, card0);
      player0.resetVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.addCard(0, card0);
      card0.setVictory(3279);
      player0.addCard(2, card0);
      // Undeclared exception!
      try { 
        player0.turnConclusion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.mycompany.marksprousedominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(0, card0);
      player0.addCard(0, card0);
      player0.turnConclusion();
      player0.resetVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setVictory((-6));
      player0.addCard(0, card0);
      player0.addCard(0, (Card) null);
      // Undeclared exception!
      try { 
        player0.resetVictoryPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.mycompany.marksprousedominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Player player0 = new Player((Random) mockRandom0);
      player0.addCard((-2447), 3, 1113);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setVictory(1);
      player0.addCard(1, card0);
      assertEquals(0, player0.getVictoryPoints());
      
      player0.turnConclusion();
      int int0 = player0.getVictoryPoints();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1589L));
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setVictory((-455));
      player0.addCard(0, card0);
      player0.turnConclusion();
      int int0 = player0.getVictoryPoints();
      assertEquals((-455), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1589L));
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(0, card0);
      int int0 = player0.getSize(0);
      assertEquals(1, int0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      card0.setVictory(921);
      player0.addCard(0, card0);
      Card card1 = player0.getCard(0, 0);
      assertNotNull(card1);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      card0.setType(1116);
      player0.addCard(0, card0);
      Card card1 = player0.getCard(0, 0);
      assertEquals(0, player0.getVictoryPoints());
      assertNotNull(card1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      card0.setTreasure(1907);
      player0.addCard(0, card0);
      Card card1 = player0.getCard(0, 0);
      assertNotNull(card1);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      card0.setTreasure((-742));
      player0.addCard(0, card0);
      Card card1 = player0.getCard(0, 0);
      assertEquals(0, player0.getVictoryPoints());
      assertNotNull(card1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.addCard(0, card0);
      // Undeclared exception!
      try { 
        player0.shuffle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-5225L));
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(1, card0);
      // Undeclared exception!
      try { 
        player0.addCard(1, 1, (-1503));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(3, card0);
      player0.resetVictoryPoints();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((Random) null);
      player0.draw();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.addCard(0, card0);
      player0.draw();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setName("Gardens");
      player0.addCard(3, card0);
      player0.resetVictoryPoints();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setName("Gardens");
      player0.addCard(1, card0);
      player0.resetVictoryPoints();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setName("Gardens");
      player0.addCard(2, card0);
      player0.resetVictoryPoints();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      card0.setName("Gardens");
      player0.addCard(0, card0);
      player0.resetVictoryPoints();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2071L));
      Player player0 = new Player((Random) mockRandom0);
      player0.addCard(3, (Card) null);
      // Undeclared exception!
      try { 
        player0.addCard(3, 3, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(2, card0);
      player0.addCard(2, 0, 0);
      // Undeclared exception!
      try { 
        player0.addCard(0, 2, (-1121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((Random) null);
      player0.addCard(2779, 0, 2779);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      player0.addCard(1, 1, 1);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((Random) null);
      player0.addCard(1308, 1308, 0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2071L));
      Player player0 = new Player((Random) mockRandom0);
      player0.addCard(3, 3, 3);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      player0.addCard(0, 2, (-1121));
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      player0.addCard(2, 0, 0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1589L));
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard((-1), card0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((Random) null);
      player0.getCard(2779, (-20));
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((Random) null);
      // Undeclared exception!
      try { 
        player0.getCard(2, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2278L));
      Player player0 = new Player((Random) mockRandom0);
      // Undeclared exception!
      try { 
        player0.getCard(1, (-318));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      // Undeclared exception!
      try { 
        player0.getCard(3, (-3030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      // Undeclared exception!
      try { 
        player0.getCard(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.trashCard(3, card0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.trashCard(2, card0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.trashCard(1, card0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.trashCard(921, card0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.trashCard(0, card0);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((Random) null);
      int int0 = player0.getSize(1308);
      assertEquals(0, player0.getVictoryPoints());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      player0.getSize(3);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      player0.getSize(2);
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1589L));
      Player player0 = new Player((Random) mockRandom0);
      Card card0 = new Card();
      player0.addCard(0, card0);
      player0.shuffle();
      assertEquals(0, player0.getVictoryPoints());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((Random) null);
      Card card0 = new Card();
      player0.addCard(3, card0);
      // Undeclared exception!
      try { 
        player0.turnConclusion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Player player0 = new Player((Random) mockRandom0);
      int int0 = player0.getVictoryPoints();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Player player0 = new Player((Random) mockRandom0);
      player0.getSize(1);
      assertEquals(0, player0.getVictoryPoints());
  }
}
