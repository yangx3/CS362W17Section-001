
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.checkPrice(iterable_card0, (java.lang.Integer)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Feast;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Feast + "'", cardName0.equals(dominion.Card.CardName.Feast));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    int i0 = dominion.Randomness.totalCallsToRandom;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 0);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Baron;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Baron + "'", cardName0.equals(dominion.Card.CardName.Baron));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Council_Room;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName0.equals(dominion.Card.CardName.Council_Room));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    long long0 = dominion.Randomness.SEED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 0L);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    dominion.Randomness.reset((long)(byte)-1);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Steward;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.Card.Type type6 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card7 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type6);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter(iterable_card0, type6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Steward + "'", cardName4.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + dominion.Card.Type.VICTORY + "'", type6.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Great_Hall;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Great_Hall + "'", cardName0.equals(dominion.Card.CardName.Great_Hall));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    dominion.Randomness.reset((long)'4');

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Gold;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Gold + "'", cardName0.equals(dominion.Card.CardName.Gold));

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    dominion.Randomness.totalCallsToRandom = (byte)-1;

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    dominion.Randomness.totalCallsToRandom = (byte)100;

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    java.util.Random random0 = null;
    dominion.Randomness.random = random0;

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Copper;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Copper + "'", cardName0.equals(dominion.Card.CardName.Copper));

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    dominion.Randomness.reset((long)(short)1);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card card17 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card18 = gameState7.getGameboard(card17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 5);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Steward;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Steward;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Village;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName20);
    int i22 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card1, cardName20);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = null;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Adventurer;
    dominion.Card card31 = dominion.Card.getCard(list_card29, cardName30);
    int i32 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card1, cardName30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Steward + "'", cardName10.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Steward + "'", cardName15.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Village + "'", cardName20.equals(dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName30.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    dominion.Randomness.totalCallsToRandom = (short)0;

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    dominion.Randomness.totalCallsToRandom = 5;

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.printStateGame();
    dominion.Card card10 = null;
    player2.discard(card10);
    dominion.Card card12 = null;
    player2.trashCard(card12);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    gameState16.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.Card card19 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card20 = gameState7.getGameboard(card19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.buyCard();
    dominion.Card card7 = null;
    player2.trashCard(card7);
    player2.playKingdomCard();

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    boolean b74 = gameState7.isGameOver();
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i75 = gameState7.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Gardens;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Gardens + "'", cardName0.equals(dominion.Card.CardName.Gardens));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    boolean b74 = gameState7.isGameOver();
    boolean b75 = gameState7.isGameOver();
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Steward;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card[] card_array81 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card82 = new java.util.ArrayList<dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card82, card_array81);
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Steward;
    dominion.Card card85 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card82, cardName84);
    dominion.Card.Type type86 = null;
    java.util.List<dominion.Card> list_card87 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card82, type86);
    dominion.Card.CardName cardName88 = dominion.Card.CardName.Adventurer;
    dominion.Card card89 = dominion.Card.getCard(list_card87, cardName88);
    dominion.Card card90 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName88);
    gameState7.cards = arraylist_card77;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i92 = gameState7.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Steward + "'", cardName79.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Steward + "'", cardName84.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName88.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTtreasureCard();

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    int i1 = dominion.Randomness.nextRandomInt(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 13);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    int i1 = dominion.Randomness.nextRandomInt((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 38);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = null;
    gameState7.embTokens = hashmap_card_i8;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Steward;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type19);
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type19);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = null;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Adventurer;
    dominion.Card card31 = dominion.Card.getCard(list_card29, cardName30);
    int i32 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card22, cardName30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Steward + "'", cardName12.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName30.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    player21.playKingdomCard();
    dominion.Card card26 = null;
    player21.discard(card26);
    player21.printStateGame();
    dominion.Card card29 = null;
    player21.discard(card29);
    gameState7.addPlayer(player21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState7.embTokens = hashmap_card_i32;
    // The following exception was thrown during execution in test generation
    try {
    dominion.GameState gameState34 = gameState7.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Card card10 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card11 = gameState9.getGameboard(card10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    player21.playKingdomCard();
    dominion.Card card26 = null;
    player21.discard(card26);
    player21.printStateGame();
    dominion.Card card29 = null;
    player21.discard(card29);
    gameState7.addPlayer(player21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState7.embTokens = hashmap_card_i32;
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = gameState7.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Steward;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type26);
    gameState15.cards = arraylist_card17;
    dominion.Card card30 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card31 = gameState15.getGameboard(card30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Steward + "'", cardName24.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    gameState7.players = arraylist_player88;
    // The following exception was thrown during execution in test generation
    try {
    dominion.GameState gameState92 = gameState7.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.buyCard();
    dominion.Card card7 = null;
    player2.trashCard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.printStateGame();
    player2.buyCard();

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Player player18 = new dominion.Player(gameState16, "");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState16.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Duchy;
    int i8 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card6, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card9 = dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Duchy + "'", cardName7.equals(dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    java.util.List<dominion.Card> list_card17 = gameState7.cards;
    // The following exception was thrown during execution in test generation
    try {
    dominion.GameState gameState18 = gameState7.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Player> list_player15 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    dominion.Randomness.totalCallsToRandom = 0;

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.printStateGame();
    player2.printStateGame();
    dominion.Card card13 = null;
    player2.trashCard(card13);
    player2.playTtreasureCard();

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.discard(card11);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    boolean b74 = gameState7.isGameOver();
    boolean b75 = gameState7.isGameOver();
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Steward;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card.Type type81 = null;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card77, type81);
    gameState7.cards = list_card82;
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Smithy;
    int i85 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card82, cardName84);
    dominion.Card[] card_array86 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card87 = new java.util.ArrayList<dominion.Card>();
    boolean b88 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card87, card_array86);
    dominion.Card.CardName cardName89 = dominion.Card.CardName.Steward;
    dominion.Card card90 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card87, cardName89);
    dominion.Card[] card_array91 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card92 = new java.util.ArrayList<dominion.Card>();
    boolean b93 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card92, card_array91);
    dominion.Card.CardName cardName94 = dominion.Card.CardName.Steward;
    dominion.Card card95 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card92, cardName94);
    dominion.Card.Type type96 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card97 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card92, type96);
    java.util.List<dominion.Card> list_card98 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card87, type96);
    java.util.List<dominion.Card> list_card99 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card82, type96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Steward + "'", cardName79.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName84.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + cardName89 + "' != '" + dominion.Card.CardName.Steward + "'", cardName89.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    org.junit.Assert.assertTrue("'" + cardName94 + "' != '" + dominion.Card.CardName.Steward + "'", cardName94.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card95);
    org.junit.Assert.assertTrue("'" + type96 + "' != '" + dominion.Card.Type.VICTORY + "'", type96.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card99);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    java.util.List<dominion.Player> list_player17 = null;
    gameState7.players = list_player17;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState7.gameBoard;
    dominion.GameState gameState18 = gameState7.clone();
    dominion.Card card19 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card20 = gameState7.getGameboard(card19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.GameState gameState10 = new dominion.GameState(list_card6);
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Steward;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Curse;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName18);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Steward;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName23);
    int i26 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card6, cardName23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Steward + "'", cardName14.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.VICTORY + "'", type16.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Curse + "'", cardName18.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Steward + "'", cardName23.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Steward;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type19);
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type19);
    java.util.List<dominion.Card> list_card24 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card22, (java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Steward + "'", cardName12.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    player2.playKingdomCard();

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.printStateGame();
    dominion.Card card12 = null;
    player2.trashCard(card12);
    player2.playKingdomCard();
    dominion.Card card15 = null;
    player2.discard(card15);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playKingdomCard();
    player2.buyCard();

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    dominion.Randomness.reset(10L);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.printStateGame();
    player2.printStateGame();

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.Player player40 = new dominion.Player(gameState22, "hi!");
    dominion.GameState gameState41 = null;
    dominion.Player player43 = new dominion.Player(gameState41, "");
    dominion.Card card44 = null;
    player43.trashCard(card44);
    player43.printStateGame();
    player43.playKingdomCard();
    dominion.Card card48 = null;
    player43.discard(card48);
    player43.playKingdomCard();
    gameState22.addPlayer(player43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Steward;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.Card.Type type6 = null;
    java.util.List<dominion.Card> list_card7 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type6);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Province;
    int i9 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card2, cardName8);
    // The following exception was thrown during execution in test generation
    try {
    int i10 = dominion.Card.filterQTY(iterable_card0, cardName8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Steward + "'", cardName4.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Province + "'", cardName8.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.Player player20 = new dominion.Player(gameState7, "");
    dominion.Card card21 = null;
    player20.discard(card21);
    dominion.Card card23 = null;
    player20.trashCard(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    player18.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.Player player40 = new dominion.Player(gameState22, "hi!");
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Steward;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card.Type type46 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card42, type46);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    dominion.Card card52 = null;
    player51.trashCard(card52);
    player51.printStateGame();
    gameState48.addPlayer(player51);
    dominion.GameState gameState56 = gameState48.clone();
    dominion.Card[] card_array57 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card58 = new java.util.ArrayList<dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card58, card_array57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Steward;
    dominion.Card card61 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card58, cardName60);
    dominion.Card[] card_array62 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card63 = new java.util.ArrayList<dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card63, card_array62);
    dominion.Card.CardName cardName65 = dominion.Card.CardName.Steward;
    dominion.Card card66 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card63, cardName65);
    dominion.Card.Type type67 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card68 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card63, type67);
    java.util.List<dominion.Card> list_card69 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card58, type67);
    gameState56.cards = arraylist_card58;
    dominion.Card[] card_array71 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card72 = new java.util.ArrayList<dominion.Card>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card72, card_array71);
    dominion.Card.CardName cardName74 = dominion.Card.CardName.Steward;
    dominion.Card card75 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card72, cardName74);
    dominion.Card.Type type76 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card77 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card72, type76);
    dominion.GameState gameState78 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card72);
    dominion.GameState gameState79 = null;
    dominion.Player player81 = new dominion.Player(gameState79, "");
    dominion.Card card82 = null;
    player81.trashCard(card82);
    player81.printStateGame();
    gameState78.addPlayer(player81);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i86 = null;
    gameState78.embTokens = hashmap_card_i86;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i88 = gameState78.gameBoard;
    gameState56.embTokens = hashmap_card_i88;
    gameState22.gameBoard = hashmap_card_i88;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Steward + "'", cardName44.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.VICTORY + "'", type46.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Steward + "'", cardName60.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + dominion.Card.CardName.Steward + "'", cardName65.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + type67 + "' != '" + dominion.Card.Type.VICTORY + "'", type67.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + dominion.Card.CardName.Steward + "'", cardName74.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    org.junit.Assert.assertTrue("'" + type76 + "' != '" + dominion.Card.Type.VICTORY + "'", type76.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i88);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Player player18 = new dominion.Player(gameState16, "");
    player18.printStateGame();
    player18.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Steward;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type26);
    gameState15.cards = arraylist_card17;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    java.util.List<dominion.Card> list_card38 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card36, (java.lang.Integer)10);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Cutpurse;
    dominion.Card card40 = dominion.Card.getCard(list_card36, cardName39);
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Steward + "'", cardName24.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.VICTORY + "'", type35.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName39.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card9 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.printStateGame();
    dominion.Card card12 = null;
    player2.trashCard(card12);
    player2.playKingdomCard();
    player2.playKingdomCard();

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    dominion.Player player91 = dominion.Randomness.randomMember((java.util.List<dominion.Player>)arraylist_player88);
    gameState16.players = arraylist_player88;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player91);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = gameState22.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i23);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState7.getWinners();
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    dominion.Card card20 = null;
    player19.trashCard(card20);
    player19.printStateGame();
    gameState7.addPlayer(player19);
    // The following exception was thrown during execution in test generation
    try {
    gameState7.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    boolean b16 = gameState15.isGameOver();
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    dominion.Card card20 = null;
    player19.trashCard(card20);
    player19.printStateGame();
    player19.playKingdomCard();
    dominion.Card card24 = null;
    player19.discard(card24);
    dominion.Card card26 = null;
    player19.trashCard(card26);
    player19.printStateGame();
    player19.playKingdomCard();
    player19.playKingdomCard();
    gameState15.addPlayer(player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "");
    dominion.Card card27 = null;
    player26.trashCard(card27);
    player26.printStateGame();
    gameState23.addPlayer(player26);
    dominion.GameState gameState31 = gameState23.clone();
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Curse;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName39);
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Steward;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName44);
    gameState31.cards = arraylist_card33;
    dominion.Card[] card_array48 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card49 = new java.util.ArrayList<dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card49, card_array48);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Steward;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card49, cardName51);
    dominion.Card.Type type53 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card49, type53);
    dominion.GameState gameState55 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Steward;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.Card.Type type61 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type61);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    gameState63.addPlayer(player66);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i71 = null;
    gameState63.embTokens = hashmap_card_i71;
    dominion.Card[] card_array73 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card74 = new java.util.ArrayList<dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card74, card_array73);
    dominion.Card.CardName cardName76 = dominion.Card.CardName.Steward;
    dominion.Card card77 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card74, cardName76);
    dominion.Card.Type type78 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card79 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card74, type78);
    dominion.GameState gameState80 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card74);
    dominion.GameState gameState81 = null;
    dominion.Player player83 = new dominion.Player(gameState81, "");
    dominion.Card card84 = null;
    player83.trashCard(card84);
    player83.printStateGame();
    gameState80.addPlayer(player83);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i88 = null;
    gameState80.embTokens = hashmap_card_i88;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i90 = gameState80.gameBoard;
    gameState63.embTokens = hashmap_card_i90;
    gameState55.gameBoard = hashmap_card_i90;
    gameState31.gameBoard = hashmap_card_i90;
    gameState15.embTokens = hashmap_card_i90;
    gameState7.gameBoard = hashmap_card_i90;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Curse + "'", cardName39.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Steward + "'", cardName44.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Steward + "'", cardName51.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + dominion.Card.Type.VICTORY + "'", type53.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Steward + "'", cardName59.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.VICTORY + "'", type61.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + dominion.Card.CardName.Steward + "'", cardName76.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    org.junit.Assert.assertTrue("'" + type78 + "' != '" + dominion.Card.Type.VICTORY + "'", type78.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i90);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Steward;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type19);
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type19);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    java.util.List<dominion.Card> list_card31 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card29, (java.lang.Integer)10);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Steward;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card31, type42);
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type42);
    java.util.List<dominion.Card> list_card48 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card8, (java.lang.Integer)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Steward + "'", cardName12.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Steward + "'", cardName40.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.VICTORY + "'", type42.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = gameState7.embTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i40);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    gameState7.players = arraylist_player88;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState7.embTokens;
    // The following exception was thrown during execution in test generation
    try {
    dominion.GameState gameState93 = gameState7.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.GameState gameState39 = new dominion.GameState(list_card38);
    gameState39.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card[] card_array5 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card6 = new java.util.ArrayList<dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card6, card_array5);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Steward;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card6, cardName8);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card6, type10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type10);
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.GameState gameState14 = new dominion.GameState(list_card12);
    dominion.Card card15 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card16 = gameState14.getGameboard(card15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Steward + "'", cardName8.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Player player11 = new dominion.Player(gameState9, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    int i1 = dominion.Randomness.nextRandomInt(13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 11);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Steward;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type26);
    gameState15.cards = arraylist_card17;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type35);
    dominion.Card[] card_array38 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card39 = new java.util.ArrayList<dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card39, card_array38);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Steward;
    dominion.Card card42 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card39, cardName41);
    dominion.Card.Type type43 = null;
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card39, type43);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Province;
    int i46 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card39, cardName45);
    int i47 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card37, cardName45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Steward + "'", cardName24.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.VICTORY + "'", type35.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Steward + "'", cardName41.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Province + "'", cardName45.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    dominion.Randomness.reset((long)(byte)0);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState15.embTokens;
    java.util.List<dominion.Card> list_card17 = gameState15.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    player2.buyCard();
    player2.playTtreasureCard();

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card10 = dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    dominion.GameState gameState18 = gameState7.clone();
    dominion.Player player20 = new dominion.Player(gameState7, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState15.embTokens;
    dominion.GameState gameState17 = gameState15.clone();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Curse;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.GameState gameState28 = gameState27.clone();
    java.util.List<dominion.Player> list_player29 = gameState28.players;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "");
    dominion.Card card41 = null;
    player40.trashCard(card41);
    player40.printStateGame();
    gameState37.addPlayer(player40);
    dominion.GameState gameState45 = gameState37.clone();
    dominion.Card[] card_array46 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card47 = new java.util.ArrayList<dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card47, card_array46);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Steward;
    dominion.Card card50 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card47, cardName49);
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Steward;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.Card.Type type56 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card57 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card52, type56);
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card47, type56);
    gameState45.cards = arraylist_card47;
    dominion.Card[] card_array60 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card61 = new java.util.ArrayList<dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card61, card_array60);
    dominion.Card.CardName cardName63 = dominion.Card.CardName.Steward;
    dominion.Card card64 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card61, cardName63);
    dominion.Card.Type type65 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card66 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card61, type65);
    dominion.GameState gameState67 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card61);
    dominion.GameState gameState68 = null;
    dominion.Player player70 = new dominion.Player(gameState68, "");
    dominion.Card card71 = null;
    player70.trashCard(card71);
    player70.printStateGame();
    gameState67.addPlayer(player70);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i75 = null;
    gameState67.embTokens = hashmap_card_i75;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i77 = gameState67.gameBoard;
    gameState45.embTokens = hashmap_card_i77;
    gameState28.embTokens = hashmap_card_i77;
    gameState17.gameBoard = hashmap_card_i77;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.VICTORY + "'", type23.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Curse + "'", cardName25.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.VICTORY + "'", type35.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Steward + "'", cardName49.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Steward + "'", cardName54.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + dominion.Card.Type.VICTORY + "'", type56.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Steward + "'", cardName63.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + dominion.Card.Type.VICTORY + "'", type65.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i77);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    gameState7.players = arraylist_player88;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.printStateGame();
    dominion.Card card12 = null;
    player2.discard(card12);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card[] card_array5 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card6 = new java.util.ArrayList<dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card6, card_array5);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Steward;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card6, cardName8);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card6, type10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Silver;
    int i14 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card12, cardName13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Steward + "'", cardName8.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Silver + "'", cardName13.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.List<dominion.Card> list_card34 = null;
    gameState26.cards = list_card34;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    player38.printStateGame();
    gameState26.addPlayer(player38);
    dominion.Card card47 = null;
    player38.trashCard(card47);
    gameState17.addPlayer(player38);
    dominion.Card card50 = null;
    player38.discard(card50);
    player38.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card[] card_array5 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card6 = new java.util.ArrayList<dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card6, card_array5);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Steward;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card6, cardName8);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card6, type10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type10);
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    gameState21.addPlayer(player24);
    java.util.List<dominion.Card> list_card29 = null;
    gameState21.cards = list_card29;
    dominion.Player player32 = new dominion.Player(gameState21, "");
    dominion.Player player34 = new dominion.Player(gameState21, "");
    dominion.Card card35 = null;
    player34.discard(card35);
    gameState13.addPlayer(player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Steward + "'", cardName8.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    java.util.List<dominion.Card> list_card24 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card22, (java.lang.Integer)10);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Cutpurse;
    dominion.Card card26 = dominion.Card.getCard(list_card22, cardName25);
    java.util.List<dominion.Card> list_card28 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card22, (java.lang.Integer)100);
    gameState7.cards = list_card22;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName25.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Player player18 = new dominion.Player(gameState15, "hi!");
    player18.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    dominion.Randomness.totalCallsToRandom = (byte)10;

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card33);
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Steward;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.Card.Type type45 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card41, type45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "");
    dominion.Card card51 = null;
    player50.trashCard(card51);
    player50.printStateGame();
    gameState47.addPlayer(player50);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i55 = null;
    gameState47.embTokens = hashmap_card_i55;
    dominion.Card[] card_array57 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card58 = new java.util.ArrayList<dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card58, card_array57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Steward;
    dominion.Card card61 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card58, cardName60);
    dominion.Card.Type type62 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card63 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card58, type62);
    dominion.GameState gameState64 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "");
    dominion.Card card68 = null;
    player67.trashCard(card68);
    player67.printStateGame();
    gameState64.addPlayer(player67);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i72 = null;
    gameState64.embTokens = hashmap_card_i72;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = gameState64.gameBoard;
    gameState47.embTokens = hashmap_card_i74;
    gameState39.gameBoard = hashmap_card_i74;
    gameState15.gameBoard = hashmap_card_i74;
    java.util.List<dominion.Card> list_card78 = gameState15.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Steward + "'", cardName43.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.VICTORY + "'", type45.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Steward + "'", cardName60.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + dominion.Card.Type.VICTORY + "'", type62.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    int i11 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card6, cardName10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    java.util.List<dominion.Card> list_card10 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)(-1));
    java.util.List<dominion.Card> list_card12 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    player21.playKingdomCard();
    dominion.Card card26 = null;
    player21.discard(card26);
    player21.printStateGame();
    dominion.Card card29 = null;
    player21.discard(card29);
    gameState7.addPlayer(player21);
    java.util.List<dominion.Player> list_player32 = gameState7.players;
    dominion.Card card33 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card34 = gameState7.getGameboard(card33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Steward;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "");
    dominion.Card card23 = null;
    player22.trashCard(card23);
    player22.printStateGame();
    gameState19.addPlayer(player22);
    dominion.GameState gameState27 = gameState19.clone();
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Steward;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Steward;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.Type type38 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type38);
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type38);
    gameState27.cards = arraylist_card29;
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Steward;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.Card.Type type47 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.GameState gameState50 = null;
    dominion.Player player52 = new dominion.Player(gameState50, "");
    dominion.Card card53 = null;
    player52.trashCard(card53);
    player52.printStateGame();
    gameState49.addPlayer(player52);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i57 = null;
    gameState49.embTokens = hashmap_card_i57;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i59 = gameState49.gameBoard;
    gameState27.embTokens = hashmap_card_i59;
    gameState10.embTokens = hashmap_card_i59;
    dominion.Card card62 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card63 = gameState10.getGameboard(card62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Steward + "'", cardName15.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Steward + "'", cardName31.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Steward + "'", cardName36.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.VICTORY + "'", type38.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Steward + "'", cardName45.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + dominion.Card.Type.VICTORY + "'", type47.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i59);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Player player18 = new dominion.Player(gameState16, "");
    player18.playKingdomCard();
    dominion.Card card20 = null;
    player18.trashCard(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Steward;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type26);
    gameState15.cards = arraylist_card17;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState15.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Steward + "'", cardName24.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.printStateGame();
    dominion.Card card12 = null;
    player2.trashCard(card12);
    player2.playTtreasureCard();

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    dominion.Randomness.reset(0L);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    dominion.Randomness.totalCallsToRandom = 100;

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState7.getWinners();
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    dominion.Card card20 = null;
    player19.trashCard(card20);
    player19.printStateGame();
    gameState7.addPlayer(player19);
    player19.printStateGame();
    dominion.Card card25 = null;
    player19.discard(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    java.util.List<dominion.Card> list_card17 = gameState7.cards;
    java.util.List<dominion.Card> list_card18 = gameState7.cards;
    java.util.List<dominion.Player> list_player19 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    dominion.Card card20 = null;
    player19.trashCard(card20);
    player19.printStateGame();
    player19.playKingdomCard();
    dominion.Card card24 = null;
    player19.discard(card24);
    player19.printStateGame();
    gameState7.addPlayer(player19);
    dominion.Card card28 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card29 = gameState7.getGameboard(card28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    dominion.Randomness.reset((long)(byte)100);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    gameState7.players = arraylist_player88;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState7.embTokens;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i93 = gameState7.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = null;
    gameState15.embTokens = hashmap_card_i23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "");
    dominion.Card card36 = null;
    player35.trashCard(card36);
    player35.printStateGame();
    gameState32.addPlayer(player35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = null;
    gameState32.embTokens = hashmap_card_i40;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState32.gameBoard;
    gameState15.embTokens = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState7.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState7.getWinners();
    dominion.Card[] card_array47 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card48 = new java.util.ArrayList<dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card48, card_array47);
    dominion.Card.CardName cardName50 = dominion.Card.CardName.Steward;
    dominion.Card card51 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card48, cardName50);
    dominion.Card.Type type52 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card48, type52);
    dominion.GameState gameState54 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card48);
    dominion.GameState gameState55 = null;
    dominion.Player player57 = new dominion.Player(gameState55, "");
    dominion.Card card58 = null;
    player57.trashCard(card58);
    player57.printStateGame();
    gameState54.addPlayer(player57);
    gameState54.initializeGame();
    dominion.GameState gameState63 = gameState54.clone();
    dominion.Player player65 = new dominion.Player(gameState63, "");
    player65.playKingdomCard();
    gameState7.addPlayer(player65);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i68 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i69 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.VICTORY + "'", type30.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + dominion.Card.CardName.Steward + "'", cardName50.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    org.junit.Assert.assertTrue("'" + type52 + "' != '" + dominion.Card.Type.VICTORY + "'", type52.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i69);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    java.util.List<dominion.Card> list_card22 = gameState7.cards;
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Mine;
    int i24 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card22, cardName23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Ambassador;
    dominion.Card card26 = dominion.Card.getCard(list_card22, cardName25);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Steward;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = null;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Steward;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Steward;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Village;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName47);
    int i49 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card28, cardName47);
    dominion.Card card50 = dominion.Card.getCard(list_card22, cardName47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Mine + "'", cardName23.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName25.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Steward + "'", cardName30.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Steward + "'", cardName37.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Steward + "'", cardName42.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.VICTORY + "'", type44.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Village + "'", cardName47.equals(dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    dominion.Player player74 = dominion.Randomness.randomMember((java.util.List<dominion.Player>)arraylist_player71);
    player74.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player74);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    java.util.List<dominion.Card> list_card0 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card1 = dominion.Randomness.randomMember(list_card0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = null;
    gameState15.embTokens = hashmap_card_i23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "");
    dominion.Card card36 = null;
    player35.trashCard(card36);
    player35.printStateGame();
    gameState32.addPlayer(player35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = null;
    gameState32.embTokens = hashmap_card_i40;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState32.gameBoard;
    gameState15.embTokens = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    dominion.GameState gameState45 = null;
    dominion.Player player47 = new dominion.Player(gameState45, "");
    dominion.Card card48 = null;
    player47.trashCard(card48);
    player47.printStateGame();
    player47.playKingdomCard();
    player47.printStateGame();
    gameState7.addPlayer(player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.VICTORY + "'", type30.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState15.embTokens;
    dominion.Player player34 = new dominion.Player(gameState15, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    dominion.Randomness.reset((long)(short)-1);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.printStateGame();
    player2.playTtreasureCard();
    player2.buyCard();

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    gameState9.cards = arraylist_card11;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    gameState21.addPlayer(player24);
    gameState21.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState21.getWinners();
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "");
    dominion.Card card34 = null;
    player33.trashCard(card34);
    player33.printStateGame();
    gameState21.addPlayer(player33);
    gameState9.addPlayer(player33);
    boolean b39 = gameState9.isGameOver();
    boolean b40 = gameState9.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    int i1 = dominion.Randomness.nextRandomInt(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.buyCard();
    dominion.Card card7 = null;
    player2.trashCard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.playKingdomCard();
    player2.playTtreasureCard();

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Player player18 = new dominion.Player(gameState16, "");
    player18.printStateGame();
    player18.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState9.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState9.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    dominion.Randomness.totalCallsToRandom = 3;

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Steward;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    gameState46.addPlayer(player49);
    dominion.GameState gameState54 = gameState46.clone();
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Steward;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card[] card_array60 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card61 = new java.util.ArrayList<dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card61, card_array60);
    dominion.Card.CardName cardName63 = dominion.Card.CardName.Steward;
    dominion.Card card64 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card61, cardName63);
    dominion.Card.Type type65 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card66 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card61, type65);
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type65);
    gameState54.cards = arraylist_card56;
    dominion.Card[] card_array69 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card70 = new java.util.ArrayList<dominion.Card>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card70, card_array69);
    dominion.Card.CardName cardName72 = dominion.Card.CardName.Steward;
    dominion.Card card73 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card70, cardName72);
    dominion.Card.Type type74 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card70, type74);
    java.util.List<dominion.Card> list_card76 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type74);
    gameState7.cards = list_card76;
    gameState7.initializeGame();
    java.util.List<dominion.Card> list_card79 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Steward + "'", cardName42.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.VICTORY + "'", type44.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Steward + "'", cardName58.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Steward + "'", cardName63.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + dominion.Card.Type.VICTORY + "'", type65.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + dominion.Card.CardName.Steward + "'", cardName72.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card73);
    org.junit.Assert.assertTrue("'" + type74 + "' != '" + dominion.Card.Type.VICTORY + "'", type74.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.playTtreasureCard();
    dominion.Card card12 = null;
    player2.trashCard(card12);
    dominion.Card card14 = null;
    player2.discard(card14);
    dominion.Card card16 = null;
    player2.trashCard(card16);
    dominion.Card card18 = null;
    player2.discard(card18);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Player> list_player16 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    dominion.Randomness.totalCallsToRandom = (-1);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    player10.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    dominion.Randomness.totalCallsToRandom = '#';

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    int i1 = dominion.Randomness.nextRandomInt(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type34 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + dominion.Card.Type.VICTORY + "'", type34.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.playTtreasureCard();
    player2.playTtreasureCard();
    player2.buyCard();

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Steward;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    dominion.Card card35 = null;
    player34.trashCard(card35);
    player34.printStateGame();
    gameState31.addPlayer(player34);
    dominion.GameState gameState39 = gameState31.clone();
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Steward;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.Card.Type type45 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card41, type45);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Curse;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName47);
    dominion.Card[] card_array49 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card50 = new java.util.ArrayList<dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card50, card_array49);
    dominion.Card.CardName cardName52 = dominion.Card.CardName.Steward;
    dominion.Card card53 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card50, cardName52);
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName52);
    gameState39.cards = arraylist_card41;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState39.embTokens;
    gameState7.embTokens = hashmap_card_i56;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Steward + "'", cardName27.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.VICTORY + "'", type29.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Steward + "'", cardName43.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.VICTORY + "'", type45.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Curse + "'", cardName47.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + dominion.Card.CardName.Steward + "'", cardName52.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card24, (java.lang.Integer)10);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Steward;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type37);
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card26, type37);
    gameState17.cards = list_card40;
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Steward;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.Card.Type type47 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.GameState gameState50 = null;
    dominion.Player player52 = new dominion.Player(gameState50, "");
    dominion.Card card53 = null;
    player52.trashCard(card53);
    player52.printStateGame();
    gameState49.addPlayer(player52);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i57 = null;
    gameState49.embTokens = hashmap_card_i57;
    dominion.Card[] card_array59 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card60 = new java.util.ArrayList<dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card60, card_array59);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Steward;
    dominion.Card card63 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card60, cardName62);
    dominion.Card.Type type64 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card60, type64);
    dominion.GameState gameState66 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.GameState gameState67 = null;
    dominion.Player player69 = new dominion.Player(gameState67, "");
    dominion.Card card70 = null;
    player69.trashCard(card70);
    player69.printStateGame();
    gameState66.addPlayer(player69);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = null;
    gameState66.embTokens = hashmap_card_i74;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState66.gameBoard;
    gameState49.embTokens = hashmap_card_i76;
    gameState17.gameBoard = hashmap_card_i76;
    java.util.List<dominion.Card> list_card79 = gameState17.cards;
    dominion.GameState gameState80 = new dominion.GameState(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.VICTORY + "'", type23.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Steward + "'", cardName30.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Steward + "'", cardName45.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + dominion.Card.Type.VICTORY + "'", type47.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Steward + "'", cardName62.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + dominion.Card.Type.VICTORY + "'", type64.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.List<dominion.Card> list_card34 = null;
    gameState26.cards = list_card34;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    player38.printStateGame();
    gameState26.addPlayer(player38);
    dominion.Card card47 = null;
    player38.trashCard(card47);
    gameState17.addPlayer(player38);
    dominion.Card[] card_array50 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card51 = new java.util.ArrayList<dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card51, card_array50);
    dominion.Card.CardName cardName53 = dominion.Card.CardName.Steward;
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card51, cardName53);
    dominion.Card.Type type55 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card56 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card51, type55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card51);
    dominion.GameState gameState58 = null;
    dominion.Player player60 = new dominion.Player(gameState58, "");
    dominion.Card card61 = null;
    player60.trashCard(card61);
    player60.printStateGame();
    gameState57.addPlayer(player60);
    dominion.GameState gameState65 = gameState57.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i66 = gameState65.embTokens;
    gameState17.embTokens = hashmap_card_i66;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + dominion.Card.CardName.Steward + "'", cardName53.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + type55 + "' != '" + dominion.Card.Type.VICTORY + "'", type55.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i66);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Steward;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    java.util.List<dominion.Card> list_card18 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card16, (java.lang.Integer)10);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Steward;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type29);
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type29);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard(list_card32, cardName33);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Estate;
    dominion.Card card36 = dominion.Card.getCard(list_card32, cardName35);
    int i37 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card6, cardName35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Steward + "'", cardName13.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.VICTORY + "'", type15.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Steward + "'", cardName27.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.VICTORY + "'", type29.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Estate + "'", cardName35.equals(dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    dominion.Randomness.totalCallsToRandom = 'a';

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Steward;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    dominion.GameState gameState18 = null;
    dominion.Player player20 = new dominion.Player(gameState18, "");
    dominion.Card card21 = null;
    player20.trashCard(card21);
    player20.printStateGame();
    gameState17.addPlayer(player20);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = null;
    gameState17.embTokens = hashmap_card_i25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i27 = gameState17.gameBoard;
    gameState9.embTokens = hashmap_card_i27;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState9.getWinners();
    dominion.Card card30 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card31 = gameState9.getGameboard(card30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Steward + "'", cardName13.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.VICTORY + "'", type15.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.GameState gameState10 = new dominion.GameState(list_card6);
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Steward;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    gameState18.addPlayer(player21);
    dominion.GameState gameState26 = gameState18.clone();
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Steward;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Curse;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName34);
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Steward;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName39);
    gameState26.cards = arraylist_card28;
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Steward;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Steward;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.Card.Type type56 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card57 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card52, type56);
    dominion.GameState gameState58 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.GameState gameState59 = null;
    dominion.Player player61 = new dominion.Player(gameState59, "");
    dominion.Card card62 = null;
    player61.trashCard(card62);
    player61.printStateGame();
    gameState58.addPlayer(player61);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i66 = null;
    gameState58.embTokens = hashmap_card_i66;
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Steward;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.Card.Type type73 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card69, type73);
    dominion.GameState gameState75 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    dominion.GameState gameState76 = null;
    dominion.Player player78 = new dominion.Player(gameState76, "");
    dominion.Card card79 = null;
    player78.trashCard(card79);
    player78.printStateGame();
    gameState75.addPlayer(player78);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i83 = null;
    gameState75.embTokens = hashmap_card_i83;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i85 = gameState75.gameBoard;
    gameState58.embTokens = hashmap_card_i85;
    gameState50.gameBoard = hashmap_card_i85;
    gameState26.gameBoard = hashmap_card_i85;
    gameState10.embTokens = hashmap_card_i85;
    java.util.List<dominion.Player> list_player90 = gameState10.players;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player91 = dominion.Randomness.randomMember(list_player90);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Steward + "'", cardName14.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.VICTORY + "'", type16.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Steward + "'", cardName30.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.VICTORY + "'", type32.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Curse + "'", cardName34.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Steward + "'", cardName39.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Steward + "'", cardName46.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.VICTORY + "'", type48.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Steward + "'", cardName54.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + dominion.Card.Type.VICTORY + "'", type56.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Steward + "'", cardName71.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.VICTORY + "'", type73.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player90);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.playTtreasureCard();
    dominion.Card card12 = null;
    player2.trashCard(card12);
    dominion.Card card14 = null;
    player2.discard(card14);
    player2.buyCard();

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    java.util.List<dominion.Player> list_player17 = gameState7.players;
    dominion.Card card18 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card19 = gameState7.getGameboard(card18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    gameState7.initializeGame();
    boolean b24 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    dominion.Randomness.reset((long)100);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    boolean b12 = gameState10.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    boolean b17 = gameState15.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Player player18 = new dominion.Player(gameState15, "hi!");
    player18.printStateGame();
    player18.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.checkPrice(iterable_card0, (java.lang.Integer)3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    boolean b16 = gameState15.isGameOver();
    dominion.Card card17 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card18 = gameState15.getGameboard(card17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    int i1 = dominion.Randomness.nextRandomInt((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 43);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState16.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState7.play();
    java.util.List<dominion.Card> list_card40 = gameState7.cards;
    dominion.GameState gameState41 = new dominion.GameState(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.getWinners();
    boolean b21 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    java.util.List<dominion.Card> list_card22 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    player24.playKingdomCard();
    dominion.Card card29 = null;
    player24.discard(card29);
    dominion.Card card31 = null;
    player24.discard(card31);
    player24.playTtreasureCard();
    dominion.Card card34 = null;
    player24.discard(card34);
    player24.playTtreasureCard();
    gameState7.addPlayer(player24);
    player24.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "");
    dominion.Card card34 = null;
    player33.trashCard(card34);
    player33.printStateGame();
    gameState30.addPlayer(player33);
    java.util.List<dominion.Card> list_card38 = null;
    gameState30.cards = list_card38;
    dominion.Player player41 = new dominion.Player(gameState30, "");
    dominion.GameState gameState42 = null;
    dominion.Player player44 = new dominion.Player(gameState42, "");
    dominion.Card card45 = null;
    player44.trashCard(card45);
    player44.printStateGame();
    player44.playKingdomCard();
    dominion.Card card49 = null;
    player44.discard(card49);
    player44.printStateGame();
    dominion.Card card52 = null;
    player44.discard(card52);
    gameState30.addPlayer(player44);
    java.util.List<dominion.Player> list_player55 = gameState30.players;
    gameState22.players = list_player55;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player55);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b10 = gameState9.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState9.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card24, (java.lang.Integer)10);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Steward;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type37);
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card26, type37);
    gameState17.cards = list_card40;
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Steward;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.Card.Type type47 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.GameState gameState50 = null;
    dominion.Player player52 = new dominion.Player(gameState50, "");
    dominion.Card card53 = null;
    player52.trashCard(card53);
    player52.printStateGame();
    gameState49.addPlayer(player52);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i57 = null;
    gameState49.embTokens = hashmap_card_i57;
    dominion.Card[] card_array59 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card60 = new java.util.ArrayList<dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card60, card_array59);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Steward;
    dominion.Card card63 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card60, cardName62);
    dominion.Card.Type type64 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card60, type64);
    dominion.GameState gameState66 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.GameState gameState67 = null;
    dominion.Player player69 = new dominion.Player(gameState67, "");
    dominion.Card card70 = null;
    player69.trashCard(card70);
    player69.printStateGame();
    gameState66.addPlayer(player69);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = null;
    gameState66.embTokens = hashmap_card_i74;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState66.gameBoard;
    gameState49.embTokens = hashmap_card_i76;
    gameState17.gameBoard = hashmap_card_i76;
    java.util.List<dominion.Card> list_card79 = gameState17.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i80 = gameState17.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.VICTORY + "'", type23.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Steward + "'", cardName30.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Steward + "'", cardName45.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + dominion.Card.Type.VICTORY + "'", type47.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Steward + "'", cardName62.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + dominion.Card.Type.VICTORY + "'", type64.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i80);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    gameState9.cards = arraylist_card11;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    gameState21.addPlayer(player24);
    dominion.GameState gameState29 = gameState21.clone();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Steward;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type40);
    gameState29.cards = arraylist_card31;
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Steward;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.Card.Type type49 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card45, type49);
    java.util.List<dominion.Card> list_card51 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type49);
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type49);
    dominion.Card[] card_array53 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card54 = new java.util.ArrayList<dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card54, card_array53);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Steward;
    dominion.Card card57 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card54, cardName56);
    dominion.Card.Type type58 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card54, type58);
    java.util.List<dominion.Card> list_card61 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card59, (java.lang.Integer)10);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Cutpurse;
    dominion.Card card63 = dominion.Card.getCard(list_card59, cardName62);
    dominion.Card card64 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Steward + "'", cardName38.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.VICTORY + "'", type40.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Steward + "'", cardName47.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + dominion.Card.Type.VICTORY + "'", type49.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Steward + "'", cardName56.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.VICTORY + "'", type58.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName62.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card34 = dominion.Randomness.randomMember((java.util.List<dominion.Card>)arraylist_card17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState24.embTokens = hashmap_card_i32;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState24.gameBoard;
    gameState7.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState7.embTokens;
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Steward;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = null;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Adventurer;
    dominion.Card card45 = dominion.Card.getCard(list_card43, cardName44);
    dominion.GameState gameState46 = new dominion.GameState(list_card43);
    dominion.Card.Type type47 = null;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card43, type47);
    gameState7.cards = list_card43;
    dominion.GameState gameState50 = new dominion.GameState(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Steward + "'", cardName40.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName44.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    dominion.Randomness.reset((long)'#');

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.printStateGame();
    player2.playTtreasureCard();
    player2.printStateGame();

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState24.embTokens = hashmap_card_i32;
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Steward;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    dominion.GameState gameState42 = null;
    dominion.Player player44 = new dominion.Player(gameState42, "");
    dominion.Card card45 = null;
    player44.trashCard(card45);
    player44.printStateGame();
    gameState41.addPlayer(player44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = null;
    gameState41.embTokens = hashmap_card_i49;
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Steward;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.Card.Type type56 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card57 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card52, type56);
    dominion.GameState gameState58 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.GameState gameState59 = null;
    dominion.Player player61 = new dominion.Player(gameState59, "");
    dominion.Card card62 = null;
    player61.trashCard(card62);
    player61.printStateGame();
    gameState58.addPlayer(player61);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i66 = null;
    gameState58.embTokens = hashmap_card_i66;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i68 = gameState58.gameBoard;
    gameState41.embTokens = hashmap_card_i68;
    gameState24.gameBoard = hashmap_card_i68;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i71 = gameState24.gameBoard;
    gameState7.embTokens = hashmap_card_i71;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Steward + "'", cardName37.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.VICTORY + "'", type39.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Steward + "'", cardName54.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + dominion.Card.Type.VICTORY + "'", type56.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i71);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    player21.playKingdomCard();
    dominion.Card card26 = null;
    player21.discard(card26);
    player21.printStateGame();
    dominion.Card card29 = null;
    player21.discard(card29);
    gameState7.addPlayer(player21);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    dominion.Card card35 = null;
    player34.trashCard(card35);
    player34.printStateGame();
    player34.playKingdomCard();
    dominion.Card card39 = null;
    player34.discard(card39);
    player34.printStateGame();
    dominion.Card card42 = null;
    player34.discard(card42);
    player34.playTtreasureCard();
    player34.buyCard();
    player34.playKingdomCard();
    player34.playTtreasureCard();
    gameState7.addPlayer(player34);
    dominion.Card[] card_array49 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card50 = new java.util.ArrayList<dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card50, card_array49);
    dominion.Card.CardName cardName52 = dominion.Card.CardName.Steward;
    dominion.Card card53 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card50, cardName52);
    dominion.Card.Type type54 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card55 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card50, type54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card50);
    dominion.GameState gameState57 = null;
    dominion.Player player59 = new dominion.Player(gameState57, "");
    dominion.Card card60 = null;
    player59.trashCard(card60);
    player59.printStateGame();
    gameState56.addPlayer(player59);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = null;
    gameState56.embTokens = hashmap_card_i64;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i66 = gameState56.gameBoard;
    dominion.GameState gameState67 = gameState56.clone();
    java.util.List<dominion.Player> list_player68 = gameState67.players;
    gameState7.players = list_player68;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + dominion.Card.CardName.Steward + "'", cardName52.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + dominion.Card.Type.VICTORY + "'", type54.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player68);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState7.gameBoard;
    dominion.GameState gameState18 = gameState7.clone();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Curse;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    boolean b29 = gameState28.isGameOver();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "");
    dominion.Card card41 = null;
    player40.trashCard(card41);
    player40.printStateGame();
    gameState37.addPlayer(player40);
    java.util.List<dominion.Card> list_card45 = null;
    gameState37.cards = list_card45;
    java.util.List<dominion.Card> list_card47 = gameState37.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState37.embTokens;
    gameState28.embTokens = hashmap_card_i48;
    gameState18.gameBoard = hashmap_card_i48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Curse + "'", cardName26.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.VICTORY + "'", type35.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Steward;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.Card.Type type45 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card41, type45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "");
    dominion.Card card51 = null;
    player50.trashCard(card51);
    player50.printStateGame();
    gameState47.addPlayer(player50);
    gameState47.initializeGame();
    dominion.GameState gameState56 = gameState47.clone();
    dominion.GameState gameState57 = gameState47.clone();
    gameState47.initializeGame();
    dominion.Card[] card_array59 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card60 = new java.util.ArrayList<dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card60, card_array59);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Steward;
    dominion.Card card63 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card60, cardName62);
    dominion.Card.Type type64 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card60, type64);
    dominion.GameState gameState66 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.GameState gameState67 = null;
    dominion.Player player69 = new dominion.Player(gameState67, "");
    dominion.Card card70 = null;
    player69.trashCard(card70);
    player69.printStateGame();
    gameState66.addPlayer(player69);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = null;
    gameState66.embTokens = hashmap_card_i74;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState66.gameBoard;
    gameState47.embTokens = hashmap_card_i76;
    java.util.List<dominion.Card> list_card78 = gameState47.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i79 = gameState47.gameBoard;
    gameState39.embTokens = hashmap_card_i79;
    dominion.Card[] card_array81 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card82 = new java.util.ArrayList<dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card82, card_array81);
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Steward;
    dominion.Card card85 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card82, cardName84);
    dominion.Card.Type type86 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card87 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card82, type86);
    dominion.Card.Type type88 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card89 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card87, type88);
    gameState39.cards = list_card89;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i91 = gameState39.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Steward + "'", cardName43.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.VICTORY + "'", type45.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Steward + "'", cardName62.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + dominion.Card.Type.VICTORY + "'", type64.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Steward + "'", cardName84.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    org.junit.Assert.assertTrue("'" + type86 + "' != '" + dominion.Card.Type.VICTORY + "'", type86.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    org.junit.Assert.assertTrue("'" + type88 + "' != '" + dominion.Card.Type.TREASURE + "'", type88.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i91);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState10.embTokens;
    gameState10.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 52);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState24.embTokens = hashmap_card_i32;
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Steward;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    dominion.GameState gameState42 = null;
    dominion.Player player44 = new dominion.Player(gameState42, "");
    dominion.Card card45 = null;
    player44.trashCard(card45);
    player44.printStateGame();
    gameState41.addPlayer(player44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = null;
    gameState41.embTokens = hashmap_card_i49;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState41.gameBoard;
    gameState24.embTokens = hashmap_card_i51;
    gameState7.gameBoard = hashmap_card_i51;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i54 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i55 = gameState7.embTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Steward + "'", cardName37.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.VICTORY + "'", type39.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(hashmap_card_i55);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = gameState15.clone();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Steward;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.Type type38 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    dominion.GameState gameState41 = null;
    dominion.Player player43 = new dominion.Player(gameState41, "");
    dominion.Card card44 = null;
    player43.trashCard(card44);
    player43.printStateGame();
    gameState40.addPlayer(player43);
    gameState40.initializeGame();
    dominion.GameState gameState49 = gameState40.clone();
    dominion.GameState gameState50 = gameState40.clone();
    gameState40.initializeGame();
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Steward;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.Card.Type type57 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.GameState gameState60 = null;
    dominion.Player player62 = new dominion.Player(gameState60, "");
    dominion.Card card63 = null;
    player62.trashCard(card63);
    player62.printStateGame();
    gameState59.addPlayer(player62);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i67 = null;
    gameState59.embTokens = hashmap_card_i67;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i69 = gameState59.gameBoard;
    gameState40.embTokens = hashmap_card_i69;
    gameState32.embTokens = hashmap_card_i69;
    dominion.Player player73 = new dominion.Player(gameState32, "");
    java.util.List<dominion.Player> list_player74 = gameState32.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Steward + "'", cardName36.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.VICTORY + "'", type38.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Steward + "'", cardName55.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + dominion.Card.Type.VICTORY + "'", type57.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player74);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    gameState7.players = arraylist_player88;
    dominion.Player player92 = dominion.Randomness.randomMember((java.util.List<dominion.Player>)arraylist_player88);
    dominion.Card card93 = null;
    player92.discard(card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player92);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Steward;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    gameState46.addPlayer(player49);
    dominion.GameState gameState54 = gameState46.clone();
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Steward;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card[] card_array60 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card61 = new java.util.ArrayList<dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card61, card_array60);
    dominion.Card.CardName cardName63 = dominion.Card.CardName.Steward;
    dominion.Card card64 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card61, cardName63);
    dominion.Card.Type type65 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card66 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card61, type65);
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type65);
    gameState54.cards = arraylist_card56;
    dominion.Card[] card_array69 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card70 = new java.util.ArrayList<dominion.Card>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card70, card_array69);
    dominion.Card.CardName cardName72 = dominion.Card.CardName.Steward;
    dominion.Card card73 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card70, cardName72);
    dominion.Card.Type type74 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card70, type74);
    java.util.List<dominion.Card> list_card76 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type74);
    gameState7.cards = list_card76;
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i79 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Steward + "'", cardName42.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.VICTORY + "'", type44.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Steward + "'", cardName58.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Steward + "'", cardName63.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + dominion.Card.Type.VICTORY + "'", type65.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + dominion.Card.CardName.Steward + "'", cardName72.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card73);
    org.junit.Assert.assertTrue("'" + type74 + "' != '" + dominion.Card.Type.VICTORY + "'", type74.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i79);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.GameState gameState39 = null;
    dominion.Player player41 = new dominion.Player(gameState39, "");
    gameState7.addPlayer(player41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    player24.playKingdomCard();
    dominion.Card card29 = null;
    player24.discard(card29);
    dominion.Card card31 = null;
    player24.discard(card31);
    player24.playTtreasureCard();
    dominion.Card card34 = null;
    player24.discard(card34);
    player24.playTtreasureCard();
    gameState7.addPlayer(player24);
    player24.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player17.playKingdomCard();
    gameState7.addPlayer(player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState7.getWinners();
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    dominion.Card card20 = null;
    player19.trashCard(card20);
    player19.printStateGame();
    gameState7.addPlayer(player19);
    dominion.Card card24 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card25 = gameState7.getGameboard(card24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Steward;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type19);
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type19);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    java.util.List<dominion.Card> list_card31 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card29, (java.lang.Integer)10);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Steward;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card31, type42);
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type42);
    dominion.Card[] card_array47 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card48 = new java.util.ArrayList<dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card48, card_array47);
    dominion.Card.CardName cardName50 = dominion.Card.CardName.Steward;
    dominion.Card card51 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card48, cardName50);
    dominion.Card.Type type52 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card48, type52);
    dominion.GameState gameState54 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card48);
    dominion.GameState gameState55 = null;
    dominion.Player player57 = new dominion.Player(gameState55, "");
    dominion.Card card58 = null;
    player57.trashCard(card58);
    player57.printStateGame();
    player57.buyCard();
    gameState54.addPlayer(player57);
    dominion.Card[] card_array63 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card64 = new java.util.ArrayList<dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card64, card_array63);
    dominion.Card.CardName cardName66 = dominion.Card.CardName.Steward;
    dominion.Card card67 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card64, cardName66);
    gameState54.cards = arraylist_card64;
    java.util.List<dominion.Card> list_card69 = gameState54.cards;
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Mine;
    int i71 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card69, cardName70);
    dominion.Card.CardName cardName72 = dominion.Card.CardName.Ambassador;
    dominion.Card card73 = dominion.Card.getCard(list_card69, cardName72);
    dominion.Card[] card_array74 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card75 = new java.util.ArrayList<dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card75, card_array74);
    dominion.Card.CardName cardName77 = dominion.Card.CardName.Steward;
    dominion.Card card78 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card75, cardName77);
    dominion.Card.Type type79 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card80 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card75, type79);
    dominion.Card.Type type81 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card80, type81);
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card69, type81);
    java.util.List<dominion.Card> list_card84 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Steward + "'", cardName12.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Steward + "'", cardName40.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.VICTORY + "'", type42.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + dominion.Card.CardName.Steward + "'", cardName50.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    org.junit.Assert.assertTrue("'" + type52 + "' != '" + dominion.Card.Type.VICTORY + "'", type52.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + dominion.Card.CardName.Steward + "'", cardName66.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Mine + "'", cardName70.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName72.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + dominion.Card.CardName.Steward + "'", cardName77.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    org.junit.Assert.assertTrue("'" + type79 + "' != '" + dominion.Card.Type.VICTORY + "'", type79.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + dominion.Card.Type.TREASURE + "'", type81.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState15.embTokens;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState15.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b10 = gameState9.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Steward;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    gameState18.addPlayer(player21);
    java.util.List<dominion.Card> list_card26 = null;
    gameState18.cards = list_card26;
    java.util.List<dominion.Card> list_card28 = gameState18.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState18.embTokens;
    gameState9.embTokens = hashmap_card_i29;
    boolean b31 = gameState9.isGameOver();
    java.util.List<dominion.Card> list_card32 = gameState9.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Steward + "'", cardName14.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.VICTORY + "'", type16.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Steward;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type19);
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type19);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    java.util.List<dominion.Card> list_card31 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card29, (java.lang.Integer)10);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Steward;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card31, type42);
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type42);
    dominion.GameState gameState47 = new dominion.GameState(list_card46);
    dominion.Card[] card_array48 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card49 = new java.util.ArrayList<dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card49, card_array48);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Steward;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card49, cardName51);
    dominion.Card.Type type53 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card49, type53);
    dominion.GameState gameState55 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    gameState55.addPlayer(player58);
    dominion.Card[] card_array64 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card65 = new java.util.ArrayList<dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card65, card_array64);
    dominion.Card.CardName cardName67 = dominion.Card.CardName.Steward;
    dominion.Card card68 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card65, cardName67);
    gameState55.cards = arraylist_card65;
    java.util.List<dominion.Card> list_card70 = gameState55.cards;
    dominion.GameState gameState71 = gameState55.clone();
    java.util.List<dominion.Player> list_player72 = gameState55.players;
    gameState47.players = list_player72;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Steward + "'", cardName12.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Steward + "'", cardName40.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.VICTORY + "'", type42.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Steward + "'", cardName51.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + dominion.Card.Type.VICTORY + "'", type53.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + dominion.Card.CardName.Steward + "'", cardName67.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player72);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    java.util.List<dominion.Card> list_card17 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState7.embTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState7.embTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    dominion.Randomness.reset((long)38);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    java.util.List<dominion.Card> list_card19 = gameState17.cards;
    dominion.Card card20 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card21 = gameState17.getGameboard(card20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState15.embTokens;
    dominion.GameState gameState17 = gameState15.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState17.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    java.util.List<dominion.Card> list_card34 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)arraylist_card17, (java.lang.Integer)0);
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Steward;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type42);
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Steward;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.Card.Type type49 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card45, type49);
    java.util.List<dominion.Card> list_card51 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card43, type49);
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Steward;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.Card.Type type57 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.GameState gameState60 = null;
    dominion.Player player62 = new dominion.Player(gameState60, "");
    dominion.Card card63 = null;
    player62.trashCard(card63);
    player62.printStateGame();
    player62.buyCard();
    gameState59.addPlayer(player62);
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Steward;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    gameState59.cards = arraylist_card69;
    java.util.List<dominion.Card> list_card74 = gameState59.cards;
    dominion.Card.CardName cardName75 = dominion.Card.CardName.Mine;
    int i76 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card74, cardName75);
    dominion.Card.CardName cardName77 = dominion.Card.CardName.Ambassador;
    dominion.Card card78 = dominion.Card.getCard(list_card74, cardName77);
    dominion.Card card79 = dominion.Card.getCard(list_card43, cardName77);
    dominion.Card card80 = dominion.Card.getCard(list_card34, cardName77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Steward + "'", cardName38.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.VICTORY + "'", type40.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Steward + "'", cardName47.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + dominion.Card.Type.VICTORY + "'", type49.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Steward + "'", cardName55.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + dominion.Card.Type.VICTORY + "'", type57.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Steward + "'", cardName71.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + cardName75 + "' != '" + dominion.Card.CardName.Mine + "'", cardName75.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName77.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.GameState gameState39 = new dominion.GameState(list_card38);
    boolean b40 = gameState39.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    gameState7.initializeGame();
    dominion.GameState gameState24 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState24);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    dominion.Card.Type type1 = dominion.Card.Type.ACTION;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + dominion.Card.Type.ACTION + "'", type1.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Steward;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    gameState46.addPlayer(player49);
    dominion.GameState gameState54 = gameState46.clone();
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Steward;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card[] card_array60 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card61 = new java.util.ArrayList<dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card61, card_array60);
    dominion.Card.CardName cardName63 = dominion.Card.CardName.Steward;
    dominion.Card card64 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card61, cardName63);
    dominion.Card.Type type65 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card66 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card61, type65);
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type65);
    gameState54.cards = arraylist_card56;
    dominion.Card[] card_array69 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card70 = new java.util.ArrayList<dominion.Card>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card70, card_array69);
    dominion.Card.CardName cardName72 = dominion.Card.CardName.Steward;
    dominion.Card card73 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card70, cardName72);
    dominion.Card.Type type74 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card70, type74);
    java.util.List<dominion.Card> list_card76 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type74);
    gameState7.cards = list_card76;
    gameState7.initializeGame();
    dominion.Card card79 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card80 = gameState7.getGameboard(card79);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Steward + "'", cardName42.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.VICTORY + "'", type44.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Steward + "'", cardName58.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Steward + "'", cardName63.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + dominion.Card.Type.VICTORY + "'", type65.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + dominion.Card.CardName.Steward + "'", cardName72.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card73);
    org.junit.Assert.assertTrue("'" + type74 + "' != '" + dominion.Card.Type.VICTORY + "'", type74.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.buyCard();
    dominion.Card card7 = null;
    player2.trashCard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.playKingdomCard();
    player2.playKingdomCard();

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState7.embTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(hashmap_card_i18);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.playTtreasureCard();
    player2.buyCard();
    player2.playKingdomCard();

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.playTtreasureCard();
    dominion.Card card12 = null;
    player2.discard(card12);
    player2.playTtreasureCard();
    dominion.Card card15 = null;
    player2.trashCard(card15);
    dominion.Card card17 = null;
    player2.trashCard(card17);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.printStateGame();
    player2.playTtreasureCard();
    dominion.Card card11 = null;
    player2.trashCard(card11);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    player18.playKingdomCard();
    player18.playKingdomCard();
    dominion.Card card21 = null;
    player18.discard(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    java.util.Random random0 = dominion.Randomness.random;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(random0);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.List<dominion.Card> list_card34 = null;
    gameState26.cards = list_card34;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    player38.printStateGame();
    gameState26.addPlayer(player38);
    dominion.Card card47 = null;
    player38.trashCard(card47);
    gameState17.addPlayer(player38);
    dominion.Card card50 = null;
    player38.discard(card50);
    player38.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Steward;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Village;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName17);
    dominion.Card card19 = dominion.Card.getCard(list_card6, cardName17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Steward + "'", cardName13.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.VICTORY + "'", type15.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Village + "'", cardName17.equals(dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.List<dominion.Card> list_card41 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)arraylist_card24, (java.lang.Integer)(-1));
    dominion.Card.Type type42 = dominion.Card.Type.ACTION;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.ACTION + "'", type42.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.Player player40 = new dominion.Player(gameState22, "hi!");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState22.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i41);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.printStateGame();

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.playKingdomCard();
    dominion.Card card10 = null;
    player2.trashCard(card10);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "");
    dominion.Card card27 = null;
    player26.trashCard(card27);
    player26.printStateGame();
    gameState23.addPlayer(player26);
    gameState23.initializeGame();
    dominion.GameState gameState32 = gameState23.clone();
    dominion.GameState gameState33 = gameState23.clone();
    gameState23.initializeGame();
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Steward;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    dominion.GameState gameState43 = null;
    dominion.Player player45 = new dominion.Player(gameState43, "");
    dominion.Card card46 = null;
    player45.trashCard(card46);
    player45.printStateGame();
    gameState42.addPlayer(player45);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i50 = null;
    gameState42.embTokens = hashmap_card_i50;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i52 = gameState42.gameBoard;
    gameState23.embTokens = hashmap_card_i52;
    java.util.List<dominion.Card> list_card54 = gameState23.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i55 = gameState23.gameBoard;
    gameState7.embTokens = hashmap_card_i55;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Steward + "'", cardName38.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.VICTORY + "'", type40.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i55);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState7.getWinners();
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.GameState gameState19 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = null;
    gameState15.embTokens = hashmap_card_i23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "");
    dominion.Card card36 = null;
    player35.trashCard(card36);
    player35.printStateGame();
    gameState32.addPlayer(player35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = null;
    gameState32.embTokens = hashmap_card_i40;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState32.gameBoard;
    gameState15.embTokens = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState7.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.VICTORY + "'", type30.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    dominion.GameState gameState32 = gameState24.clone();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Steward;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card[] card_array38 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card39 = new java.util.ArrayList<dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card39, card_array38);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Steward;
    dominion.Card card42 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card39, cardName41);
    dominion.Card.Type type43 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card39, type43);
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type43);
    gameState32.cards = arraylist_card34;
    dominion.Card[] card_array47 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card48 = new java.util.ArrayList<dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card48, card_array47);
    dominion.Card.CardName cardName50 = dominion.Card.CardName.Steward;
    dominion.Card card51 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card48, cardName50);
    dominion.Card.Type type52 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card48, type52);
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type52);
    java.util.List<dominion.Card> list_card55 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type52);
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Steward;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.Card.Type type61 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type61);
    java.util.List<dominion.Card> list_card64 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card62, (java.lang.Integer)10);
    dominion.GameState gameState65 = new dominion.GameState(list_card62);
    dominion.Card[] card_array66 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card67 = new java.util.ArrayList<dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card67, card_array66);
    dominion.Card.CardName cardName69 = dominion.Card.CardName.Steward;
    dominion.Card card70 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card67, cardName69);
    dominion.Card.Type type71 = null;
    java.util.List<dominion.Card> list_card72 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card67, type71);
    dominion.Card[] card_array73 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card74 = new java.util.ArrayList<dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card74, card_array73);
    dominion.Card.CardName cardName76 = dominion.Card.CardName.Steward;
    dominion.Card card77 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card74, cardName76);
    dominion.Card[] card_array78 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card79 = new java.util.ArrayList<dominion.Card>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card79, card_array78);
    dominion.Card.CardName cardName81 = dominion.Card.CardName.Steward;
    dominion.Card card82 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card79, cardName81);
    dominion.Card.Type type83 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card84 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card79, type83);
    java.util.List<dominion.Card> list_card85 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card74, type83);
    dominion.Card.CardName cardName86 = dominion.Card.CardName.Village;
    dominion.Card card87 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card74, cardName86);
    int i88 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card67, cardName86);
    int i89 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card62, cardName86);
    dominion.Card card90 = dominion.Card.getCard(list_card55, cardName86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Steward + "'", cardName36.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Steward + "'", cardName41.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + dominion.Card.Type.VICTORY + "'", type43.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + dominion.Card.CardName.Steward + "'", cardName50.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    org.junit.Assert.assertTrue("'" + type52 + "' != '" + dominion.Card.Type.VICTORY + "'", type52.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Steward + "'", cardName59.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.VICTORY + "'", type61.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + dominion.Card.CardName.Steward + "'", cardName69.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + dominion.Card.CardName.Steward + "'", cardName76.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + dominion.Card.CardName.Steward + "'", cardName81.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card82);
    org.junit.Assert.assertTrue("'" + type83 + "' != '" + dominion.Card.Type.VICTORY + "'", type83.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + dominion.Card.CardName.Village + "'", cardName86.equals(dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState17.embTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.buyCard();
    dominion.Card card7 = null;
    player2.trashCard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.playKingdomCard();
    dominion.Card card12 = null;
    player2.discard(card12);
    dominion.Card card14 = null;
    player2.trashCard(card14);
    dominion.Card card16 = null;
    player2.discard(card16);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    player27.playKingdomCard();
    dominion.Card card32 = null;
    player27.discard(card32);
    dominion.Card card34 = null;
    player27.discard(card34);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playKingdomCard();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    dominion.Card card43 = null;
    player42.trashCard(card43);
    player42.printStateGame();
    player42.buyCard();
    dominion.Card card47 = null;
    player42.trashCard(card47);
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    player51.playKingdomCard();
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trashCard(card56);
    player55.printStateGame();
    player55.playKingdomCard();
    dominion.Card card60 = null;
    player55.discard(card60);
    dominion.Card card62 = null;
    player55.discard(card62);
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "");
    dominion.Card card67 = null;
    player66.trashCard(card67);
    player66.printStateGame();
    player66.playKingdomCard();
    dominion.Card card71 = null;
    player66.discard(card71);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    player75.buyCard();
    dominion.GameState gameState80 = null;
    dominion.Player player82 = new dominion.Player(gameState80, "");
    dominion.Card card83 = null;
    player82.trashCard(card83);
    player82.printStateGame();
    player82.playKingdomCard();
    dominion.Player[] player_array87 = new dominion.Player[] { player27, player38, player42, player51, player55, player66, player75, player82 };
    java.util.ArrayList<dominion.Player> arraylist_player88 = new java.util.ArrayList<dominion.Player>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player88, player_array87);
    gameState24.players = arraylist_player88;
    gameState7.players = arraylist_player88;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState7.embTokens;
    // The following exception was thrown during execution in test generation
    try {
    boolean b93 = gameState7.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card[] card_array5 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card6 = new java.util.ArrayList<dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card6, card_array5);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Steward;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card6, cardName8);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card6, type10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Village;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName13);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card15 = dominion.Randomness.randomMember((java.util.List<dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Steward + "'", cardName8.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Village + "'", cardName13.equals(dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.GameState gameState33 = gameState32.clone();
    java.util.List<dominion.Player> list_player34 = gameState33.players;
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Steward;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    dominion.GameState gameState43 = null;
    dominion.Player player45 = new dominion.Player(gameState43, "");
    dominion.Card card46 = null;
    player45.trashCard(card46);
    player45.printStateGame();
    gameState42.addPlayer(player45);
    dominion.GameState gameState50 = gameState42.clone();
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Steward;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Steward;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.Card.Type type61 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type61);
    java.util.List<dominion.Card> list_card63 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card52, type61);
    gameState50.cards = arraylist_card52;
    dominion.Card[] card_array65 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card66 = new java.util.ArrayList<dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card66, card_array65);
    dominion.Card.CardName cardName68 = dominion.Card.CardName.Steward;
    dominion.Card card69 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card66, cardName68);
    dominion.Card.Type type70 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card71 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card66, type70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card66);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    gameState72.addPlayer(player75);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i80 = null;
    gameState72.embTokens = hashmap_card_i80;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i82 = gameState72.gameBoard;
    gameState50.embTokens = hashmap_card_i82;
    gameState33.embTokens = hashmap_card_i82;
    gameState7.gameBoard = hashmap_card_i82;
    dominion.Card[] card_array86 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card87 = new java.util.ArrayList<dominion.Card>();
    boolean b88 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card87, card_array86);
    dominion.Card.CardName cardName89 = dominion.Card.CardName.Steward;
    dominion.Card card90 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card87, cardName89);
    dominion.Card.Type type91 = null;
    java.util.List<dominion.Card> list_card92 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card87, type91);
    dominion.Card.CardName cardName93 = dominion.Card.CardName.Adventurer;
    dominion.Card card94 = dominion.Card.getCard(list_card92, cardName93);
    dominion.GameState gameState95 = new dominion.GameState(list_card92);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i96 = gameState95.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i97 = gameState95.embTokens;
    gameState7.gameBoard = hashmap_card_i97;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Steward + "'", cardName38.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.VICTORY + "'", type40.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Steward + "'", cardName54.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Steward + "'", cardName59.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.VICTORY + "'", type61.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + dominion.Card.CardName.Steward + "'", cardName68.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + type70 + "' != '" + dominion.Card.Type.VICTORY + "'", type70.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + cardName89 + "' != '" + dominion.Card.CardName.Steward + "'", cardName89.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    org.junit.Assert.assertTrue("'" + cardName93 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName93.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i97);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    gameState7.initializeGame();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Steward;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Curse;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    boolean b30 = gameState29.isGameOver();
    dominion.Card[] card_array31 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card32 = new java.util.ArrayList<dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card32, card_array31);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Steward;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card32, cardName34);
    dominion.Card.Type type36 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card32, type36);
    dominion.GameState gameState38 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    dominion.GameState gameState39 = null;
    dominion.Player player41 = new dominion.Player(gameState39, "");
    dominion.Card card42 = null;
    player41.trashCard(card42);
    player41.printStateGame();
    gameState38.addPlayer(player41);
    java.util.List<dominion.Card> list_card46 = null;
    gameState38.cards = list_card46;
    java.util.List<dominion.Card> list_card48 = gameState38.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState38.embTokens;
    gameState29.embTokens = hashmap_card_i49;
    gameState7.gameBoard = hashmap_card_i49;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Steward + "'", cardName23.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.VICTORY + "'", type25.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Curse + "'", cardName27.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Steward + "'", cardName34.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + dominion.Card.Type.VICTORY + "'", type36.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    dominion.Randomness.reset((long)(short)10);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    gameState9.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.printStateGame();
    dominion.Card card10 = null;
    player2.discard(card10);
    player2.playTtreasureCard();
    dominion.Card card13 = null;
    player2.discard(card13);
    dominion.Card card15 = null;
    player2.trashCard(card15);
    dominion.Card card17 = null;
    player2.trashCard(card17);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.Player player18 = new dominion.Player(gameState16, "");
    java.util.List<dominion.Player> list_player19 = gameState16.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card14, type15);
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type22);
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    java.util.List<dominion.Card> list_card19 = gameState17.cards;
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Steward;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Curse;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState30 = gameState29.clone();
    java.util.List<dominion.Player> list_player31 = gameState30.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState30.embTokens;
    gameState17.gameBoard = hashmap_card_i32;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i34 = gameState17.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Steward + "'", cardName23.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.VICTORY + "'", type25.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Curse + "'", cardName27.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i34);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState16.play();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = null;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Adventurer;
    dominion.Card card31 = dominion.Card.getCard(list_card29, cardName30);
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName30);
    gameState16.cards = arraylist_card19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName30.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    dominion.GameState gameState18 = gameState7.clone();
    dominion.Player player20 = new dominion.Player(gameState7, "");
    dominion.Card card21 = null;
    player20.trashCard(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    boolean b18 = gameState17.isGameOver();
    dominion.Card card19 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card20 = gameState17.getGameboard(card19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState7.getWinners();
    boolean b17 = gameState7.isGameOver();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = null;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Adventurer;
    dominion.Card card26 = dominion.Card.getCard(list_card24, cardName25);
    dominion.GameState gameState27 = new dominion.GameState(list_card24);
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Steward;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.Type type33 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    gameState35.addPlayer(player38);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i43 = null;
    gameState35.embTokens = hashmap_card_i43;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState35.gameBoard;
    gameState27.embTokens = hashmap_card_i45;
    gameState7.embTokens = hashmap_card_i45;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName25.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Steward + "'", cardName31.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.VICTORY + "'", type33.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.Player player40 = new dominion.Player(gameState22, "hi!");
    dominion.Player player42 = new dominion.Player(gameState22, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    boolean b74 = gameState7.isGameOver();
    boolean b75 = gameState7.isGameOver();
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Steward;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card.Type type81 = null;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card77, type81);
    gameState7.cards = list_card82;
    dominion.GameState gameState84 = null;
    dominion.Player player86 = new dominion.Player(gameState84, "");
    dominion.Card card87 = null;
    player86.trashCard(card87);
    player86.printStateGame();
    player86.playKingdomCard();
    dominion.Card card91 = null;
    player86.discard(card91);
    dominion.Card card93 = null;
    player86.discard(card93);
    player86.playTtreasureCard();
    gameState7.addPlayer(player86);
    boolean b97 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Steward + "'", cardName79.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    boolean b19 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.printStateGame();
    dominion.Card card4 = null;
    player2.discard(card4);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.List<dominion.Card> list_card34 = null;
    gameState26.cards = list_card34;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    player38.printStateGame();
    gameState26.addPlayer(player38);
    dominion.Card card47 = null;
    player38.trashCard(card47);
    gameState17.addPlayer(player38);
    dominion.Card card50 = null;
    player38.trashCard(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.printStateGame();
    player2.playTtreasureCard();

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Steward;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type26);
    gameState15.cards = arraylist_card17;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type35);
    dominion.Card[] card_array38 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card39 = new java.util.ArrayList<dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card39, card_array38);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Steward;
    dominion.Card card42 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card39, cardName41);
    dominion.Card.Type type43 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card39, type43);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card39);
    dominion.GameState gameState46 = null;
    dominion.Player player48 = new dominion.Player(gameState46, "");
    dominion.Card card49 = null;
    player48.trashCard(card49);
    player48.printStateGame();
    gameState45.addPlayer(player48);
    dominion.GameState gameState53 = gameState45.clone();
    java.util.List<dominion.Card> list_card54 = gameState53.cards;
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Steward;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card.Type type60 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    gameState62.addPlayer(player65);
    dominion.GameState gameState70 = gameState62.clone();
    dominion.Card[] card_array71 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card72 = new java.util.ArrayList<dominion.Card>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card72, card_array71);
    dominion.Card.CardName cardName74 = dominion.Card.CardName.Steward;
    dominion.Card card75 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card72, cardName74);
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Steward;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card.Type type81 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card77, type81);
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card72, type81);
    gameState70.cards = arraylist_card72;
    dominion.Card[] card_array85 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card86 = new java.util.ArrayList<dominion.Card>();
    boolean b87 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card86, card_array85);
    dominion.Card.CardName cardName88 = dominion.Card.CardName.Steward;
    dominion.Card card89 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card86, cardName88);
    dominion.Card.Type type90 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card91 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card86, type90);
    java.util.List<dominion.Card> list_card92 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card72, type90);
    java.util.List<dominion.Card> list_card93 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card54, type90);
    java.util.List<dominion.Card> list_card94 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Steward + "'", cardName24.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.VICTORY + "'", type35.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Steward + "'", cardName41.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + dominion.Card.Type.VICTORY + "'", type43.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Steward + "'", cardName58.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.VICTORY + "'", type60.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + dominion.Card.CardName.Steward + "'", cardName74.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Steward + "'", cardName79.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + dominion.Card.Type.VICTORY + "'", type81.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + dominion.Card.CardName.Steward + "'", cardName88.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);
    org.junit.Assert.assertTrue("'" + type90 + "' != '" + dominion.Card.Type.VICTORY + "'", type90.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card94);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = null;
    gameState15.embTokens = hashmap_card_i23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "");
    dominion.Card card36 = null;
    player35.trashCard(card36);
    player35.printStateGame();
    gameState32.addPlayer(player35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = null;
    gameState32.embTokens = hashmap_card_i40;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState32.gameBoard;
    gameState15.embTokens = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState7.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState7.embTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.VICTORY + "'", type30.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = null;
    gameState15.embTokens = hashmap_card_i23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "");
    dominion.Card card36 = null;
    player35.trashCard(card36);
    player35.printStateGame();
    gameState32.addPlayer(player35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = null;
    gameState32.embTokens = hashmap_card_i40;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState32.gameBoard;
    gameState15.embTokens = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    dominion.GameState gameState45 = gameState7.clone();
    java.util.List<dominion.Card> list_card46 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i47 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.VICTORY + "'", type30.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i47);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trashCard(card22);
    player21.printStateGame();
    player21.playKingdomCard();
    dominion.Card card26 = null;
    player21.discard(card26);
    player21.printStateGame();
    dominion.Card card29 = null;
    player21.discard(card29);
    gameState7.addPlayer(player21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState7.embTokens = hashmap_card_i32;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    dominion.GameState gameState23 = gameState15.clone();
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Steward;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Curse;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName31);
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Steward;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName36);
    gameState23.cards = arraylist_card25;
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Steward;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.Card.Type type45 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card41, type45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.Card[] card_array48 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card49 = new java.util.ArrayList<dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card49, card_array48);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Steward;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card49, cardName51);
    dominion.Card.Type type53 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card49, type53);
    dominion.GameState gameState55 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    gameState55.addPlayer(player58);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = null;
    gameState55.embTokens = hashmap_card_i63;
    dominion.Card[] card_array65 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card66 = new java.util.ArrayList<dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card66, card_array65);
    dominion.Card.CardName cardName68 = dominion.Card.CardName.Steward;
    dominion.Card card69 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card66, cardName68);
    dominion.Card.Type type70 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card71 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card66, type70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card66);
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "");
    dominion.Card card76 = null;
    player75.trashCard(card76);
    player75.printStateGame();
    gameState72.addPlayer(player75);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i80 = null;
    gameState72.embTokens = hashmap_card_i80;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i82 = gameState72.gameBoard;
    gameState55.embTokens = hashmap_card_i82;
    gameState47.gameBoard = hashmap_card_i82;
    gameState23.gameBoard = hashmap_card_i82;
    gameState7.embTokens = hashmap_card_i82;
    dominion.Card card87 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card88 = gameState7.getGameboard(card87);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Steward + "'", cardName27.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.VICTORY + "'", type29.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Curse + "'", cardName31.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Steward + "'", cardName36.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Steward + "'", cardName43.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.VICTORY + "'", type45.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Steward + "'", cardName51.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + dominion.Card.Type.VICTORY + "'", type53.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + dominion.Card.CardName.Steward + "'", cardName68.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + type70 + "' != '" + dominion.Card.Type.VICTORY + "'", type70.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i82);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    dominion.Card card20 = null;
    player19.trashCard(card20);
    player19.printStateGame();
    player19.playKingdomCard();
    dominion.Card card24 = null;
    player19.discard(card24);
    player19.printStateGame();
    gameState7.addPlayer(player19);
    player19.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState7.getWinners();
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player19 = gameState7.players;
    dominion.Player player20 = dominion.Randomness.randomMember(list_player19);
    player20.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player20);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.List<dominion.Card> list_card15 = null;
    gameState7.cards = list_card15;
    dominion.Player player18 = new dominion.Player(gameState7, "");
    dominion.Player player20 = new dominion.Player(gameState7, "");
    player20.buyCard();
    player20.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState22.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState10.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    dominion.Card[] card_array74 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card75 = new java.util.ArrayList<dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card75, card_array74);
    dominion.Card.CardName cardName77 = dominion.Card.CardName.Steward;
    dominion.Card card78 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card75, cardName77);
    dominion.Card.Type type79 = null;
    java.util.List<dominion.Card> list_card80 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card75, type79);
    dominion.Card.CardName cardName81 = dominion.Card.CardName.Adventurer;
    dominion.Card card82 = dominion.Card.getCard(list_card80, cardName81);
    dominion.GameState gameState83 = new dominion.GameState(list_card80);
    dominion.Player player85 = new dominion.Player(gameState83, "hi!");
    dominion.Card card86 = null;
    player85.discard(card86);
    gameState7.addPlayer(player85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + dominion.Card.CardName.Steward + "'", cardName77.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName81.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card82);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    java.util.List<dominion.Player> list_player34 = gameState33.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState7.gameBoard;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Player player34 = new dominion.Player(gameState32, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card card17 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card18 = gameState7.getGameboard(card17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    boolean b74 = gameState7.isGameOver();
    boolean b75 = gameState7.isGameOver();
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Steward;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card[] card_array81 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card82 = new java.util.ArrayList<dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card82, card_array81);
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Steward;
    dominion.Card card85 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card82, cardName84);
    dominion.Card.Type type86 = null;
    java.util.List<dominion.Card> list_card87 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card82, type86);
    dominion.Card.CardName cardName88 = dominion.Card.CardName.Adventurer;
    dominion.Card card89 = dominion.Card.getCard(list_card87, cardName88);
    dominion.Card card90 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName88);
    gameState7.cards = arraylist_card77;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState7.embTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i93 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Steward + "'", cardName79.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Steward + "'", cardName84.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName88.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i93);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.GameState gameState26 = null;
    dominion.Player player28 = new dominion.Player(gameState26, "");
    dominion.Card card29 = null;
    player28.trashCard(card29);
    player28.printStateGame();
    player28.playKingdomCard();
    dominion.Card card33 = null;
    player28.discard(card33);
    dominion.Card card35 = null;
    player28.discard(card35);
    dominion.GameState gameState37 = null;
    dominion.Player player39 = new dominion.Player(gameState37, "");
    player39.playKingdomCard();
    dominion.GameState gameState41 = null;
    dominion.Player player43 = new dominion.Player(gameState41, "");
    dominion.Card card44 = null;
    player43.trashCard(card44);
    player43.printStateGame();
    player43.buyCard();
    dominion.Card card48 = null;
    player43.trashCard(card48);
    dominion.GameState gameState50 = null;
    dominion.Player player52 = new dominion.Player(gameState50, "");
    player52.playKingdomCard();
    dominion.GameState gameState54 = null;
    dominion.Player player56 = new dominion.Player(gameState54, "");
    dominion.Card card57 = null;
    player56.trashCard(card57);
    player56.printStateGame();
    player56.playKingdomCard();
    dominion.Card card61 = null;
    player56.discard(card61);
    dominion.Card card63 = null;
    player56.discard(card63);
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "");
    dominion.Card card68 = null;
    player67.trashCard(card68);
    player67.printStateGame();
    player67.playKingdomCard();
    dominion.Card card72 = null;
    player67.discard(card72);
    dominion.GameState gameState74 = null;
    dominion.Player player76 = new dominion.Player(gameState74, "");
    dominion.Card card77 = null;
    player76.trashCard(card77);
    player76.printStateGame();
    player76.buyCard();
    dominion.GameState gameState81 = null;
    dominion.Player player83 = new dominion.Player(gameState81, "");
    dominion.Card card84 = null;
    player83.trashCard(card84);
    player83.printStateGame();
    player83.playKingdomCard();
    dominion.Player[] player_array88 = new dominion.Player[] { player28, player39, player43, player52, player56, player67, player76, player83 };
    java.util.ArrayList<dominion.Player> arraylist_player89 = new java.util.ArrayList<dominion.Player>();
    boolean b90 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player89, player_array88);
    gameState25.players = arraylist_player89;
    dominion.Player player92 = dominion.Randomness.randomMember((java.util.List<dominion.Player>)arraylist_player89);
    gameState7.addPlayer(player92);
    dominion.Card card94 = null;
    player92.trashCard(card94);
    player92.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.VICTORY + "'", type23.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player92);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    boolean b17 = gameState16.isGameOver();
    java.util.List<dominion.Card> list_card18 = gameState16.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState10.embTokens;
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Steward;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Curse;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    dominion.GameState gameState23 = gameState22.clone();
    java.util.List<dominion.Player> list_player24 = gameState23.players;
    gameState10.players = list_player24;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Steward + "'", cardName16.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.VICTORY + "'", type18.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Curse + "'", cardName20.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player24);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Embargo;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Embargo + "'", cardName40.equals(dominion.Card.CardName.Embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    java.util.List<dominion.Card> list_card22 = gameState7.cards;
    dominion.Card card23 = null;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card24 = gameState7.getGameboard(card23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.buyCard();
    dominion.Card card7 = null;
    player2.trashCard(card7);
    dominion.Card card9 = null;
    player2.trashCard(card9);
    player2.playKingdomCard();
    dominion.Card card12 = null;
    player2.discard(card12);
    dominion.Card card14 = null;
    player2.trashCard(card14);
    player2.playTtreasureCard();

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState15.embTokens;
    dominion.GameState gameState17 = gameState15.clone();
    dominion.Player player19 = new dominion.Player(gameState15, "");
    dominion.Card card20 = null;
    player19.discard(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    gameState9.cards = arraylist_card11;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    gameState21.addPlayer(player24);
    gameState21.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState21.getWinners();
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "");
    dominion.Card card34 = null;
    player33.trashCard(card34);
    player33.printStateGame();
    gameState21.addPlayer(player33);
    gameState9.addPlayer(player33);
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Steward;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = null;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Adventurer;
    dominion.Card card47 = dominion.Card.getCard(list_card45, cardName46);
    dominion.GameState gameState48 = new dominion.GameState(list_card45);
    dominion.GameState gameState49 = gameState48.clone();
    java.util.List<dominion.Player> list_player50 = gameState49.players;
    gameState9.players = list_player50;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Steward + "'", cardName42.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName46.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player50);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    java.util.List<dominion.Card> list_card22 = gameState7.cards;
    dominion.GameState gameState23 = gameState7.clone();
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "");
    dominion.Card card27 = null;
    player26.trashCard(card27);
    player26.printStateGame();
    player26.playKingdomCard();
    dominion.Card card31 = null;
    player26.discard(card31);
    player26.printStateGame();
    dominion.Card card34 = null;
    player26.discard(card34);
    player26.playTtreasureCard();
    player26.buyCard();
    gameState23.addPlayer(player26);
    // The following exception was thrown during execution in test generation
    try {
    gameState23.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = null;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Adventurer;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.GameState gameState9 = new dominion.GameState(list_card6);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Steward;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    java.util.List<dominion.Card> list_card18 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card16, (java.lang.Integer)10);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Steward;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type29);
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type29);
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type29);
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Steward;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    dominion.GameState gameState42 = null;
    dominion.Player player44 = new dominion.Player(gameState42, "");
    dominion.Card card45 = null;
    player44.trashCard(card45);
    player44.printStateGame();
    player44.buyCard();
    gameState41.addPlayer(player44);
    dominion.Card[] card_array50 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card51 = new java.util.ArrayList<dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card51, card_array50);
    dominion.Card.CardName cardName53 = dominion.Card.CardName.Steward;
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card51, cardName53);
    gameState41.cards = arraylist_card51;
    java.util.List<dominion.Card> list_card56 = gameState41.cards;
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Mine;
    int i58 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card56, cardName57);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Ambassador;
    dominion.Card card60 = dominion.Card.getCard(list_card56, cardName59);
    int i61 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card33, cardName59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName7.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Steward + "'", cardName13.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.VICTORY + "'", type15.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Steward + "'", cardName27.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.VICTORY + "'", type29.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Steward + "'", cardName37.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.VICTORY + "'", type39.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + dominion.Card.CardName.Steward + "'", cardName53.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Mine + "'", cardName57.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName59.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playKingdomCard();
    player2.buyCard();
    player2.buyCard();

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    dominion.GameState gameState74 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i75 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i75);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    gameState7.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Steward;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    dominion.Card card30 = null;
    player29.trashCard(card30);
    player29.printStateGame();
    gameState26.addPlayer(player29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = null;
    gameState26.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState26.gameBoard;
    gameState7.embTokens = hashmap_card_i36;
    java.util.List<dominion.Card> list_card38 = gameState7.cards;
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Steward;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    gameState46.addPlayer(player49);
    dominion.GameState gameState54 = gameState46.clone();
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Steward;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card[] card_array60 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card61 = new java.util.ArrayList<dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card61, card_array60);
    dominion.Card.CardName cardName63 = dominion.Card.CardName.Steward;
    dominion.Card card64 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card61, cardName63);
    dominion.Card.Type type65 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card66 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card61, type65);
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type65);
    gameState54.cards = arraylist_card56;
    dominion.Card[] card_array69 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card70 = new java.util.ArrayList<dominion.Card>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card70, card_array69);
    dominion.Card.CardName cardName72 = dominion.Card.CardName.Steward;
    dominion.Card card73 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card70, cardName72);
    dominion.Card.Type type74 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card70, type74);
    java.util.List<dominion.Card> list_card76 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type74);
    gameState7.cards = list_card76;
    dominion.GameState gameState78 = new dominion.GameState(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Steward + "'", cardName22.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Steward + "'", cardName42.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.VICTORY + "'", type44.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Steward + "'", cardName58.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Steward + "'", cardName63.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + dominion.Card.Type.VICTORY + "'", type65.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    org.junit.Assert.assertTrue("'" + cardName72 + "' != '" + dominion.Card.CardName.Steward + "'", cardName72.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card73);
    org.junit.Assert.assertTrue("'" + type74 + "' != '" + dominion.Card.Type.VICTORY + "'", type74.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Steward;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState24.embTokens = hashmap_card_i32;
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Steward;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    dominion.GameState gameState42 = null;
    dominion.Player player44 = new dominion.Player(gameState42, "");
    dominion.Card card45 = null;
    player44.trashCard(card45);
    player44.printStateGame();
    gameState41.addPlayer(player44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = null;
    gameState41.embTokens = hashmap_card_i49;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState41.gameBoard;
    gameState24.embTokens = hashmap_card_i51;
    gameState16.gameBoard = hashmap_card_i51;
    gameState7.embTokens = hashmap_card_i51;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Steward + "'", cardName12.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.VICTORY + "'", type14.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Steward + "'", cardName37.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.VICTORY + "'", type39.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Duchy;
    int i8 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card6, cardName7);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Steward;
    dominion.Card card10 = dominion.Card.getCard(list_card6, cardName9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Duchy + "'", cardName7.equals(dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Steward + "'", cardName9.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trashCard(card3);
    player2.printStateGame();
    player2.playKingdomCard();
    player2.buyCard();
    player2.printStateGame();

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Curse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName28);
    gameState15.cards = arraylist_card17;
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState33.embTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState33.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.VICTORY + "'", type21.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Curse + "'", cardName23.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState24.embTokens = hashmap_card_i32;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState24.gameBoard;
    gameState7.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState7.embTokens;
    dominion.Player player38 = new dominion.Player(gameState7, "");
    java.util.List<dominion.Card> list_card39 = gameState7.cards;
    java.util.List<dominion.Card> list_card41 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card39, (java.lang.Integer)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState15.embTokens;
    dominion.GameState gameState17 = gameState15.clone();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Steward;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.Card.Type type31 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card27, type31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    dominion.GameState gameState34 = null;
    dominion.Player player36 = new dominion.Player(gameState34, "");
    dominion.Card card37 = null;
    player36.trashCard(card37);
    player36.printStateGame();
    gameState33.addPlayer(player36);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i41 = null;
    gameState33.embTokens = hashmap_card_i41;
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Steward;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    dominion.GameState gameState51 = null;
    dominion.Player player53 = new dominion.Player(gameState51, "");
    dominion.Card card54 = null;
    player53.trashCard(card54);
    player53.printStateGame();
    gameState50.addPlayer(player53);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i58 = null;
    gameState50.embTokens = hashmap_card_i58;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i60 = gameState50.gameBoard;
    gameState33.embTokens = hashmap_card_i60;
    gameState25.gameBoard = hashmap_card_i60;
    gameState17.gameBoard = hashmap_card_i60;
    dominion.Player player65 = new dominion.Player(gameState17, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.VICTORY + "'", type23.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Steward + "'", cardName29.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.VICTORY + "'", type31.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Steward + "'", cardName46.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.VICTORY + "'", type48.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i60);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    gameState7.initializeGame();
    dominion.GameState gameState16 = gameState7.clone();
    dominion.GameState gameState17 = gameState7.clone();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Steward;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card24, (java.lang.Integer)10);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Steward;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type37);
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card26, type37);
    gameState17.cards = list_card40;
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Steward;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.Card.Type type47 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.GameState gameState50 = null;
    dominion.Player player52 = new dominion.Player(gameState50, "");
    dominion.Card card53 = null;
    player52.trashCard(card53);
    player52.printStateGame();
    gameState49.addPlayer(player52);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i57 = null;
    gameState49.embTokens = hashmap_card_i57;
    dominion.Card[] card_array59 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card60 = new java.util.ArrayList<dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card60, card_array59);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Steward;
    dominion.Card card63 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card60, cardName62);
    dominion.Card.Type type64 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card60, type64);
    dominion.GameState gameState66 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.GameState gameState67 = null;
    dominion.Player player69 = new dominion.Player(gameState67, "");
    dominion.Card card70 = null;
    player69.trashCard(card70);
    player69.printStateGame();
    gameState66.addPlayer(player69);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = null;
    gameState66.embTokens = hashmap_card_i74;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState66.gameBoard;
    gameState49.embTokens = hashmap_card_i76;
    gameState17.gameBoard = hashmap_card_i76;
    java.util.List<dominion.Card> list_card79 = gameState17.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i80 = gameState17.embTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Steward + "'", cardName21.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.VICTORY + "'", type23.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Steward + "'", cardName30.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Steward + "'", cardName45.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + dominion.Card.Type.VICTORY + "'", type47.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Steward + "'", cardName62.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + dominion.Card.Type.VICTORY + "'", type64.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i80);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    dominion.GameState gameState15 = gameState7.clone();
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.GameState gameState17 = gameState15.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)10);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Cutpurse;
    dominion.Card card10 = dominion.Card.getCard(list_card6, cardName9);
    java.util.List<dominion.Card> list_card12 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card14 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName9.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.playKingdomCard();
    dominion.Card card15 = null;
    player10.discard(card15);
    dominion.Card card17 = null;
    player10.discard(card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    player21.playKingdomCard();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "");
    dominion.Card card26 = null;
    player25.trashCard(card26);
    player25.printStateGame();
    player25.buyCard();
    dominion.Card card30 = null;
    player25.trashCard(card30);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player34.playKingdomCard();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trashCard(card39);
    player38.printStateGame();
    player38.playKingdomCard();
    dominion.Card card43 = null;
    player38.discard(card43);
    dominion.Card card45 = null;
    player38.discard(card45);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "");
    dominion.Card card50 = null;
    player49.trashCard(card50);
    player49.printStateGame();
    player49.playKingdomCard();
    dominion.Card card54 = null;
    player49.discard(card54);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "");
    dominion.Card card59 = null;
    player58.trashCard(card59);
    player58.printStateGame();
    player58.buyCard();
    dominion.GameState gameState63 = null;
    dominion.Player player65 = new dominion.Player(gameState63, "");
    dominion.Card card66 = null;
    player65.trashCard(card66);
    player65.printStateGame();
    player65.playKingdomCard();
    dominion.Player[] player_array70 = new dominion.Player[] { player10, player21, player25, player34, player38, player49, player58, player65 };
    java.util.ArrayList<dominion.Player> arraylist_player71 = new java.util.ArrayList<dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player71, player_array70);
    gameState7.players = arraylist_player71;
    boolean b74 = gameState7.isGameOver();
    boolean b75 = gameState7.isGameOver();
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Steward;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card[] card_array81 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card82 = new java.util.ArrayList<dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card82, card_array81);
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Steward;
    dominion.Card card85 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card82, cardName84);
    dominion.Card.Type type86 = null;
    java.util.List<dominion.Card> list_card87 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card82, type86);
    dominion.Card.CardName cardName88 = dominion.Card.CardName.Adventurer;
    dominion.Card card89 = dominion.Card.getCard(list_card87, cardName88);
    dominion.Card card90 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName88);
    gameState7.cards = arraylist_card77;
    java.util.List<dominion.Card> list_card93 = dominion.Card.checkPrice((java.lang.Iterable<dominion.Card>)arraylist_card77, (java.lang.Integer)0);
    dominion.Card.CardName cardName94 = dominion.Card.CardName.Curse;
    int i95 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)arraylist_card77, cardName94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Steward + "'", cardName79.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Steward + "'", cardName84.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName88.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card93);
    org.junit.Assert.assertTrue("'" + cardName94 + "' != '" + dominion.Card.CardName.Curse + "'", cardName94.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    player10.buyCard();
    gameState7.addPlayer(player10);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Steward;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState7.cards = arraylist_card17;
    dominion.GameState gameState22 = gameState7.clone();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Steward;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Curse;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName30);
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Steward;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName35);
    gameState22.cards = arraylist_card24;
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Steward;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.Card.Type type45 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card41, type45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "");
    dominion.Card card51 = null;
    player50.trashCard(card51);
    player50.printStateGame();
    gameState47.addPlayer(player50);
    gameState47.initializeGame();
    dominion.GameState gameState56 = gameState47.clone();
    dominion.GameState gameState57 = gameState47.clone();
    gameState47.initializeGame();
    dominion.Card[] card_array59 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card60 = new java.util.ArrayList<dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card60, card_array59);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Steward;
    dominion.Card card63 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card60, cardName62);
    dominion.Card.Type type64 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card60, type64);
    dominion.GameState gameState66 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.GameState gameState67 = null;
    dominion.Player player69 = new dominion.Player(gameState67, "");
    dominion.Card card70 = null;
    player69.trashCard(card70);
    player69.printStateGame();
    gameState66.addPlayer(player69);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = null;
    gameState66.embTokens = hashmap_card_i74;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState66.gameBoard;
    gameState47.embTokens = hashmap_card_i76;
    java.util.List<dominion.Card> list_card78 = gameState47.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i79 = gameState47.gameBoard;
    gameState39.embTokens = hashmap_card_i79;
    dominion.Card[] card_array81 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card82 = new java.util.ArrayList<dominion.Card>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card82, card_array81);
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Steward;
    dominion.Card card85 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card82, cardName84);
    dominion.Card.Type type86 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card87 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card82, type86);
    dominion.Card.Type type88 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card89 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card87, type88);
    gameState39.cards = list_card89;
    java.util.List<dominion.Player> list_player91 = gameState39.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Steward + "'", cardName19.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Steward + "'", cardName26.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Curse + "'", cardName30.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Steward + "'", cardName35.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Steward + "'", cardName43.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.VICTORY + "'", type45.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Steward + "'", cardName62.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + dominion.Card.Type.VICTORY + "'", type64.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Steward + "'", cardName84.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    org.junit.Assert.assertTrue("'" + type86 + "' != '" + dominion.Card.Type.VICTORY + "'", type86.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    org.junit.Assert.assertTrue("'" + type88 + "' != '" + dominion.Card.Type.TREASURE + "'", type88.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player91);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    gameState9.cards = arraylist_card11;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Steward;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trashCard(card25);
    player24.printStateGame();
    player24.buyCard();
    gameState21.addPlayer(player24);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Steward;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    gameState21.cards = arraylist_card31;
    java.util.List<dominion.Card> list_card36 = gameState21.cards;
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Mine;
    int i38 = dominion.Card.filterQTY((java.lang.Iterable<dominion.Card>)list_card36, cardName37);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Ambassador;
    dominion.Card card40 = dominion.Card.getCard(list_card36, cardName39);
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Steward;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card.Type type46 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card42, type46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card47, type48);
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card36, type48);
    java.util.List<dominion.Card> list_card51 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Steward + "'", cardName17.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Steward + "'", cardName33.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Mine + "'", cardName37.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName39.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Steward + "'", cardName44.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.VICTORY + "'", type46.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Curse;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState10 = gameState9.clone();
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState10.embTokens;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState10.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Curse + "'", cardName7.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Steward;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    dominion.Card card19 = null;
    player18.trashCard(card19);
    player18.printStateGame();
    gameState15.addPlayer(player18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = null;
    gameState15.embTokens = hashmap_card_i23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Steward;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "");
    dominion.Card card36 = null;
    player35.trashCard(card36);
    player35.printStateGame();
    gameState32.addPlayer(player35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = null;
    gameState32.embTokens = hashmap_card_i40;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState32.gameBoard;
    gameState15.embTokens = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState7.gameBoard;
    dominion.Card[] card_array46 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card47 = new java.util.ArrayList<dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card47, card_array46);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Steward;
    dominion.Card card50 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card47, cardName49);
    dominion.Card.Type type51 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card47, type51);
    dominion.GameState gameState53 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card47);
    dominion.GameState gameState54 = null;
    dominion.Player player56 = new dominion.Player(gameState54, "");
    dominion.Card card57 = null;
    player56.trashCard(card57);
    player56.printStateGame();
    gameState53.addPlayer(player56);
    dominion.GameState gameState61 = gameState53.clone();
    dominion.Card[] card_array62 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card63 = new java.util.ArrayList<dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card63, card_array62);
    dominion.Card.CardName cardName65 = dominion.Card.CardName.Steward;
    dominion.Card card66 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card63, cardName65);
    dominion.Card.Type type67 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card68 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card63, type67);
    dominion.Card.CardName cardName69 = dominion.Card.CardName.Curse;
    dominion.Card card70 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card63, cardName69);
    dominion.Card[] card_array71 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card72 = new java.util.ArrayList<dominion.Card>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card72, card_array71);
    dominion.Card.CardName cardName74 = dominion.Card.CardName.Steward;
    dominion.Card card75 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card72, cardName74);
    dominion.Card card76 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card63, cardName74);
    gameState61.cards = arraylist_card63;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i78 = gameState61.embTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i79 = gameState61.embTokens;
    gameState7.gameBoard = hashmap_card_i79;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Steward + "'", cardName11.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.VICTORY + "'", type13.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Steward + "'", cardName28.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.VICTORY + "'", type30.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Steward + "'", cardName49.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.VICTORY + "'", type51.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + dominion.Card.CardName.Steward + "'", cardName65.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + type67 + "' != '" + dominion.Card.Type.VICTORY + "'", type67.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + dominion.Card.CardName.Curse + "'", cardName69.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + dominion.Card.CardName.Steward + "'", cardName74.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i79);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = null;
    dominion.Player player10 = new dominion.Player(gameState8, "");
    dominion.Card card11 = null;
    player10.trashCard(card11);
    player10.printStateGame();
    gameState7.addPlayer(player10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = null;
    gameState7.embTokens = hashmap_card_i15;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Steward;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card card28 = null;
    player27.trashCard(card28);
    player27.printStateGame();
    gameState24.addPlayer(player27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = null;
    gameState24.embTokens = hashmap_card_i32;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState24.gameBoard;
    gameState7.embTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState7.embTokens;
    dominion.Player player38 = new dominion.Player(gameState7, "");
    player38.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Steward + "'", cardName20.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Steward;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Steward;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Steward;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type17);
    dominion.GameState gameState20 = new dominion.GameState(list_card19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Steward;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState29 = null;
    dominion.Player player31 = new dominion.Player(gameState29, "");
    dominion.Card card32 = null;
    player31.trashCard(card32);
    player31.printStateGame();
    gameState28.addPlayer(player31);
    dominion.GameState gameState36 = gameState28.clone();
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Steward;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Steward;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.Card.Type type47 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type47);
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type47);
    gameState36.cards = arraylist_card38;
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Steward;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.Card.Type type56 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card57 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card52, type56);
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type56);
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card19, type56);
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Steward + "'", cardName3.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.VICTORY + "'", type5.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Steward + "'", cardName10.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Steward + "'", cardName15.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Steward + "'", cardName24.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Steward + "'", cardName40.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Steward + "'", cardName45.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + dominion.Card.Type.VICTORY + "'", type47.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Steward + "'", cardName54.equals(dominion.Card.CardName.Steward));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + dominion.Card.Type.VICTORY + "'", type56.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);

  }

}
