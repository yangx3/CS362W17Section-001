package dominion;

import static org.junit.Assert.*;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;

public class Test1_2 {

	@Test
	public void top_test() {
		String[] pass_in={"2"};
		Main.main(pass_in);
	}
	
	@Test
	public void testSort()
	{
		int[] test_array={2,1,4,3};
		int[] result={1,2,4,3};
		//gameState test = null;
		assertEquals(Arrays.equals(gameState.sortArrayAsc(test_array, 0,2), result),true);
		
	}
	/*
	@Test
	public void testInitializeGame()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		assertEquals(test.numPlayers,2);
	}
	
	@Test
	public void testShuffle()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		test.deckCount[0]=4;
		
		int[] check=new int[4];
		for(int i=0;i<4;i++)
		{
			test.deck[0][i]=i;
			check[i]=i;
		}
		test.shuffle(0);
		if(Arrays.equals(test.deck[0], check))
		{
			test.shuffle(0);
			if(Arrays.equals(test.deck[0], check))
			{
				assertEquals(0,1);
			}
			else assertEquals(1,1);
		}
		else
			assertEquals(1,1);
	}
	
	@Test
	public void testplayCard()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		test.playCard(0, 0, 0, 0);
	}

	@Test
	public void testbuyCard()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		test.coins=15;
		test.numBuys=2;
		test.buyCard(3);
		assertEquals(test.coins,7);
	}
	
	@Test
	public void testnumHandCards()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		assertEquals(test.numHandCards(),5);
	}
	
	@Test
	public void testhandCard()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		test.whoseTurn=0;
		test.hand[0][3]=2;
		assertEquals(test.handCard(3),2);
		test.handCard(0);
	}
	
	@Test
	public void testsupplyCount()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
	
		test.supplyCount[0]=7;
		assertEquals(test.supplyCount(0),7);		
	}
	
	@Test
	public void testfullDeckCount()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
	
		test.deck[0][0]=1000;
		test.hand[0][0]=1000;
		//should be no cards in the discard pile, so it shouldn't even look in the discard pile
		test.discard[0][0]=1000;
		assertEquals(test.fullDeckCount(0,1000),2);
	}
	
	@Test
	public void testwhoseTurn()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
	
		assertEquals(test.whoseTurn(),0);
	}
	
	@Test
	public void testendTurn()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		test.endTurn();
		assertEquals(test.whoseTurn(),1);
		
	}
	
	@Test
	public void testisGameOver()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		test.supplyCount[CARD.province.get_CARD()]=0;
		assertEquals(test.isGameOver(),1);
		test.supplyCount[CARD.province.get_CARD()]=1;
		assertEquals(test.isGameOver(),0);
	}
	
	@Test
	public void testscoreFor()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		int i;
		test.initializeGame(2, k, 4);
		
		for (i = 0; i < test.discardCount[0]; i++)
	    {
	      test.deck[0][i] = 0;
	    }
		for (i = 0; i < test.discardCount[0]; i++)
	    {
	      test.discard[0][i] = 0;
	    }
		for (i = 0; i < test.handCount[0]; i++)
	    {
		   test.hand[0][i] = 0;
		}
		//All curses
		assertEquals(test.scoreFor(0),-5);
	}
	
	@Test
	public void testdrawCard()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		
		test.drawCard(0);
		int old_card=test.deck[0][test.deckCount[0]];
		assertEquals(test.hand[0][test.handCount[0] - 1], old_card);
	}
	

	@Test
	public void testgetCost()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		
		for(int i=0;i<CARD.treasure_map.get_CARD();i++)
		{
			if(i==CARD.mine.get_CARD())
				assertEquals(test.getCost(i),5);
		}
	}
	
	@Test
	public void testcardEffect()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		//TODO: this mess
		intWrapper i = new intWrapper();
		i.int_wrapped=0;
		
		
		
		int old_cards=test.handCount[0];
		test.cardEffect(0, -1, -1, -1, 0, i);
		//Draw card, then discard one
		assertEquals(old_cards,test.handCount[0]);
		
		old_cards=test.handCount[0];
		test.cardEffect(CARD.council_room.get_CARD(), -1, -1, -1, 0, i);
		//four cards drawn, 1 discarded
		assertEquals(old_cards+3, test.handCount[0]);
		
		test.cardEffect(CARD.feast.get_CARD(), 1, -1, -1, 0, i);

		int[] choice=test.hand[0];
		test.cardEffect(CARD.mine.get_CARD(), 1, -1, -1, 0, i);
		
	    if (Arrays.equals(test.deck[0], choice))
	    {
	     //Make sure a card is discarded, so decks not equal
	     assertEquals(1,0);         
	          
	    }
       
	    old_cards=test.handCount[0];
	    test.cardEffect(CARD.remodel.get_CARD(), 1, -1, -1, 0, i);
	    //assertEquals(old_cards,test.handCount[0]+1);
	    
	    old_cards=test.handCount[0];
	    test.cardEffect(CARD.village.get_CARD(), 1, -1, -1, 0, i);
	    //One card gained, one discarded
	    assertEquals(old_cards,test.handCount[0]);
	    
	    test.cardEffect(CARD.baron.get_CARD(), 1, -1, -1, 0, i);
	    
	    test.initializeGame(2, k, 4);
	    //Redraw 4 cards
	    test.cardEffect(CARD.minion.get_CARD(), 0, 1, -1, 0, i);
	    assertEquals(4,test.handCount[0]);
	    
	    test.initializeGame(2, k, 4);
	    old_cards=test.handCount[0];
	    test.cardEffect(CARD.steward.get_CARD(), 1, 1, -1, 0, i);
	    //2 cards added, one discarded
	    assertEquals(old_cards+1,test.handCount[0]);
	    
	    test.initializeGame(2, k, 4);
	    old_cards=test.handCount[0];
	    test.cardEffect(CARD.ambassador.get_CARD(), 1, 2, -1, 0, i);
	    //assertEquals(old_cards-1,test.handCount[0]);
	    
	    int old_coins=test.coins;
	    test.cardEffect(CARD.cutpurse.get_CARD(), 1, 2, -1, 0, i);
	    assertEquals(old_coins+2,test.coins);
	    
	    old_coins=test.coins;
	    test.cardEffect(CARD.embargo.get_CARD(), 1, 2, -1, 0, i);
	    assertEquals(old_coins+2,test.coins);
	    
	    test.initializeGame(2, k, 4);
	    old_cards=test.handCount[0];
	    test.cardEffect(CARD.outpost.get_CARD(), 1, 1, -1, 0, i);
	    //one card discarded
	    assertEquals(old_cards-1,test.handCount[0]);
	    
	    test.initializeGame(2, k, 4);
	    old_cards=test.handCount[0];
	    test.cardEffect(CARD.salvager.get_CARD(), 1, 1, -1, 0, i);
	    //two cards discarded in total
	    assertEquals(old_cards-2,test.handCount[0]);
	    
	    test.initializeGame(2, k, 4);
	    int old_cards_deck=test.deckCount[0];
	    int old_cards_discard=test.discardCount[0];
	    test.cardEffect(CARD.sea_hag.get_CARD(), 1, 1, -1, 0, i);
	    //current players's deck/discard shouldn't be changed
	    assertEquals(old_cards_deck,test.deckCount[0]);
	    assertEquals(old_cards_discard,test.discardCount[0]);
	    
	    test.initializeGame(2, k, 4);
	    old_cards=test.handCount[0];
	    old_cards_deck=test.deckCount[0];
	    test.hand[0][1]=CARD.treasure_map.get_CARD();
	    test.cardEffect(CARD.treasure_map.get_CARD(), 1, 1, -1, 0, i);
	    //2 cards discarded from hand, 4 added to deck
	    assertEquals(old_cards-2, test.handCount[0]);
	    assertEquals(old_cards_deck+4, test.deckCount[0]);
	}
	
	@Test
	public void testdiscardCard()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		int old_handcount=test.handCount[0];
		test.discardCard(0, 0, 0);
		assertEquals(test.handCount[0],old_handcount-1);
	}
	
	@Test
	public void testgainCard()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		int olddiscard=test.discardCount[0];
		test.gainCard(0, 0, 0);
		assertEquals(test.discardCount[0], olddiscard+1);
		
		int olddeck=test.deckCount[0];
		test.gainCard(0, 1, 0);
		assertEquals(test.deckCount[0], olddeck+1);
		
		int oldhand=test.handCount[0];
		test.gainCard(0, 2, 0);
		assertEquals(test.handCount[0], oldhand+1);
	}
	
	@Test
	public void testupdateCoins()
	{
		gameState test=new gameState();
		int[] k = {CARD.adventurer.get_CARD(), CARD.gardens.get_CARD(), CARD.embargo.get_CARD(), CARD.village.get_CARD(), CARD.minion.get_CARD(), CARD.mine.get_CARD(), CARD.cutpurse.get_CARD(), 
			       CARD.sea_hag.get_CARD(), CARD.tribute.get_CARD(), CARD.smithy.get_CARD()};
		test.initializeGame(2, k, 4);
		
		int oldcoins=test.coins;
		intWrapper i=new intWrapper();
		i.int_wrapped=4;
		test.updateCoins(0,i);
		assertEquals(oldcoins,test.coins-4);
	}*/
	//TODO: INSERT BUGS
}
