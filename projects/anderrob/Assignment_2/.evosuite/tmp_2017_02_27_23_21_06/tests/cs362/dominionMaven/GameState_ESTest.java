/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 07:25:20 GMT 2017
 */

package cs362.dominionMaven;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominionMaven.Card;
import cs362.dominionMaven.GameState;
import cs362.dominionMaven.Player;
import cs362.dominionMaven.Randomness;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "hPsoTHy7JO</XHdY");
      gameState0.addPlayer(player0);
      Card.CardName.values();
      gameState0.cards = (List<Card>) linkedList0;
      Card.Type.values();
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.cards = (List<Card>) linkedList0;
      gameState0.addPlayer(player0);
      gameState1.players = gameState0.players;
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Vector<Card> vector0 = new Vector<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(vector0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Card.CardName card_CardName0 = Card.CardName.chancellor;
      Card.getCard(vector0, card_CardName0);
      Integer integer0 = new Integer((-3105));
      hashMap0.put((Card) null, integer0);
      List<Player> list1 = gameState0.players;
      gameState0.players = list1;
      Integer integer1 = new Integer(1);
      Card.createCards();
      gameState0.getWinners();
      GameState.gameBoard = hashMap0;
      Randomness.reset((-1093L));
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.players = gameState0.players;
      gameState1.cards = (List<Card>) vector0;
      gameState1.cards = gameState0.cards;
      gameState1.getWinners();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState.cards = null;
      GameState gameState0 = new GameState((List<Card>) null);
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      gameState0.players = (List<Player>) arrayList0;
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is empty you need to intialize the game!!!!");
      arrayList0.add(player0);
      Player player1 = new Player(gameState0, ":?\"O>zbd^Y=dX=U5}v");
      player1.player_username = "hjCl";
      player1.playTreasureCard();
      arrayList0.add(player1);
      Card.Type.values();
      arrayList0.add(player1);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Card.CardName.values();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Randomness.reset(1L);
      Randomness.random = null;
      GameState gameState0 = new GameState((List<Card>) null);
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      arrayList0.clear();
      gameState0.players = (List<Player>) arrayList0;
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(0);
      vector0.spliterator();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      player0.drawCard();
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card.filter(gameState0.cards, card_Type0);
      vector0.addElement((Card) null);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.play();
      Player player0 = new Player(gameState0, "Cards on the table: \n");
      player0.playKingdomCard();
      gameState0.addPlayer(player0);
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.reset((-2568L));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.cards = list0;
      gameState0.toString();
      gameState0.isGameOver();
      gameState0.toString();
      List<Player> list1 = gameState0.players;
      gameState0.players = list1;
      gameState0.play();
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "The board game is empty you need to intialize the game!!!!");
      Card.CardName card_CardName0 = Card.CardName.library;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      player0.discard(card0);
      gameState0.addPlayer(player0);
      MockRandom mockRandom1 = (MockRandom)Randomness.random;
      gameState0.toString();
      Card.Type.values();
      GameState.cards = gameState0.cards;
      Card.Type.values();
      Card.Type.values();
      int int0 = 1168;
      gameState0.addPlayer(player0);
      Random.setNextRandom(1168);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      gameState0.gameBoard = hashMap0;
      Card.CardName card_CardName0 = Card.CardName.festival;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(18);
      hashMap0.putIfAbsent(card0, integer0);
      // Undeclared exception!
      try { 
        gameState0.toString();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Vector<Card> vector0 = new Vector<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(vector0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Card.CardName card_CardName0 = Card.CardName.chancellor;
      Card.getCard(vector0, card_CardName0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      List<Player> list1 = gameState0.players;
      gameState0.players = list1;
      player0.playedCards = gameState0.cards;
      Integer integer0 = new Integer(1);
      Card.createCards();
      gameState0.getWinners();
      hashMap0.put((Card) null, integer0);
      GameState.gameBoard = hashMap0;
      Randomness.reset((-1093L));
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.players = gameState0.players;
      gameState1.cards = (List<Card>) vector0;
      gameState1.cards = gameState0.cards;
      gameState1.getWinners();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.isGameOver();
      vector0.spliterator();
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
      
      List<Player> list0 = gameState0.players;
      gameState0.players = list0;
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Player player0 = new Player(gameState0, "\t\t ");
      player0.drawCard();
      Integer integer0 = new Integer(3);
      Integer.getInteger("\t\t ", 3);
      hashMap0.put((Card) null, integer0);
      List<Player> list1 = gameState0.players;
      GameState gameState1 = new GameState(gameState0.cards);
      Player player1 = new Player(gameState0, "\t\t ");
      vector0.remove((Object) player1);
      gameState0.play();
      Randomness.random = null;
      gameState0.gameBoard.put((Card) null, integer0);
      boolean boolean1 = gameState1.isGameOver();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      String string0 = "";
      Player player0 = new Player(gameState0, "");
      gameState0.toString();
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      gameState0.gameBoard = hashMap0;
      Card.Type.values();
      Integer integer0 = new Integer(0);
      Integer.sum(0, 3);
      hashMap0.put((Card) null, integer0);
      hashMap0.values();
      gameState0.addPlayer(player0);
      gameState0.play();
      Card.Type.values();
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "hPsoTHy7JO</XHdY");
      gameState0.addPlayer(player0);
      gameState0.toString();
      Card.CardName.values();
      gameState0.cards = list0;
      Card.Type.values();
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      assertTrue(stack0.empty());
  }
}
