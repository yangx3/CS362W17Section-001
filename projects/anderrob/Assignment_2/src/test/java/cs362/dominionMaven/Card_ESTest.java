/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 07:26:35 GMT 2017
 */

package cs362.dominionMaven;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominionMaven.Card;
import cs362.dominionMaven.GameState;
import cs362.dominionMaven.Player;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      player0.discard = list0;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card card0 = Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "lOg6X}ULL@V#!@zSll\"3");
      player0.gain(card0);
      player0.gain(card0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.laboratory;
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNotNull(card0);
      
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \n\tlaboratory");
      player0.discard = gameState0.cards;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "lOg6X}ULL@V#!@zl\"3");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Card> linkedHashSet0 = new LinkedHashSet<Card>();
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(linkedHashSet0, card_Type0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.chancellor;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Village;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.library;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.Village;
      stack0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.getCard(stack0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.cellar;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "");
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.library;
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list1 = Card.filter(list0, card_Type0);
      Card.getCard(list1, card_CardName0);
      //  // Unstable assertion: assertEquals(0, list1.size());
      //  // Unstable assertion: assertFalse(list0.equals((Object)list1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.bureaucrat;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "cvmSgr");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.library;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \n\tlibrary");
      player0.hand = list0;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.gardens;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.festival;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, ":");
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.feast;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, ":");
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.council_room;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "HT%sl,s4XTpi*>@Nm");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.chancellor;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.chapel;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player((GameState) null, "");
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "TdtK");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
  }
}
