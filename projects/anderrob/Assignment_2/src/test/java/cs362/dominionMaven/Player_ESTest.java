/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 07:23:32 GMT 2017
 */

package cs362.dominionMaven;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominionMaven.Card;
import cs362.dominionMaven.GameState;
import cs362.dominionMaven.Player;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6{ApN");
      player0.getBuy();
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      player0.numActions = 3063;
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = Integer.getInteger(" --- --------------------------- --- ", (-2082));
      gameState0.gameBoard.put((Card) null, integer0);
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      player0.getBuy();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      Integer integer0 = new Integer((-828));
      hashMap0.put((Card) null, integer0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "$F1X_7-hm");
      player0.discard = gameState0.cards;
      player0.endTurn();
      player0.numBuys = 13;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      player0.numBuys = (-2076);
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getCoin();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card card0 = Card.getCard(player0.playedCards, card_CardName0);
      player0.gain(card0);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getAction();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card card0 = Card.getCard(player0.playedCards, card_CardName0);
      player0.gain(card0);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "\nHand: ");
      player0.numActions = (-1603);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "ZLfV9H9TYe)m");
      player0.getAction();
      player0.getAction();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "H$zy@ZE' O3pdeFem");
      player0.getCoin();
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.coins = 10;
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.coins = 6;
      Integer integer0 = new Integer(18);
      gameState0.gameBoard.put((Card) null, integer0);
      player0.getCoin();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.playedCards = gameState0.cards;
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card card0 = Card.getCard(player0.playedCards, card_CardName0);
      player0.gain(card0);
      // Undeclared exception!
      try { 
        player0.scoreFor();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.drawCard();
      player0.getHandSize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      player0.hand = gameState0.cards;
      player0.playTreasureCard();
      player0.endTurn();
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      player0.hand = gameState0.cards;
      player0.playTreasureCard();
      Player player1 = new Player(gameState0, "kfimbP!b.o");
      player1.discard = gameState0.cards;
      player1.endTurn();
      player1.drawCard();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      player0.hand = gameState0.cards;
      player0.playTreasureCard();
      Player player1 = new Player(gameState0, "kfimbP!b.o");
      player1.discard = gameState0.cards;
      player1.drawCard();
      player1.drawCard();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "mY}R0E=");
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "\t ");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6{ApN");
      player0.hand = list0;
      player0.numActions = 6;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- ");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "CU.e2q4Lot");
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.getHandSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((GameState) null, "mY}R0E=");
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card card0 = Card.getCard(list0, card_CardName0);
      player0.discard(card0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- -- ");
      player0.getCoin();
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      player0.getCoin();
      player0.getCoin();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      player0.getCoin();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = Integer.getInteger(" --- --------------------------- --- ", (-2082));
      gameState0.gameBoard.put((Card) null, integer0);
      player0.getCoin();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      player0.getCoin();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = Integer.getInteger(" --- --------------------------- --- ", (-2082));
      gameState0.gameBoard.put((Card) null, integer0);
      player0.getCoin();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = Integer.getInteger(" --- --------------------------- --- ", 0);
      gameState0.gameBoard.put((Card) null, integer0);
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.getCoin();
      player0.getCoin();
      Integer integer0 = Integer.getInteger(" --- --------------------------- --- ", 8257536);
      gameState0.gameBoard.put((Card) null, integer0);
      player0.buyCard();
      assertEquals(0, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getBuy();
      player0.coins = 6;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominionMaven.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, (String) null);
      player0.playTreasureCard();
      assertEquals(0, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      player0.hand = gameState0.cards;
      player0.endTurn();
      int int0 = player0.scoreFor();
      assertEquals(15, player0.getHandSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getAction();
      player0.playKingdomCard();
      assertEquals(0, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "kfimbP!b.o");
      player0.discard = gameState0.cards;
      player0.initializePlayerTurn();
      assertEquals(0, list0.size());
      assertEquals(5, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, (String) null);
      player0.printStateGame();
      assertEquals(0, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      int int0 = player0.getHandSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6{ApN");
      player0.hand = list0;
      player0.getAction();
      player0.playKingdomCard();
      int int0 = player0.scoreFor();
      assertEquals(19, player0.getHandSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " --- --------------------------- --- ");
      player0.getCoin();
      player0.getBuy();
      player0.getCoin();
      Integer integer0 = new Integer(2483);
      gameState0.gameBoard.putIfAbsent((Card) null, integer0);
      player0.getCoin();
      player0.getCoin();
      player0.getCoin();
      player0.buyCard();
      assertEquals(0, player0.getHandSize());
  }
}
