/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 22:28:10 GMT 2017
 */

package ORG.CS362.DOMINION;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ORG.CS362.DOMINION.Card;
import ORG.CS362.DOMINION.GameState;
import ORG.CS362.DOMINION.Player;
import ORG.CS362.DOMINION.Randomness;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Player player0 = new Player(gameState0, "");
      vector0.spliterator();
      player0.drawCard();
      vector0.stream();
      player0.discard((Card) null);
      Integer integer0 = new Integer((-3324));
      Integer.getInteger("YMD");
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      gameState0.isGameOver();
      gameState0.initializeGame();
      Randomness.random = null;
      Card.CardName.values();
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("i,]!1a1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ORG.CS362.DOMINION.Card.CardName.i,]!1a1
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName.values();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, (String) null);
      player0.drawCard();
      Integer integer0 = Integer.valueOf(410);
      hashMap0.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState0.isGameOver();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Randomness.random = null;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.toString();
      Card.CardName.values();
      Player player0 = new Player(gameState0, "The board game is empty, you need to intialize the game!!!!");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 24, 83, 83);
      linkedList0.add(card0);
      player0.deck = linkedList0;
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName.values();
      TreeSet<Card> treeSet0 = new TreeSet<Card>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>((Collection<? extends Card>) treeSet0);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.addPlayer((Player) null);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.getWinners();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      stack0.parallelStream();
      Player player0 = new Player(gameState0, "vss+");
      List<Card> list0 = player0.playedCards;
      GameState gameState1 = new GameState(list0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      Player player0 = new Player(gameState0, "S+||");
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Randomness.random = null;
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      gameState0.initializeGame();
      gameState0.toString();
      Player player1 = new Player(gameState0, "The board game is empty, you need to intialize the game!!!!");
      gameState0.addPlayer(player1);
      GameState gameState1 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.initializeGame();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, "O)|LPv`G");
      gameState0.getWinners();
      stack0.clone();
      gameState0.toString();
      player0.playTtreasureCard();
      gameState0.addPlayer(player0);
      player0.drawCard();
      Integer integer0 = new Integer(8);
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "h_");
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      Player player1 = new Player(gameState0, "Estate");
      player1.buyCard();
      player1.numActions = 59;
      gameState0.addPlayer(player1);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player1.deck = linkedList0;
      gameState0.addPlayer(player1);
      gameState0.getWinners();
      gameState0.addPlayer(player0);
      gameState0.getWinners();
      gameState0.play();
      gameState0.isGameOver();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "3");
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 13, 13, Integer.MAX_VALUE);
      Card card1 = new Card(card_CardName0, card_Type0, 13, 2525, (-2857));
      Card.CardName card_CardName1 = Card.CardName.Baron;
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ORG.CS362.DOMINION.Card.CardName.3
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Player player0 = new Player(gameState0, "$vWss@xf");
      player0.drawCard();
      gameState0.play();
      Integer integer0 = new Integer(10);
      Card.Type card_Type0 = Card.Type.ACTION;
      Card.filter(stack0, card_Type0);
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      gameState0.gameBoard = null;
      Randomness.reset(836L);
      gameState0.gameBoard = hashMap0;
      Randomness.random = null;
      gameState0.play();
      GameState gameState1 = new GameState((List<Card>) stack0);
      Card.Type.values();
      Card.Type.values();
      Randomness.reset(0L);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }
}
