/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 22:29:48 GMT 2017
 */

package ORG.CS362.DOMINION;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ORG.CS362.DOMINION.Card;
import ORG.CS362.DOMINION.GameState;
import ORG.CS362.DOMINION.Player;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Discard: ");
      player0.coins = 37;
      String string0 = player0.toString();
      assertEquals(" --- Discard:  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coins: 37numBuys: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "qE0^VSMpJ`I2{+GJv");
      player0.numActions = (-18);
      String string0 = player0.toString();
      assertEquals(" --- qE0^VSMpJ`I2{+GJv ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: -18coins: 0numBuys: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "DkQ)");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      player0.numBuys = 11;
      player0.coins = 11;
      player0.buyCard();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      Random.setNextRandom(27);
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.endTurn();
      player0.playTtreasureCard();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      int int0 = player0.scoreFor();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "qE0^VSMpJ`I2{+GJv");
      player0.numActions = (-18);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      Integer integer0 = new Integer((-2804));
      gameState0.gameBoard.putIfAbsent((Card) null, integer0);
      boolean boolean0 = player0.gain((Card) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1017), (-1017), (-1017));
      stack0.add(card0);
      Player player0 = new Player(gameState0, " gains ");
      player0.discard = (List<Card>) stack0;
      int int0 = player0.scoreFor();
      assertEquals((-1017), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.endTurn();
      Card card0 = player0.drawCard();
      assertEquals(4, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1017), (-1017), (-1017));
      stack0.add(card0);
      Player player0 = new Player(gameState0, " gains ");
      player0.discard = (List<Card>) stack0;
      Card card1 = player0.drawCard();
      assertEquals(Card.Type.TREASURE, card1.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.numActions = 2815;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = player0.discard;
      player0.hand = list0;
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "org.apache.oro.io.GlobFilenameFilter");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "");
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Cards on the table: \n");
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "Played Cards: ");
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.Cellar;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 5055);
      Player player0 = new Player(gameState0, "+Y=8bS7nD[5X{Inf");
      player0.discard(card0);
      Card card1 = player0.drawCard();
      assertSame(card1, card0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      player0.numBuys = 27;
      player0.coins = 27;
      player0.buyCard();
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "qE0^VSMpJ`I2{+GJv");
      player0.playTtreasureCard();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.playTtreasureCard();
      player0.endTurn();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "_Xm~fZG`nH,Ck");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.discard = list0;
      player0.drawCard();
      player0.discard = (List<Card>) linkedList0;
      int int0 = player0.scoreFor();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "+Y=8bS7nD[5X{Inf");
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " gains ");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ORG.CS362.DOMINION.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "qE0^VSMpJ`I2{+GJv");
      player0.numActions = 30;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      Integer integer0 = new Integer(27);
      gameState0.gameBoard.putIfAbsent((Card) null, integer0);
      boolean boolean0 = player0.gain((Card) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.putIfAbsent((Card) null, integer0);
      boolean boolean0 = player0.gain((Card) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = player0.discard;
      player0.hand = list0;
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.playTtreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      player0.endTurn();
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "m=VW:(G,5y");
      player0.printStateGame();
  }
}
